[{"content":"\u003cp\u003eHere is the original article:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://proandroiddev.com/android-interview-series-2024-part-8-android-architecture-07ca74eee000\"\u003eüîó Android Interview Series 2024 ‚Äî Part 8 (Android architecture)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis article is published on ProAndroidDev and covers essential Android interview topics for 2024. üöÄ\u003c/p\u003e\n\u003ch5 id=\"1-can-you-explain-the-mvc-and-mvp-patterns-what-are-the-main-differences-and-why-are-they-not-used-in-android-development\"\u003e1. Can you explain the MVC and MVP patterns? What are the main differences and why are they not used in Android development?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eMVC is the Model-View-Controller architecture where model refers to the data model classes. The view refers to the xml files and the controller handles the business logic. The issue with this architecture is unit testing. The model can be easily tested since it is not tied to anything. The controller is tightly coupled with the android apis making it difficult to unit test. Modularity \u0026amp; flexibility is a problem since the view and the controller are tightly coupled. If we change the view, the controller logic should also be changed. Maintenance is also an issue.\u003c/li\u003e\n\u003cli\u003eMVP architecture: Model-View-Presenter architecture. MVP separates concerns by using a Presenter to handle business logic, the View (often an Activity or Fragment) to display UI, and the Model to manage data. In this setup, the Presenter is responsible for updating the View based on the Model‚Äôs data and handling user actions, making it testable and reducing the burden on the Android lifecycle-aware View. This separation improves testability since the Presenter can be tested independently of the Android framework. But the Presenter does not inherently respond to lifecycle events like configuration changes (e.g., screen rotations), which means that extra handling is often required to manage these situations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"2-what-is-mvvm-architecture-in-android\"\u003e2. What is MVVM architecture in android?\u003c/h5\u003e\n\u003cp\u003eMVVM (Model-View-View Model) architecture: MVVM leverages ViewModel, a lifecycle-aware component that holds and processes data for the UI, separating it from the View (Activity/Fragment). The Model represents the data layer and interacts with the ViewModel, which then updates the View using LiveData, DataBinding, or StateFlow. The ViewModel handles data and business logic, while the View observes changes and updates UI reactively, which is lifecycle-aware and thus avoids memory leaks and configuration issues.\u003c/p\u003e\n\u003ch5 id=\"3-what-are-the-main-advantages-and-disadvantages-of-using-mvvm-in-android-development\"\u003e3. What are the main advantages and disadvantages of using MVVM in Android development?\u003c/h5\u003e\n\u003cp\u003e\u003cstrong\u003eAdvantages include:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMVVM encourages a clear separation between the UI (View), business logic (ViewModel), and data (Model). This makes the codebase more modular, organized, and easier to maintain.\u003c/li\u003e\n\u003cli\u003eThe ViewModel is lifecycle-aware, meaning it retains its data across configuration changes like screen rotations. This lifecycle management reduces memory leaks and simplifies handling UI-related data.\u003c/li\u003e\n\u003cli\u003eThe ViewModel contains the business logic and is decoupled from the Android UI framework, making it easier to test independently. The Model and ViewModel can be unit-tested, which improves code quality and reliability.\u003c/li\u003e\n\u003cli\u003eMVVM enables a reactive approach where the View observes data changes in the ViewModel, allowing for automatic UI updates without manual intervention. Using LiveData, Flow, or StateFlow, the View automatically reacts to data changes, which can result in a more responsive and dynamic UI.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSome disadvantages might include:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMVVM, along with components like LiveData, DataBinding, and Flow, requires a deeper understanding of reactive programming and lifecycle management, which can be challenging for developers new to these concepts.\u003c/li\u003e\n\u003cli\u003eUsing DataBinding in MVVM can reduce some code but also add boilerplate, especially if implemented extensively. Additionally, debugging can be more complex with DataBinding, as errors may not always be immediately apparent.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"4-how-do-you-manage-the-fat-viewmodel-problem-in-mvvm\"\u003e4. How do you manage the ‚Äúfat ViewModel‚Äù problem in MVVM?\u003c/h5\u003e\n\u003cp\u003eIn MVVM, the ViewModel can easily become ‚Äúfat‚Äù if too much logic is placed there, especially as the app grows. Handling multiple ViewModel responsibilities can lead to complex, hard-to-maintain code if not carefully managed. This is called the ‚Äúfat ViewModel‚Äù problem. In order to avoid that,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse the Repository Pattern: The Repository acts as a single source of truth for data, abstracting data access layers (local databases, network, cache) from the ViewModel. By offloading data-fetching and manipulation responsibilities to the Repository, the ViewModel only needs to manage UI data, reducing its workload.\u003c/li\u003e\n\u003cli\u003eDelegate Business Logic to Use Cases or Interactors: Use Cases are components that encapsulate a specific piece of business logic. By moving business logic out of the ViewModel into Use Cases, each Use Case is responsible for a single action, keeping the ViewModel focused on UI state and interactions. This approach makes it easier to test logic independently and enhances reusability.\u003c/li\u003e\n\u003cli\u003eUtilize Separate State Management Classes: State management classes manage UI states and UI events, helping organize complex UI-related data. If your ViewModel has many UI states, creating a specific state management class can centralize the handling of UI states, reducing clutter in the ViewModel.\u003c/li\u003e\n\u003cli\u003eUse Event Wrappers for One-Time Events: Event wrappers (e.g., SingleLiveEvent, Event classes) handle events that should only be consumed once, like navigation triggers or toast messages. By using event wrappers, the ViewModel doesn‚Äôt need complex logic to manage one-time events, simplifying its responsibilities and making UI event handling more predictable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"5-what-is-mvi-architecture-and-what-are-its-core-concepts\"\u003e5. What is MVI architecture and what are it‚Äôs core concepts?\u003c/h5\u003e\n\u003cp\u003eMVI (Model-View-Intent) is an architecture pattern that is inspired by functional and reactive programming principles.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe Model in MVI represents the application‚Äôs state and data. It holds all the information needed to render the UI at any given time.\u003c/li\u003e\n\u003cli\u003eThe View in MVI is responsible for rendering the UI based on the Model‚Äôs state. The View receives the state updates from the Model and re-renders itself accordingly, which means the View is entirely reactive and doesn‚Äôt hold any logic.\u003c/li\u003e\n\u003cli\u003eIntents represent user actions or events, such as button clicks, text input, or system events. Intents are like requests to change the state of the application. They are dispatched from the View to the Model, which processes the intent and updates the state accordingly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eKey principles of MVI\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMVI promotes a unidirectional data flow: Intents are sent from the View to the Model, which processes them and returns a new state back to the View. This clear flow helps to prevent unpredictable state changes and race conditions.\u003c/li\u003e\n\u003cli\u003eThe state in MVI is usually managed in one central location (often a single state object), ensuring there is a single source of truth for the UI. This single state object holds all relevant data for rendering the UI, which allows for easy testing, debugging, and state persistence, especially in cases where configuration changes or complex UI flows are involved.\u003c/li\u003e\n\u003cli\u003eMVI encourages immutable states, meaning each change creates a new state rather than modifying the existing one. This immutability helps prevent unintended side effects and makes the state transitions easy to trace.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"6-what-are-some-scenarios-where-mvi-might-be-a-better-fit-than-mvvm\"\u003e6. What are some scenarios where MVI might be a better fit than MVVM?\u003c/h5\u003e\n\u003cp\u003eJetpack Compose aligns well with MVI principles. The declarative nature of Compose reduces the complexity of handling user interactions and ensures that the UI stays in sync with the application state.\u003c/p\u003e\n\u003cp\u003eIn MVI, the UI state is managed by the ViewModel, often using StateFlow or LiveData. This state remains immutable, ensuring UI updates are predictable. Composables observe the state and recompose automatically when the state changes.\nEvent/Intent: User interactions, like button clicks, are captured as events (Intents) and sent to the ViewModel for handling. Intents guide the ViewModel on how to respond to user actions, such as fetching data or adding a user, and the ViewModel adjusts the state based on these actions. This structured flow ensures smooth transitions in state and UI updates.\nEffects handle one-time actions like showing a snackbar or navigation. MVI manages effects using channels, allowing the ViewModel to dispatch them without affecting the app‚Äôs overall state.\u003c/p\u003e\n\u003ch5 id=\"7-can-you-describe-clean-architecture-what-layers-would-you-typically-create-in-a-clean-architecture-setup-and-whats-the-purpose-of-each\"\u003e7. Can you describe Clean Architecture? What layers would you typically create in a Clean Architecture setup, and what‚Äôs the purpose of each?\u003c/h5\u003e\n\u003cp\u003eIn Android development, clean architecture design approach provides a structured way to organize code into layers, each with its own responsibilities and dependencies, making the application more maintainable, flexible, and testable. Typically, Clean Architecture consists of four layers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePresentation Layer: Responsible for the UI and the communication between the user and the app. This is where you handle user input, present data to the user, and manage UI state. Eg: activities, fragments, composables etc.\u003c/li\u003e\n\u003cli\u003eDomain Layer: Contains the business logic and use cases (or interactors) of the application. Executes business rules and logic without directly interacting with data sources or the UI. This layer is agnostic to platform or framework, making it suitable for pure unit testing. Eg: repository, entity, use cases etc.\u003c/li\u003e\n\u003cli\u003eData Layer: Responsible for managing data sources and implementing the Repository pattern. It provides data to the Domain Layer by implementing the Repository interfaces defined in the Domain. Eg: Retrofit, Room db, Paging source etc.\u003c/li\u003e\n\u003cli\u003eFramework and UI Layer: Houses platform-specific elements and external frameworks that your application depends on, such as Android SDK components, dependency injection frameworks (like Dagger or Hilt), and navigation components.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"8-how-do-you-handle-communication-between-different-layers-in-a-clean-architecture-setup\"\u003e8. How do you handle communication between different layers in a Clean Architecture setup?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eCommunication from Presentation Layer to Domain Layer: can happen using Use Cases. Use Cases are often suspend functions (or return Flow or LiveData) to support asynchronous operations. The Presentation Layer then collects the data or subscribes to updates and updates the UI accordingly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Presentation Layer (ViewModel) calls a Use Case\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProfileViewModel\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val getUserProfile: GetUserProfile) : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val userProfile \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableLiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUser\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003eloadProfile\u003c/span\u003e(userId: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewModelScope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            val result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e getUserProfile(userId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            userProfile.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e result\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eCommunication from Domain Layer to Data Layer: The Domain Layer interacts with data through the Repository pattern. The Repository interface is defined in the Domain Layer, while the actual implementation resides in the Data Layer. The Domain Layer doesn‚Äôt know where the data is coming from (e.g., network, database). It simply calls the UserRepository interface, which the Data Layer implements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Domain Layer (Use Case)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetUserProfile\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val userRepository: UserRepository) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    suspend operator fun \u003cspan style=\"color:#a6e22e\"\u003einvoke\u003c/span\u003e(userId: String): User {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e userRepository.\u003cspan style=\"color:#a6e22e\"\u003egetUserById\u003c/span\u003e(userId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Data Layer (Repository Implementation)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserRepositoryImpl\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val apiService: ApiService, \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val userDao: UserDao) : UserRepository {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override suspend fun \u003cspan style=\"color:#a6e22e\"\u003egetUserById\u003c/span\u003e(userId: String): User {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Decide whether to fetch data from network or local database\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e apiService.\u003cspan style=\"color:#a6e22e\"\u003egetUserById\u003c/span\u003e(userId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eCommunication within the Data Layer: The Repository in the Data Layer manages communication between various data sources (e.g., remote API, local database, cache).Data Sources: The Data Layer might have separate Data Sources for handling network requests, local database interactions, and cache. These data sources are abstracted within the Repository, so the Repository decides the source and manages caching logic if necessary.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Data Layer: Example of combining data sources\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserRepositoryImpl\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val apiService: ApiService,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val userDao: UserDao\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e) : UserRepository {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override suspend fun \u003cspan style=\"color:#a6e22e\"\u003egetUserById\u003c/span\u003e(userId: String): User {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// Fetch from remote API\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            val userDto \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e apiService.\u003cspan style=\"color:#a6e22e\"\u003egetUserById\u003c/span\u003e(userId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// Save to local database for caching\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            userDao.\u003cspan style=\"color:#a6e22e\"\u003einsertUser\u003c/span\u003e(userDto.\u003cspan style=\"color:#a6e22e\"\u003etoUserEntity\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            userDto.\u003cspan style=\"color:#a6e22e\"\u003etoUser\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// Convert DTO to domain model\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (exception: Exception) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// Fallback to local database if network fails\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            userDao.\u003cspan style=\"color:#a6e22e\"\u003egetUserById\u003c/span\u003e(userId).\u003cspan style=\"color:#a6e22e\"\u003etoDomainModel\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eData Flow from Data Layer Back to Domain and Presentation Layers: The Data Layer can expose data as Flows, LiveData, or suspend functions that the Domain Layer or Presentation Layer can observe or collect.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Data Layer exposes data as Flow\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoverride fun \u003cspan style=\"color:#a6e22e\"\u003egetUserById\u003c/span\u003e(userId: String): Flow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUser\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val userEntity \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e userDao.\u003cspan style=\"color:#a6e22e\"\u003egetUserById\u003c/span\u003e(userId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(userEntity.\u003cspan style=\"color:#a6e22e\"\u003etoDomainModel\u003c/span\u003e()) \u003cspan style=\"color:#75715e\"\u003e// Emit as domain model\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"9-can-you-explain-the-repository-pattern-and-how-it-helps-with-code-organization-and-separation-of-concerns\"\u003e9. Can you explain the Repository pattern and how it helps with code organization and separation of concerns?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eThe Repository Pattern is a design pattern used to abstract and centralize data access logic, which helps with code organization and separation of concerns. It serves as a bridge between the Domain Layer (business logic) and the Data Layer (data sources such as local databases, remote APIs, and cache). This allows the application‚Äôs core logic to remain independent of specific data source implementations, making the codebase easier to maintain, test, and scale.\u003c/li\u003e\n\u003cli\u003eThe Repository Pattern abstracts data access, hiding the details of data sources from the rest of the app.\u003c/li\u003e\n\u003cli\u003eSeparates concerns by isolating data handling logic, keeping the UI and Domain layers focused on their specific roles.\u003c/li\u003e\n\u003cli\u003eImproves testability by allowing you to mock the Repository for unit tests.\u003c/li\u003e\n\u003cli\u003eCentralizes data management and caching, making it easier to implement and maintain complex data operations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"10-how-would-you-design-a-repository-to-interact-with-a-local-database-and-a-remote-api-in-an-android-application\"\u003e10. How would you design a Repository to interact with a local database and a remote API in an Android application?\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Domain Layer - Repository Interface\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProductRepository\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   suspend fun \u003cspan style=\"color:#a6e22e\"\u003egetProducts\u003c/span\u003e(): List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eProduct\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Data Layer - Repository Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProductRepositoryImpl\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val apiService: ApiService,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val productDao: ProductDao\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e) : ProductRepository {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   override suspend fun \u003cspan style=\"color:#a6e22e\"\u003egetProducts\u003c/span\u003e(): List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eProduct\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e           val products \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e apiService.\u003cspan style=\"color:#a6e22e\"\u003efetchProducts\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e           productDao.\u003cspan style=\"color:#a6e22e\"\u003einsertProducts\u003c/span\u003e(products) \u003cspan style=\"color:#75715e\"\u003e// Cache data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e           products\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (e: Exception) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e           productDao.\u003cspan style=\"color:#a6e22e\"\u003egetProducts\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// Retrieve from local database on error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"thanks-for-reading\"\u003eThanks for reading!\u003c/h5\u003e\n\u003cp\u003eHope you find this useful. This is just a list of questions I personally found useful in interviews. This list is by no means exhaustive. Let me know your thoughts in the responses. Happy coding!\u003c/p\u003e\n","description":"Android Interview Series 2024 ‚Äî Part 8","image":"https://miro.medium.com/v2/resize:fit:3840/format:webp/0*ovGMYgU7aA9In-oV.jpeg","permalink":"https://whywhom.github.io/blogs/android-interview-series-2024-part-8-android-architecture/","title":"Android architecture"},{"content":"\u003cp\u003eHere is the original article:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://proandroiddev.com/android-interview-series-2024-part-7-jetpack-compose-ff7d2ecd9018\"\u003eüîó Android Interview Series 2024 ‚Äî Part 7 (Jetpack Compose)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis article is published on ProAndroidDev and covers essential Android interview topics for 2024. üöÄ\u003c/p\u003e\n\u003ch5 id=\"1-what-is-jetpack-compose\"\u003e1. What is Jetpack Compose?\u003c/h5\u003e\n\u003cp\u003eJetpack Compose is Android‚Äôs recommended modern toolkit for building native UI. It simplifies and accelerates UI development on Android. Jetpack Compose is declarative programming, which means you can describe your user interface by invoking a set of composables, which is vastly different from the traditional way of imperative UI design.\u003c/p\u003e\n\u003ch5 id=\"2-how-does-jetpack-compose-differ-from-xml-based-ui\"\u003e2. How does Jetpack Compose differ from XML-based UI?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eXML-based UI follows an imperative approach, where you define the UI layout in XML and then programmatically change its properties in the Activity or Fragment as the state changes. Jetpack Compose uses a declarative approach. You define what the UI should look like based on the current state. When the state changes, the UI automatically updates to reflect those changes without requiring manual intervention.\u003c/li\u003e\n\u003cli\u003eSince Jetpack Compose reduces the need for XML and reduces code duplication, you can achieve more with less code. This leads to fewer errors and a more maintainable codebase.\nReusability is simpler due to composable functions. You can create UI components as functions with the @Composable annotation and reuse them across different parts of the app, easily adding parameters for customization.\u003c/li\u003e\n\u003cli\u003eAndroid Studio provides powerful tools for Jetpack Compose, like live previews, which allow you to see how your UI looks in real-time as you code.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"3-how-can-we-use-traditional-android-views-and-compose-together\"\u003e3. How can we use traditional android views and compose together?\u003c/h5\u003e\n\u003cp\u003eEmbedding XML View insider Jetpack Compose: We can embed a traditional Android View inside a Jetpack Compose layout using the AndroidView composable. This allows to use any existing Android View component within a Compose UI.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Embedding a WebView inside a Jetpack Compose layout\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eWebViewExample\u003c/span\u003e(url: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    AndroidView(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        factory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { context \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            WebView(context).\u003cspan style=\"color:#a6e22e\"\u003eapply\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                settings.\u003cspan style=\"color:#a6e22e\"\u003ejavaScriptEnabled\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003eloadUrl\u003c/span\u003e(url)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        update \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { webView \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            webView.\u003cspan style=\"color:#a6e22e\"\u003eloadUrl\u003c/span\u003e(url) \u003cspan style=\"color:#75715e\"\u003e// Allows updating the URL when it changes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEmbedding Jetpack Compose in XML Layouts:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Add a ComposeView to your XML layout.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eandroidx.\u003cspan style=\"color:#a6e22e\"\u003ecompose\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eui\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eplatform\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eComposeView\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    android:id\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@+id/compose_view\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    android:layout_width\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;match_parent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    android:layout_height\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;wrap_content\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// In your Activity or Fragment, get a reference to ComposeView and set its content\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval composeView \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e findViewById\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eComposeView\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(R.\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecompose_view\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecomposeView.\u003cspan style=\"color:#a6e22e\"\u003esetContent\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello from Jetpack Compose!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"4-what-is-a-composable-function-and-how-do-you-define-one\"\u003e4. What is a Composable function, and how do you define one?\u003c/h5\u003e\n\u003cp\u003eA Composable function is a fundamental building block in Jetpack Compose. It‚Äôs a special function that defines a piece of UI in a declarative way. By marking a function with @Composable, you make it possible for Jetpack Compose to track and manage the UI it represents, automatically handling updates whenever the underlying data or state changes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eGreeting\u003c/span\u003e(name: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, $name!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"5-explain-the-jetpack-compose-lifecycle\"\u003e5. Explain the Jetpack Compose Lifecycle.\u003c/h5\u003e\n\u003cp\u003eThe Jetpack Compose Lifecycle is similar to the traditional Android lifecycle but has unique characteristics due to its declarative, reactive nature.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComposition is the initial phase where the UI elements are created for the first time.\nThis phase only occurs once for a given part of the UI (unless it needs to be recreated). Once composed, the UI stays on the screen until it is either updated (via recomposition) or removed (via disposal).\nWhen a composable function is called for the first time, Jetpack Compose: builds the UI tree by evaluating the composable functions and creating UI elements and adds the resulting UI elements to the screen, establishing the initial view structure.\u003c/li\u003e\n\u003cli\u003eRecomposition is the phase where Jetpack Compose updates the UI in response to state changes.\nDuring recomposition, only the functions affected by the state changes are re-evaluated.\nIf no state changes occur, Compose will not recompose.\nRecomposition happens whenever a value that a composable depends on changes.\u003c/li\u003e\n\u003cli\u003eDisposal is the phase where Compose removes composable functions that are no longer needed from the UI.\nThis typically happens when a composable: goes out of scope due to a change in the UI tree (e.g., navigating away from a screen or conditionally removing a component) or is replaced by another composable.\nDuring the disposal phase, Compose: cleans up resources associated with the composable, such as cancelling coroutines, releasing listeners, or disposing of state objects and executes DisposableEffect cleanup code if defined, ensuring no resources are left hanging.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"6-what-is-a-modifier-in-jetpack-compose\"\u003e6. What is a Modifier in Jetpack Compose?\u003c/h5\u003e\n\u003cp\u003eA Modifier in Jetpack Compose is a powerful and flexible tool used to modify the appearance, behavior, and layout of composable functions. Modifiers are essential for adding properties like padding, size, background, click actions, and layout adjustments to composable elements without altering the composable function itself.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eModifiers are stateless. They do not hold or manage state.\u003c/li\u003e\n\u003cli\u003eModifiers are chainable. They can be chained to apply multiple properties sequentially, creating a flexible way to build complex UI behaviors.\u003c/li\u003e\n\u003cli\u003eModifiers are reusable. They are designed to be highly reusable, allowing you to define them once and apply them to multiple composables.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"7-what-are-the-different-types-of-modifier\"\u003e7. What are the different types of Modifier?\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003eLayout modifiers: Layout modifiers control the size, padding, alignment, and general layout behavior of a composable.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003epadding: Adds padding around a composable.\nfillMaxSize / fillMaxWidth / fillMaxHeight: Makes the composable fill the available space.\u003c/li\u003e\n\u003cli\u003esize: Sets an explicit width and height.\u003c/li\u003e\n\u003cli\u003ewrapContentSize: Wraps the composable‚Äôs size to its content and positions it within the available space.\u003c/li\u003e\n\u003cli\u003ealign(): modifier specifies the alignment of a composable within its parent layout.\u003c/li\u003e\n\u003cli\u003eweight(): is used in Row or Column layouts to distribute space among children based on their weight.\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eAppearance modifiers: Appearance modifiers help you modify the look of composables by adding background colors, borders, and opacity.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003ebackground: Sets a background color.\u003c/li\u003e\n\u003cli\u003eborder: Adds a border around the composable.\u003c/li\u003e\n\u003cli\u003ealpha: Adjusts the transparency of a composable.\u003c/li\u003e\n\u003cli\u003eclip: clips the composable to a specified shape.\u003c/li\u003e\n\u003cli\u003eshadow: adds a shadow effect to a composable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eBehaviour modifiers: Behavior modifiers allow you to add interactivity, such as click handling, scroll behavior, and gestures.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eclickable: Makes the composable respond to click events.\u003c/li\u003e\n\u003cli\u003escrollable: Adds scroll behavior (e.g., for custom scrollable components).\u003c/li\u003e\n\u003cli\u003etoggleable: adds toggle behavior, useful for creating switch-like components.\u003c/li\u003e\n\u003cli\u003edraggable: allows dragging gestures on the composable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003eAnimation modifiers: add animations and transitions to composables.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eanimateContentSize: Automatically animates size changes.\u003c/li\u003e\n\u003cli\u003egraphicsLayer: applies transformations such as scaling, rotation, and translation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"5\"\u003e\n\u003cli\u003eCustom modifiers: You can create custom modifiers by defining extension functions on Modifier. This is useful for applying a specific combination of modifiers that you might use frequently.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"8-how-to-create-responsive-layouts-with-jetpack-compose\"\u003e8. How to create Responsive Layouts with Jetpack Compose?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eUse Modifier with Adaptive Sizing: Using Modifier functions like fillMaxWidth(), fillMaxSize(), weight(), and wrapContentSize() allows your composables to adapt to the available screen space.\u003c/li\u003e\n\u003cli\u003eResponsive Layouts with ConstraintLayout: ConstraintLayout allows you to create more complex responsive layouts by defining constraints between elements, similar to XML-based ConstraintLayout in Android.\u003c/li\u003e\n\u003cli\u003eBoxWithConstraints allows you to access the constraints of the available space, enabling you to create conditional layouts based on the screen size or orientation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eResponsiveBoxExample\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BoxWithConstraints(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003ebackground\u003c/span\u003e(Color.\u003cspan style=\"color:#a6e22e\"\u003eLightGray\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val boxWidth \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e maxWidth\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val boxHeight \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e maxHeight\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval dynamicBoxWidth \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e boxWidth \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e 0.\u003cspan style=\"color:#a6e22e\"\u003e7f\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val dynamicBoxHeight \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e boxHeight \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e 0.\u003cspan style=\"color:#a6e22e\"\u003e3f\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eBox\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e(dynamicBoxWidth, dynamicBoxHeight)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003ebackground\u003c/span\u003e(Color.\u003cspan style=\"color:#a6e22e\"\u003eBlue\u003c/span\u003e, shape \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e RoundedCornerShape(8.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003ealign\u003c/span\u003e(Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;70% Width, 30% Height\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Color.\u003cspan style=\"color:#a6e22e\"\u003eWhite\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003ealign\u003c/span\u003e(Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eCompose provides WindowSizeClass as a way to categorize screen sizes, making it easy to switch layouts based on the type of device (compact, medium, expanded).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eResponsiveLayout\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val windowSizeClass \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e rememberWindowSizeClass()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    when (windowSizeClass.\u003cspan style=\"color:#a6e22e\"\u003ewidthSizeClass\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        WindowWidthSizeClass.\u003cspan style=\"color:#a6e22e\"\u003eCompact\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Column { \u003cspan style=\"color:#75715e\"\u003e/* Layout for phones */\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        WindowWidthSizeClass.\u003cspan style=\"color:#a6e22e\"\u003eMedium\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Row { \u003cspan style=\"color:#75715e\"\u003e/* Layout for small tablets */\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        WindowWidthSizeClass.\u003cspan style=\"color:#a6e22e\"\u003eExpanded\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Row { \u003cspan style=\"color:#75715e\"\u003e/* Layout for larger tablets and desktops */\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"9-how-do-you-handle-orientation-changes-in-jetpack-compose\"\u003e9. How do you handle orientation changes in Jetpack Compose?\u003c/h5\u003e\n\u003cp\u003eOrientation changes in Jetpack Compose are handled automatically by recomposing the UI based on the new configuration. Composable functions that define the UI layout and behavior will be recomposed with the updated configuration, allowing the UI to adapt to the new orientation.\u003c/p\u003e\n\u003ch5 id=\"10-how-does-recomposition-work-in-jetpack-compose\"\u003e10. How does Recomposition work in Jetpack Compose?\u003c/h5\u003e\n\u003cp\u003eRecomposition is the process by which Jetpack Compose updates parts of the UI when there is a change in state. When a state variable (like a MutableState) changes, Jetpack Compose identifies the composables that depend on that state and re-runs only those composables, updating the UI accordingly. This minimizes the work needed to keep the UI in sync with the underlying data, which improves performance.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Only the Counter composable and its children are \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// recomposed because they directly depend on count.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCounter\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#75715e\"\u003e// When count is incremented, the MutableState triggers a change.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e count by remember { mutableStateOf(0) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#75715e\"\u003e// The Text inside the Button updates to show the new \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#75715e\"\u003e// count without redrawing the entire screen.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Clicked $count times\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"11-what-is-state-in-jetpack-compose\"\u003e11. What is State in Jetpack Compose?\u003c/h5\u003e\n\u003cp\u003eState in Jetpack Compose represents data that can change over time and that Compose uses to update the UI when it changes. It allows the UI to automatically respond to changes in underlying data.\u003c/p\u003e\n\u003ch5 id=\"12-what-are-the-two-different-types-of-state\"\u003e12. What are the two different types of state?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eLocal State: Local state is the state managed within a single composable function. It‚Äôs typically used for UI elements that don‚Äôt need to share their state with other parts of the UI. Local state is created using remember and mutableStateOf, which retain values across recompositions within the same composable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCounter\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e count by remember { mutableStateOf(0) } \u003cspan style=\"color:#75715e\"\u003e// Local state\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Clicked $count times\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eShared State: In this pattern, the state is moved up to a shared parent component, making it easier to manage across different parts of the UI.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eParentComposable\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e sharedCount by remember { mutableStateOf(0) } \u003cspan style=\"color:#75715e\"\u003e// Shared state\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ChildComposable(sharedCount, onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { sharedCount\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eChildComposable\u003c/span\u003e(count: Int, onClick: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e onClick) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Shared count: $count\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"13-what-is-state-hoisting\"\u003e13. What is state hoisting?\u003c/h5\u003e\n\u003cp\u003eState hoisting is a design pattern in Jetpack Compose that involves moving (or ‚Äúhoisting‚Äù) state out of a composable function and into its parent composable. This approach makes the state ‚Äúshared‚Äù between composables and allows for better reusability, testing, and separation of concerns.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eParentComposable\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// count and onIncrement are managed by ParentComposable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e count by remember { mutableStateOf(0) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CounterButton(count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e count, onIncrement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// CounterButton becomes a stateless, reusable composable \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// that simply displays the count and triggers the onIncrement \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// function when clicked\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCounterButton\u003c/span\u003e(count: Int, onIncrement: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e onIncrement) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Clicked $count times\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"14-what-is-the-purpose-of-remember-in-jetpack-compose\"\u003e14. What is the purpose of remember in Jetpack Compose?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eThe remember function in Jetpack Compose is used to store a value across recompositions, allowing the value to persist without resetting every time the composable function is recomposed.\u003c/li\u003e\n\u003cli\u003eWhen you use remember, Compose caches the value during the initial composition. During recomposition, Compose checks the cache and reuses the stored value instead of recalculating or reinitializing it. However, if the composable leaves the composition (like when navigating away from a screen), the value is cleared.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCounter\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e count by remember { mutableStateOf(0) } \u003cspan style=\"color:#75715e\"\u003e// Retains value across recompositions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Clicked $count times\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"15-explain-remembersaveable-how-is-it-different-from-remember\"\u003e15. Explain rememberSaveable. How is it different from remember?\u003c/h5\u003e\n\u003cp\u003erememberSaveable works similarly to remember, but it preserves its state across configuration changes like screen rotations. It‚Äôs useful for UI elements like text fields that need to retain state when the device orientation changes.\nrememberSaveable: Saves the values in the bundle of the saved instance state (or SavedStateHandle). This enables it to restore the values after configuration changes, though it may incur slight overhead for storing and retrieving data.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eTextInputExample\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e text by rememberSaveable { mutableStateOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TextField(value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e text, onValueChange \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e it })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"16-how-does-mutablestate-work-in-jetpack-compose\"\u003e16. How does MutableState work in Jetpack Compose?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eMutableState is an observable data holder that allows composables to react to changes in state automatically. When the value of a MutableState object changes, Jetpack Compose triggers a recomposition for any composables that read that state, updating the UI to reflect the new data.\u003c/li\u003e\n\u003cli\u003eMutableState is typically created using the mutableStateOf function. This function returns an instance of MutableState that holds the initial value and updates the value whenever it changes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCounter\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e count by remember { mutableStateOf(0) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Clicked $count times\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"17-explain-the-concept-of-derived-states-in-compose\"\u003e17. Explain the concept of Derived States in Compose.\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eDerived State is a concept used to create a new state based on one or more existing states. It allows you to compute values based on other states, updating only when the underlying state(s) change.\u003c/li\u003e\n\u003cli\u003eThe derivedStateOf function is used to create derived states in Compose. This function takes a lambda that computes the derived value and only recomposes when the result of the calculation changes.\u003c/li\u003e\n\u003cli\u003ederivedStateOf works by observing the input state(s) used within its lambda function. When any of the observed input states change, Compose re-evaluates the lambda.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composablefun\u003c/span\u003e MultiComponentWithDerivedState() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val items \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e remember { mutableStateListOf(1, 2, 3) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e counter by remember { mutableStateOf(0) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e text by remember { mutableStateOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val sum by remember { derivedStateOf { items.\u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e() } }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eColumn {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { items.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e((1..\u003cspan style=\"color:#a6e22e\"\u003e10\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003erandom\u003c/span\u003e()) }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Add Item\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sum: $sum\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { counter\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Counter: $counter\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        TextField(value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e text, onValueChange \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e it })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"18-what-are-sideeffects-in-jetpack-compose\"\u003e18. What are SideEffects in Jetpack Compose?\u003c/h5\u003e\n\u003cp\u003eIn Compose, a side-effect refers to any change in the app‚Äôs state that occurs outside the scope of a composable function. Side effects should be executed in a way that respects the composable lifecycle to avoid unexpected behaviors, like duplicate network requests on recomposition. Side effects ensure that actions occur only when necessary and not during every recomposition, keeping the UI efficient and consistent.\u003c/p\u003e\n\u003ch5 id=\"19-explain-the-different-sideeffects-in-jetpack-compose\"\u003e19. Explain the different SideEffects in Jetpack Compose?\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003eLaunchedEffect: is used to run suspend functions within the lifecycle of a composable.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eIt triggers a coroutine when the composable enters the composition, making it ideal for tasks like fetching data or handling side-effects based on changes in state.\u003c/li\u003e\n\u003cli\u003eThe key parameter in LaunchedEffect is used to identify the LaunchedEffect instance and prevent it from being recomposed unnecessarily.\u003c/li\u003e\n\u003cli\u003eIf the value of the key parameter changes, Jetpack Compose will consider the LaunchedEffect instance as a new instance, and will execute the side effect again.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// The LaunchedEffect is triggered whenever viewState changes. \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// When you use the entire viewState object as a key in LaunchedEffect, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// the coroutine inside LaunchedEffect will be re-launched every time \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// the viewState object changes. This means that even if a property in \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// viewState changes that is not relevant to the logic inside LaunchedEffect, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// the coroutine will still restart\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eUserScreen\u003c/span\u003e(viewModel: UserViewModel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModel(), onUserLoaded: (User) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val viewState by viewModel.\u003cspan style=\"color:#a6e22e\"\u003eviewState\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollectAsStateLifecycle\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLaunchedEffect(viewState) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        when {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            viewState.\u003cspan style=\"color:#a6e22e\"\u003eerrorMessage\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// Show a Snackbar when an error occurs\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                SnackbarHostState().\u003cspan style=\"color:#a6e22e\"\u003eshowSnackbar\u003c/span\u003e(viewState.\u003cspan style=\"color:#a6e22e\"\u003eerrorMessage\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e!!\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            viewState.\u003cspan style=\"color:#a6e22e\"\u003euser\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// Handle successful user loading, e.g., navigate to a new screen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                onUserLoaded(viewState.\u003cspan style=\"color:#a6e22e\"\u003euser\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eDisposableEffect: s used for side effects that require setup and cleanup when the composable enters and exits the composition. It‚Äôs often used to manage resources that need explicit cleanup, like registering/unregistering listeners. A key point with DisposableEffect is that it allows you to add and remove observers or listeners in a safe manner that is tied directly to the composable‚Äôs lifecycle. This helps prevent memory leaks and ensures that resources are cleaned up when no longer needed.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt‚Äôs often used to manage resources that need explicit cleanup, like registering/unregistering listeners. A key point with DisposableEffect is that it allows you to add and remove observers or listeners in a safe manner that is tied directly to the composable‚Äôs lifecycle. This helps prevent memory leaks and ensures that resources are cleaned up when no longer needed.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCustomStatusBarScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Use LocalContext to access the current Activity\u0026#39;s window\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val context \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalContext.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val window \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (context as\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e Activity)\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ewindow\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Define the custom color for the status bar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val customColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Color(0xFF6200EE) \u003cspan style=\"color:#75715e\"\u003e// Example: Purple color\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Use DisposableEffect to update and reset the status bar color\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DisposableEffect(Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Set the custom color for the status bar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        window\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatusBarColor\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e customColor.\u003cspan style=\"color:#a6e22e\"\u003etoArgb\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Ensure that the status bar color is reset when the composable is removed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        onDispose {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            window\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatusBarColor\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ContextCompat.\u003cspan style=\"color:#a6e22e\"\u003egetColor\u003c/span\u003e(context, R.\u003cspan style=\"color:#a6e22e\"\u003ecolor\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edefault_status_bar_color\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Content of the composable screen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This screen has a custom status bar color\u0026#34;\u003c/span\u003e, fontSize \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 18.\u003cspan style=\"color:#a6e22e\"\u003esp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003erememberCoroutineScope: When you need a coroutine to start based on a user action, such as a button click, rememberCoroutineScope is useful. It provides a scope tied to the composable\u0026rsquo;s lifecycle, ensuring the coroutine cancels if the composable leaves the composition.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eLoadDataButton\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val scope \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e rememberCoroutineScope()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e data by remember { mutableStateOf\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e?\u0026gt;\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        scope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fetchDataFromApi() \u003cspan style=\"color:#75715e\"\u003e// Suspend function\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Load Data\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    data\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elet\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Data: $it\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003erememberUpdatedState: is to keep an updated reference to a value within long-lived or side-effect composables, like LaunchedEffect or DisposableEffect, without restarting them when the value changes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eIt effectively ‚Äúpins‚Äù the latest value, ensuring that ongoing effects can access it without triggering recompositions or re-running the effect.\u003c/li\u003e\n\u003cli\u003eThis approach is particularly useful when you have a callback or lambda function passed into a composable that may change over time. You may not want to restart the entire effect when the callback changes, especially if the effect is managing a complex operation like a long-running coroutine.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Suppose you have a countdown timer that should execute a callback \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// function when the countdown reaches zero. However, if the callback \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// function changes while the timer is running, you want the timer \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// to call the latest version of the callback without restarting the \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// countdown\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCountdownTimer\u003c/span\u003e(duration: Long, onTimerFinish: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val currentCallback by \u003cspan style=\"color:#a6e22e\"\u003erememberUpdatedState\u003c/span\u003e(newValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e onTimerFinish)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    LaunchedEffect(duration) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Start countdown\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(duration)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Call the latest version of the callback without restarting the timer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        currentCallback()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003eSideEffect runs non-suspendable side effects during each recomposition. It allows you to perform actions that don\u0026rsquo;t require any cleanup but need to execute whenever a specific recomposition happens. Examples include logging, debugging, or updating external objects that are not tied to Compose‚Äôs lifecycle.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Imagine you have a UserProfile screen that displays the user\u0026#39;s \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// profile information. Every time the composable recomposes (perhaps \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// due to some state change), you want to log an event for analytics \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// purposes. Here‚Äôs how you can use SideEffect to achieve this:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eUserProfileScreen\u003c/span\u003e(userName: String, userAge: Int) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Display user profile information\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Name: $userName\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Age: $userAge\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Use SideEffect to log an analytics event each time this composable recomposes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SideEffect {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        logAnalyticsEvent(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UserProfileScreen\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UserProfileRecomposed\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003elogAnalyticsEvent\u003c/span\u003e(screenName: String, event: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// This function would integrate with your analytics service to log the event\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Log.\u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Analytics\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Screen: $screenName - Event: $event\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Example: AnalyticsService.logEvent(screenName, event)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"20-what-are-snapshotstatelist-and-snapshotstatemap\"\u003e20. What are SnapshotStateList and SnapshotStateMap\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003eSnapshotStateList\u003c/code\u003e and \u003ccode\u003eSnapshotStateMap\u003c/code\u003e are special types of collections in Jetpack Compose designed to work efficiently with Compose\u0026rsquo;s state system. These collections are observable, meaning that when their content changes, they trigger recomposition in any composables that depend on them. They are useful for managing lists and maps in a way that Compose can track changes and update the UI accordingly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// mutableStateListOf creates a SnapshotStateList, which is automatically tracked by Compose.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// When todos.add(\u0026#34;New task\u0026#34;) is called, Compose observes this change, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// triggering recomposition and updating the UI to show the new item.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// The forEach loop displays each item, so adding a new item automatically \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// updates the displayed list without needing additional code to re-render it\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eTodoListScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val todos \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e remember { mutableStateListOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Buy groceries\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Call mom\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Do laundry\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { todos.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;New task\u0026#34;\u003c/span\u003e) }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Add Task\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        todos.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e { task \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(task)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// mutableStateMapOf creates a SnapshotStateMap, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// which is automatically tracked by Compose.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// The Switch updates each setting\u0026#39;s value directly \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// in the map, and any change to a setting automatically \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// triggers recomposition for the affected part of the UI, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// reflecting the new setting state immediately.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eSettingsScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val settings \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e remember {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        mutableStateMapOf(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Notifications\u0026#34;\u003c/span\u003e to \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Dark Mode\u0026#34;\u003c/span\u003e to \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Location Access\u0026#34;\u003c/span\u003e to \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        settings.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e { (key, value) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Row {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e key)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Switch(checked \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e value, onCheckedChange \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { newValue \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    settings\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ekey\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e newValue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"21-what-is-snapshotflow-and-when-would-you-use-it\"\u003e21. What is snapshotFlow, and when would you use it?\u003c/h5\u003e\n\u003cp\u003esnapshotFlow converts state changes within the Compose snapshot system into a Kotlin Flow. It allows you to observe changes to Compose state values in a coroutine-based Flow format, which can then be collected and transformed asynchronously. This is particularly useful when you need to react to state changes in a non-composable function or want to combine, debounce, throttle, or filter state updates in a coroutine context.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eSearchBar\u003c/span\u003e(onSearch: (String) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e query by remember { mutableStateOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Use LaunchedEffect with snapshotFlow to observe query changes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    LaunchedEffect(query) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        snapshotFlow { query }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003edebounce\u003c/span\u003e(300) \u003cspan style=\"color:#75715e\"\u003e// Only emit the value if no other input arrives within 300ms\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efilter\u003c/span\u003e { it.\u003cspan style=\"color:#a6e22e\"\u003eisNotEmpty\u003c/span\u003e() } \u003cspan style=\"color:#75715e\"\u003e// Only search for non-empty queries\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { searchQuery \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                onSearch(searchQuery) \u003cspan style=\"color:#75715e\"\u003e// Perform search or API call\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TextField(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e query,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        onValueChange \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e it },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003efillMaxWidth\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        placeholder \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Search...\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"22-describe-producestate\"\u003e22. Describe produceState.\u003c/h5\u003e\n\u003cp\u003eproduceState is used to convert external state, such as data from a network or database, into Compose state. It launches a coroutine that updates the state as necessary. This is particularly useful for managing state that is derived from external sources, such as fetching data from a remote API or database and then feeding that data into your composable‚Äôs state.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eproduceState(\n// The initial value of the state before any data is produced.\ninitialValue: T, \n// he dependency keys that determine when produceState should restart the coroutine.\n// If any of the keys change, the coroutine will be re-launched.\nvararg keys: Any?,\n// A lambda that contains the suspendable code to produce the state.\nproducer: suspend ProduceScope\u0026lt;T\u0026gt;.() -\u0026gt; Unit\n): State\u0026lt;T\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// A common use case for produceState is to fetch data from an asynchronous \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// source, such as a network API or a database, and provide that data as state \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// to the UI. For example, consider an app that displays weather information \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// for a city. You could use produceState to fetch and update weather data when \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// the city changes or the screen is recomposed.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eWeatherScreen\u003c/span\u003e(cityName: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Use produceState to fetch weather data based on the city name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val weatherState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e produceState\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eWeather\u003cspan style=\"color:#f92672\"\u003e?\u0026gt;\u003c/span\u003e(initialValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e, cityName) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Fetch data for the city asynchronously\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fetchWeatherData(cityName)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Display the data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        when (val weather \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e weatherState.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e CircularProgressIndicator() \u003cspan style=\"color:#75715e\"\u003e// Show a loading spinner while data is being fetched\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Temperature in $cityName: ${weather.temperature}¬∞C\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Hypothetical suspend function to fetch weather data from an API\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esuspend fun \u003cspan style=\"color:#a6e22e\"\u003efetchWeatherData\u003c/span\u003e(cityName: String): Weather {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Simulate network request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(1000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Weather(cityName, temperature \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (15..\u003cspan style=\"color:#a6e22e\"\u003e30\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003erandom\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWeather\u003c/span\u003e(val city: String, val temperature: Int)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"23-explain-compositionlocal\"\u003e23. Explain CompositionLocal.\u003c/h5\u003e\n\u003cp\u003eCompositionLocal provides a mechanism for passing data down through the composition implicitly, without needing to pass it through every composable function. This can be particularly useful when the data is frequently used across many parts of the UI, such as theme-related information (like theme, configuration settings, or dependencies).\u003c/p\u003e\n\u003cp\u003eCompositionLocal is similar to dependency injection but is designed specifically for Compose‚Äôs composable hierarchy.\nIt allows composables to access ‚Äúambient‚Äù data, meaning data that is globally available within a certain scope but not explicitly passed down through parameters.\nCompositionLocalProvider is used to provide values for these locals, and CompositionLocal.current is used to access them.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.runtime.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.material3.Text\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.material3.Button\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.material3.Column\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.tooling.preview.Preview\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Define a CompositionLocal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval LocalUserTheme \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e compositionLocalOf { \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Light\u0026#34;\u003c/span\u003e }  \u003cspan style=\"color:#75715e\"\u003e// Default theme is \u0026#34;Light\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyApp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Provide a custom value for the CompositionLocal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CompositionLocalProvider(LocalUserTheme provides \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Dark\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        MyScreen()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Access the CompositionLocal value\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val userTheme \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalUserTheme.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Current Theme: $userTheme\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Change Theme\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Preview\u003c/span\u003e(showBackground \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003ePreviewMyApp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"24-what-are-the-different-types-of-compositionlocal-providers\"\u003e24. What are the different types of CompositionLocal Providers?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecompositionLocalOf\u003c/code\u003e is the most commonly used provider for creating a CompositionLocal with a default or fallback value. It‚Äôs useful when you want to provide a single value that can be accessed anywhere within the composition tree.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis API allows fine control over recompositions. When the value changes, only the parts of the UI that read this value are recomposed. This makes it ideal for frequently changing data like dynamic themes or user preferences.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Imagine you want to define a primary color that all components\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// in a screen can access and use.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Define a CompositionLocal with a default primary color\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval LocalPrimaryColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e compositionLocalOf { Color.\u003cspan style=\"color:#a6e22e\"\u003eBlack\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eThemedScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Provide a specific color within this composable\u0026#39;s scope\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CompositionLocalProvider(LocalPrimaryColor provides \u003cspan style=\"color:#a6e22e\"\u003eColor\u003c/span\u003e(0xFF6200EE)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Column(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003ebackground\u003c/span\u003e(LocalPrimaryColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e, color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalPrimaryColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            CustomButton()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCustomButton\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#75715e\"\u003e/* Do something */\u003c/span\u003e },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        colors \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ButtonDefaults.\u003cspan style=\"color:#a6e22e\"\u003ebuttonColors\u003c/span\u003e(backgroundColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalPrimaryColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Click Me\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estaticCompositionLocalOf\u003c/code\u003e is similar to compositionLocalOf, but it is optimized for static values that do not change during recomposition. This provider type should be used when the value is guaranteed not to change after it has been set. This is commonly used for values that are initialized once, such as a singleton dependency, app-wide configurations, or services like SharedPreferences.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Suppose you want to provide access to SharedPreferences across multiple \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// composables to read user preferences.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Define a static CompositionLocal for SharedPreferences\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval LocalSharedPreferences \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e staticCompositionLocalOf\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eSharedPreferences\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    error(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;No SharedPreferences provided\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyApp\u003c/span\u003e(sharedPreferences: SharedPreferences) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CompositionLocalProvider(LocalSharedPreferences provides sharedPreferences) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Now any child composable can access LocalSharedPreferences.current\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        UserProfileScreen()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eUserProfileScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val sharedPreferences \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalSharedPreferences.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val userName \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sharedPreferences.\u003cspan style=\"color:#a6e22e\"\u003egetString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;user_name\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Guest\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Welcome, $userName!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eJetpack Compose also provides several predefined CompositionLocal objects for common scenarios, like accessing theme values, layout direction, and text input service.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// In a dark mode-compatible app, you might want to access the \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// current color scheme or typography without manually passing it down.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eThemedText\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Access LocalContentColor and LocalTextStyle provided by the MaterialTheme\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, Theme!\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalContentColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        style \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalTextStyle.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"25-how-can-we-manage-navigation-using-composition-local\"\u003e25. How can we manage navigation using Composition Local?\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.os.Bundle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.ComponentActivity\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.compose.setContent\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.foundation.layout.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.material3.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.runtime.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.text.font.FontWeight\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.unit.dp\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.unit.sp\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.navigation.NavController\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.navigation.compose.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.tooling.preview.Preview\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Define a CompositionLocal for NavController\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval LocalNavController \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e compositionLocalOf\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNavController\u003cspan style=\"color:#f92672\"\u003e?\u0026gt;\u003c/span\u003e { \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : ComponentActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        setContent {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyApp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Create a NavController for the app\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val navController \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e rememberNavController()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Provide the NavController to the CompositionLocal scope\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CompositionLocalProvider(LocalNavController provides navController) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Set up the NavHost with two screens: Home and Details\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NavHost(navController \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e navController, startDestination \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            composable(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e) { HomeScreen() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            composable(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;details\u0026#34;\u003c/span\u003e) { DetailsScreen() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eHomeScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Access the NavController from CompositionLocal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val navController \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalNavController.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eColumn\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Home Screen\u0026#34;\u003c/span\u003e, fontSize \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 24.\u003cspan style=\"color:#a6e22e\"\u003esp\u003c/span\u003e, fontWeight \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FontWeight.\u003cspan style=\"color:#a6e22e\"\u003eBold\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { navController\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003enavigate\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;details\u0026#34;\u003c/span\u003e) }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Go to Details\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eDetailsScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Access the NavController from CompositionLocal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val navController \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalNavController.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eColumn\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Details Screen\u0026#34;\u003c/span\u003e, fontSize \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 24.\u003cspan style=\"color:#a6e22e\"\u003esp\u003c/span\u003e, fontWeight \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FontWeight.\u003cspan style=\"color:#a6e22e\"\u003eBold\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { navController\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003enavigate\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e) }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Back to Home\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Preview\u003c/span\u003e(showBackground \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eDefaultPreview\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"26-how-can-we-dynamically-switch-themes-with-the-help-of-compositionlocal\"\u003e26. How can we dynamically switch themes with the help of CompositionLocal?\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.os.Bundle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.ComponentActivity\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.compose.setContent\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.foundation.background\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.foundation.layout.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.material3.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.runtime.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.Alignment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.graphics.Color\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.text.font.FontWeight\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.unit.dp\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.unit.sp\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.tooling.preview.Preview\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Define CompositionLocal for theme colors\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval LocalAppColors \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e compositionLocalOf { lightColors() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : ComponentActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        setContent {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Light and dark theme color definitions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003elightColors\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e AppColors(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    background \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Color.\u003cspan style=\"color:#a6e22e\"\u003eWhite\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Color.\u003cspan style=\"color:#a6e22e\"\u003eBlack\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    buttonColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Color(0xFF6200EE)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003edarkColors\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e AppColors(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    background \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Color.\u003cspan style=\"color:#a6e22e\"\u003eBlack\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Color.\u003cspan style=\"color:#a6e22e\"\u003eWhite\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    buttonColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Color(0xFFBB86FC)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Data class for holding color values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAppColors\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val background: Color,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val content: Color,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val buttonColor: Color\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyApp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// State to track the current theme\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isDarkTheme by remember { mutableStateOf(\u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Update the theme colors based on the isDarkTheme flag\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val colors \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (isDarkTheme) darkColors() \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e lightColors()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Provide the theme colors to the CompositionLocal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CompositionLocalProvider(LocalAppColors provides colors) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Themed content that reacts to theme changes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Surface(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalAppColors.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ebackground\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Column(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Text(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Dynamic Theme Switching\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalAppColors.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    fontSize \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 24.\u003cspan style=\"color:#a6e22e\"\u003esp\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    fontWeight \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FontWeight.\u003cspan style=\"color:#a6e22e\"\u003eBold\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Button(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { isDarkTheme \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eisDarkTheme },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    colors \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ButtonDefaults.\u003cspan style=\"color:#a6e22e\"\u003ebuttonColors\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        backgroundColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalAppColors.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ebuttonColor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Switch Theme\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"27-how-can-we-manage-authenticated-state-of-a-user-with-the-help-of-compositionlocal\"\u003e27. How can we manage authenticated state of a user with the help of CompositionLocal?\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.os.Bundle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.ComponentActivity\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.compose.setContent\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.foundation.layout.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.material3.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.runtime.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.Alignment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.tooling.preview.Preview\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.unit.dp\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Define a CompositionLocal for managing the user authentication state\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval LocalAuthState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e compositionLocalOf\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eAuthState\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e { AuthState.\u003cspan style=\"color:#a6e22e\"\u003eUnauthenticated\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003esealed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAuthState\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    object Unauthenticated : AuthState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    data \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAuthenticated\u003c/span\u003e(val username: String) : AuthState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : ComponentActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        setContent {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyApp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// State to track if the user is authenticated and the current username\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e authState by remember { mutableStateOf\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eAuthState\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(AuthState.\u003cspan style=\"color:#a6e22e\"\u003eUnauthenticated\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Provide the auth state to the CompositionLocal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CompositionLocalProvider(LocalAuthState provides authState) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Display either the login screen or the home screen based on auth state\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        when (val currentAuthState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalAuthState.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            is AuthState.\u003cspan style=\"color:#a6e22e\"\u003eAuthenticated\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e HomeScreen(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                username \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e currentAuthState.\u003cspan style=\"color:#a6e22e\"\u003eusername\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                onLogout \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { authState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e AuthState.\u003cspan style=\"color:#a6e22e\"\u003eUnauthenticated\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            AuthState.\u003cspan style=\"color:#a6e22e\"\u003eUnauthenticated\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e LoginScreen(onLogin \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { username \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                authState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e AuthState.\u003cspan style=\"color:#a6e22e\"\u003eAuthenticated\u003c/span\u003e(username)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eLoginScreen\u003c/span\u003e(onLogin: (String) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e username by remember { mutableStateOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Login Screen\u0026#34;\u003c/span\u003e, style \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MaterialTheme.\u003cspan style=\"color:#a6e22e\"\u003etypography\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etitleLarge\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        TextField(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e username,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            onValueChange \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { username \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e it },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            label \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Username\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { onLogin(username) }) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Login\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eHomeScreen\u003c/span\u003e(username: String, onLogout: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Welcome, $username!\u0026#34;\u003c/span\u003e, style \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MaterialTheme.\u003cspan style=\"color:#a6e22e\"\u003etypography\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etitleLarge\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e onLogout) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Logout\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Preview\u003c/span\u003e(showBackground \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eDefaultPreview\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"28-explain-the-concept-of-delegation-and-the-by-keyword-when-working-with-jetpack-compose\"\u003e28. Explain the concept of delegation and the by keyword when working with Jetpack Compose.\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eDelegation is a design pattern that allows a class to delegate certain responsibilities to another object or class. This concept is especially useful in Compose when dealing with state management.\u003c/li\u003e\n\u003cli\u003eThe by keyword is used to facilitate delegation, making code more concise and readable.\u003c/li\u003e\n\u003cli\u003eProperty delegation allows a property to be managed by another object. Instead of manually implementing getter and setter logic, you can ‚Äúdelegate‚Äù this responsibility to an object that implements the required functionality.\u003c/li\u003e\n\u003cli\u003eThe by keyword in Kotlin specifies that a property‚Äôs getter and setter methods are handled by the delegate object. The by keyword is often used with mutableStateOf or remember to delegate state management, allowing Compose to observe changes to the property and trigger recompositions when the property value changes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"29-what-are-the-different-optimisation-techniques-in-jetpack-compose\"\u003e29. What are the different optimisation techniques in Jetpack Compose?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eUsing remember to Cache Values Across Recompositions: The remember function caches values across recompositions, preventing the need to recalculate values that don‚Äôt change.\u003c/li\u003e\n\u003cli\u003erememberSaveable extends remember by preserving values across configuration changes, like screen rotations. It‚Äôs especially useful for persisting user-entered text or selected options.\u003c/li\u003e\n\u003cli\u003eCompose automatically recomposes only the parts of the UI that depend on updated state. However, to optimize performance, it‚Äôs helpful to isolate state-dependent parts of your UI within smaller composable functions.\u003c/li\u003e\n\u003cli\u003eLaunchedEffect is useful for side effects that need to occur only once or when certain keys change. This prevents re-running the effect during every recomposition, which can be resource-intensive.\u003c/li\u003e\n\u003cli\u003ederivedStateOf can be used to avoid redundant calculations by caching derived values. It recalculates only when its dependencies change, optimizing performance for derived properties.\u003c/li\u003e\n\u003cli\u003eWhen displaying large lists, using LazyColumn and LazyRow is essential. Unlike Column and Row, they only render visible items, which conserves memory and improves performance.\u003c/li\u003e\n\u003cli\u003esnapshotFlow efficiently converts Compose state into a Kotlin Flow. This is ideal for handling continuous state updates without triggering recompositions.\u003c/li\u003e\n\u003cli\u003eJetpack Compose provides the animateAsState functions for smooth animations with minimal recompositions. Use them for animating properties that are lightweight and do not trigger recompositions on every frame.\u003c/li\u003e\n\u003cli\u003eUsing stable data and unique keys in lists helps Compose avoid unnecessary recompositions by ensuring that data changes are detected accurately.\u003c/li\u003e\n\u003cli\u003eWhen managing resources like listeners or other resources tied to the composable lifecycle, use DisposableEffect for efficient setup and cleanup. This ensures that resources are freed when the composable leaves the composition.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Simulated data classes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserProfile\u003c/span\u003e(val id: Int, val name: String, val bio: String)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFriend\u003c/span\u003e(val id: Int, val name: String)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Simulated external data source\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esuspend fun \u003cspan style=\"color:#a6e22e\"\u003efetchFriends\u003c/span\u003e(): List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eFriend\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(1000) \u003cspan style=\"color:#75715e\"\u003e// Simulate network delay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e listOf(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Friend(1, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Alice\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Friend(2, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Friend(3, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Charlie\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// MainActivity to host the app content\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : ComponentActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        setContent {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyApp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Remember theme toggle state with rememberSaveable to survive configuration changes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isDarkTheme by rememberSaveable { mutableStateOf(\u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val backgroundColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (isDarkTheme) Color.\u003cspan style=\"color:#a6e22e\"\u003eDarkGray\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e Color.\u003cspan style=\"color:#a6e22e\"\u003eWhite\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val contentColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (isDarkTheme) Color.\u003cspan style=\"color:#a6e22e\"\u003eWhite\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e Color.\u003cspan style=\"color:#a6e22e\"\u003eBlack\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Provide theme dynamically with CompositionLocal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CompositionLocalProvider(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        LocalContentColor provides contentColor,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        LocalBackgroundColor provides backgroundColor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Surface(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003ebackground\u003c/span\u003e(LocalBackgroundColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            UserProfileScreen(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                UserProfile(1, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;John Doe\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Loves Compose!\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                isDarkTheme,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                onToggleTheme \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { isDarkTheme \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eisDarkTheme }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Custom CompositionLocals\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval LocalBackgroundColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e compositionLocalOf { Color.\u003cspan style=\"color:#a6e22e\"\u003eWhite\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval LocalContentColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e compositionLocalOf { Color.\u003cspan style=\"color:#a6e22e\"\u003eBlack\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eUserProfileScreen\u003c/span\u003e(user: UserProfile, isDarkTheme: Boolean, onToggleTheme: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e friends by remember { mutableStateOf\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eFriend\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e(emptyList()) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val friendListState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e rememberLazyListState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isExpanded by remember { mutableStateOf(\u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Fetch friends once on composition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    LaunchedEffect(Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        friends \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fetchFriends()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Profile info with animation on size\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val size by \u003cspan style=\"color:#a6e22e\"\u003eanimateDpAsState\u003c/span\u003e(targetValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (isExpanded) 150.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e 100.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ProfilePicture(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e(size),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalContentColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { isExpanded \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eisExpanded }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(user.\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e, color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalContentColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e, fontSize \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 24.\u003cspan style=\"color:#a6e22e\"\u003esp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(user.\u003cspan style=\"color:#a6e22e\"\u003ebio\u003c/span\u003e, color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalContentColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e, fontSize \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 16.\u003cspan style=\"color:#a6e22e\"\u003esp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e onToggleTheme) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (isDarkTheme) \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Switch to Light Mode\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Switch to Dark Mode\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(24.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Friends\u0026#34;\u003c/span\u003e, color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalContentColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e, fontSize \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 20.\u003cspan style=\"color:#a6e22e\"\u003esp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// LazyColumn for friends list with stable key for optimization\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        LazyColumn(state \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e friendListState, modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003efillMaxWidth\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            items(friends, key \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { it.\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e }) { friend \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                FriendItem(friend \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e friend)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Use snapshotFlow to observe scroll position\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        LaunchedEffect(friendListState) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            snapshotFlow { friendListState.\u003cspan style=\"color:#a6e22e\"\u003efirstVisibleItemIndex\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003edistinctUntilChanged\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003efilter\u003c/span\u003e { it \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e friends.\u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 2 }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#75715e\"\u003e// Load more friends if available, or show a message\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eProfilePicture\u003c/span\u003e(modifier: Modifier, color: Color, onClick: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit, shape: Shape \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CircleShape) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Box(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003ebackground\u003c/span\u003e(color, shape)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003eclickable\u003c/span\u003e(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e onClick),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        contentAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Profile\u0026#34;\u003c/span\u003e, color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Color.\u003cspan style=\"color:#a6e22e\"\u003eWhite\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eFriendItem\u003c/span\u003e(friend: Friend) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Row(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efillMaxWidth\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(vertical \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 8.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterVertically\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Box(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e(40.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003ebackground\u003c/span\u003e(LocalContentColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e, CircleShape)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003ewidth\u003c/span\u003e(8.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(friend.\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e, color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LocalContentColor.\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e, fontSize \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 18.\u003cspan style=\"color:#a6e22e\"\u003esp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Preview\u003c/span\u003e(showBackground \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003ePreviewMyApp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"30-share-an-example-of-how-we-can-manage-state-using-viewmodel-and-livedata-in-compose\"\u003e30. Share an example of how we can manage state using ViewModel and LiveData in Compose.\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.os.Bundle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.ComponentActivity\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.compose.setContent\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.foundation.layout.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.material3.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.runtime.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.Alignment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.tooling.preview.Preview\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.unit.dp\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.LiveData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.MutableLiveData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.ViewModel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.viewmodel.compose.viewModel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Main Activity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : ComponentActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        setContent {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// App Composable that observes ViewModel state\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyApp\u003c/span\u003e(viewModel: CounterViewModel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModel()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Observe LiveData from the ViewModel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val count by viewModel.\u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eobserveAsState\u003c/span\u003e(0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CounterScreen(count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e count, onIncrement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModel::increment)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ViewModel with LiveData\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCounterViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// MutableLiveData to manage the count state\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val _count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableLiveData(0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val count: LiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInt\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e _count\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Function to increment count\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003eincrement\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _count.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (_count.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e: 0) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// CounterScreen Composable that displays the count and increment button\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCounterScreen\u003c/span\u003e(count: Int, onIncrement: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Count: $count\u0026#34;\u003c/span\u003e, style \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MaterialTheme.\u003cspan style=\"color:#a6e22e\"\u003etypography\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etitleLarge\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e onIncrement) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Increment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Preview\u003c/span\u003e(showBackground \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003ePreviewMyApp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"31-share-an-example-of-how-we-can-manage-state-using-viewmodel-and-stateflow-in-compose\"\u003e31. Share an example of how we can manage state using ViewModel and StateFlow in Compose.\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : ComponentActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        setContent {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            MyApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ViewModel to manage state using StateFlow\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCounterViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// MutableStateFlow to hold the count value\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val _count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableStateFlow(0) \u003cspan style=\"color:#75715e\"\u003e// Initial value is 0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Expose StateFlow to prevent external modification of _count\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val count: StateFlow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInt\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e _count.\u003cspan style=\"color:#a6e22e\"\u003easStateFlow\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Function to increment count\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003eincrement\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _count.\u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e { it \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1 }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Function to decrement count\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003edecrement\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _count.\u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e { it \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1 }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyApp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Retrieve ViewModel using viewModel() delegate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val viewModel: CounterViewModel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModel()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Collect the count value as State in Compose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val count by viewModel.\u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollectAsState\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// UI layout for the counter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CounterScreen(count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e count, onIncrement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModel::increment, onDecrement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModel::decrement)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eCounterScreen\u003c/span\u003e(count: Int, onIncrement: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit, onDecrement: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// UI for displaying and updating the counter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003eCenter\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        horizontalAlignment \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Alignment.\u003cspan style=\"color:#a6e22e\"\u003eCenterHorizontally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Counter: $count\u0026#34;\u003c/span\u003e, style \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MaterialTheme.\u003cspan style=\"color:#a6e22e\"\u003etypography\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etitleLarge\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Row {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e onDecrement, modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(end \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 8.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Decrement\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Button(onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e onIncrement) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Increment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"32-explain-the-concept-of-lazy-composition-in-jetpack-compose\"\u003e32. Explain the concept of lazy composition in Jetpack Compose.\u003c/h5\u003e\n\u003cp\u003eLazy composition refers to the concept of deferring the composition of UI elements until they are actually needed or visible on the screen. This approach is particularly useful for handling large collections of UI elements, like lists or grids, by only composing the items that are currently in view. Lazy composition helps optimize performance and memory usage by minimizing the number of composable functions that are composed at any given time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.os.Bundle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.ComponentActivity\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.compose.setContent\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.foundation.layout.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.foundation.lazy.LazyColumn\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.foundation.lazy.items\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.material3.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.runtime.Composable\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.compose.ui.unit.dp\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : ComponentActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        setContent {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            LazyListExample()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eLazyListExample\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val items \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (1..\u003cspan style=\"color:#a6e22e\"\u003e1000\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e { \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Item $it\u0026#34;\u003c/span\u003e } \u003cspan style=\"color:#75715e\"\u003e// A large list of 1000 items\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    LazyColumn(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        contentPadding \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e PaddingValues(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verticalArrangement \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrangement.\u003cspan style=\"color:#a6e22e\"\u003espacedBy\u003c/span\u003e(8.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        items(items) { item \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ListItem(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e item)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eListItem\u003c/span\u003e(text: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Surface(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003efillMaxWidth\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(8.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MaterialTheme.\u003cspan style=\"color:#a6e22e\"\u003ecolorScheme\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprimary\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        shadowElevation \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 4.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e text,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            color \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MaterialTheme.\u003cspan style=\"color:#a6e22e\"\u003ecolorScheme\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonPrimary\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"33-what-are-recomposition-and-skippable-recomposition\"\u003e33. What are Recomposition and Skippable Recomposition?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRecomposition\u003c/code\u003e is the process in which a composable function re-executes to reflect changes in the underlying state that it depends on. Recomposition works by tracking state reads within a composable function. When a composable reads a state, Compose ‚Äúsubscribes‚Äù to that state, and any changes in the state trigger recomposition of that composable.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSkippable recomposition\u003c/code\u003e is a performance optimization that prevents recomposition of composables when their dependencies haven‚Äôt changed.\u003c/li\u003e\n\u003cli\u003eCompose can ‚Äúskip‚Äù recomposing certain parts of the UI if it detects that the values the composable depends on have not changed since the last recomposition.\u003c/li\u003e\n\u003cli\u003eFor a composable to be ‚Äúskippable,‚Äù the values it depends on should be stable. In Kotlin, data marked with val and immutable data types are inherently stable.\u003c/li\u003e\n\u003cli\u003eJetpack Compose considers stable data to be data that is either immutable or marked with @Stable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"34-how-to-achieve-relative-positioning-in-jetpack-compose\"\u003e34. How to achieve Relative Positioning in Jetpack Compose?\u003c/h5\u003e\n\u003cp\u003eUnlike traditional XML layouts in Android, Jetpack Compose does not have a direct equivalent of RelativeLayout, but it provides composable functions like Box, Row, Column, ConstraintLayout , and alignment modifiers to achieve relative positioning.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUsing Box for Overlapping Composables: Box is a layout that allows its children to overlap each other, making it useful for positioning items relative to each other with alignment modifiers.\u003c/li\u003e\n\u003cli\u003eRow and Column are great for positioning items horizontally or vertically relative to each other. You can adjust Arrangement and Alignment to control the positioning of each child.\u003c/li\u003e\n\u003cli\u003eModifier.offset allows you to apply pixel offsets to composables, giving precise control over their position relative to the default layout position.\u003c/li\u003e\n\u003cli\u003eConstraintLayout provides advanced positioning features, similar to the traditional ConstraintLayout in XML.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eConstraintLayoutExample\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ConstraintLayout allows positioning Button \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// below Text by linking button\u0026#39;s top to text\u0026#39;s bottom.  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ConstraintLayout(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Create references for composables\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val (text, button) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e createRefs()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, Compose!\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003econstrainAs\u003c/span\u003e(text) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                top.\u003cspan style=\"color:#a6e22e\"\u003elinkTo\u003c/span\u003e(parent.\u003cspan style=\"color:#a6e22e\"\u003etop\u003c/span\u003e, margin \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// aligns the button horizontally with\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// the start of the text, achieving \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               \u003cspan style=\"color:#75715e\"\u003e// relative positioning.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                start.\u003cspan style=\"color:#a6e22e\"\u003elinkTo\u003c/span\u003e(parent.\u003cspan style=\"color:#a6e22e\"\u003estart\u003c/span\u003e, margin \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            onClick \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003econstrainAs\u003c/span\u003e(button) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                top.\u003cspan style=\"color:#a6e22e\"\u003elinkTo\u003c/span\u003e(text.\u003cspan style=\"color:#a6e22e\"\u003ebottom\u003c/span\u003e, margin \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// Positioned below text\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                start.\u003cspan style=\"color:#a6e22e\"\u003elinkTo\u003c/span\u003e(text.\u003cspan style=\"color:#a6e22e\"\u003estart\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Click Me\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"heading\"\u003e\u003c/h5\u003e\n\u003ch5 id=\"heading-1\"\u003e\u003c/h5\u003e\n\u003ch5 id=\"heading-2\"\u003e\u003c/h5\u003e\n\u003ch5 id=\"thanks-for-reading\"\u003eThanks for reading!\u003c/h5\u003e\n\u003cp\u003eHope you find this useful. This is just a list of questions I personally found useful in interviews. This list is by no means exhaustive. Let me know your thoughts in the responses. Happy coding!\u003c/p\u003e\n\u003ch2 id=\"paragraph\"\u003eParagraph\u003c/h2\u003e\n\u003cp\u003eXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\u003c/p\u003e\n\u003cp\u003eItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\u003c/p\u003e\n\u003ch2 id=\"blockquotes\"\u003eBlockquotes\u003c/h2\u003e\n\u003cp\u003eThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a \u003ccode\u003efooter\u003c/code\u003e or \u003ccode\u003ecite\u003c/code\u003e element, and optionally with in-line changes such as annotations and abbreviations.\u003c/p\u003e\n\u003ch3 id=\"blockquote-without-attribution\"\u003eBlockquote without attribution\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTiam, ad mint andaepu dandae nostion secatur sequo quae.\n\u003cstrong\u003eNote\u003c/strong\u003e that you can use \u003cem\u003eMarkdown syntax\u003c/em\u003e within a blockquote.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"blockquote-with-attribution\"\u003eBlockquote with attribution\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon\u0026rsquo;t communicate by sharing memory, share memory by communicating.\u003c/p\u003e\n‚Äî \u003ccite\u003eRob Pike\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/cite\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"tables\"\u003eTables\u003c/h2\u003e\n\u003cp\u003eTables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eName\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eAge\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eBob\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e27\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eAlice\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e23\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"inline-markdown-within-tables\"\u003eInline Markdown within tables\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eInline¬†¬†¬†\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eMarkdown¬†¬†¬†\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eIn¬†¬†¬†\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eTable\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cem\u003eitalics\u003c/em\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003ebold\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cdel\u003estrikethrough\u003c/del\u003e¬†¬†¬†\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003ecode\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"code-blocks\"\u003eCode Blocks\u003c/h2\u003e\n\u003ch3 id=\"code-block-with-backticks\"\u003eCode block with backticks\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;Example HTML5 Document\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;Test\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"code-block-indented-with-four-spaces\"\u003eCode block indented with four spaces\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\n\u0026lt;head\u0026gt;\n  \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\n  \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n  \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"code-block-with-hugos-internal-highlight-shortcode\"\u003eCode block with Hugo\u0026rsquo;s internal highlight shortcode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;Example HTML5 Document\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;Test\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"list-types\"\u003eList Types\u003c/h2\u003e\n\u003ch3 id=\"ordered-list\"\u003eOrdered List\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eFirst item\u003c/li\u003e\n\u003cli\u003eSecond item\u003c/li\u003e\n\u003cli\u003eThird item\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"unordered-list\"\u003eUnordered List\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eList item\u003c/li\u003e\n\u003cli\u003eAnother item\u003c/li\u003e\n\u003cli\u003eAnd another item\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"nested-list\"\u003eNested list\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eItem\n\u003col\u003e\n\u003cli\u003eFirst Sub-item\u003c/li\u003e\n\u003cli\u003eSecond Sub-item\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"headings\"\u003eHeadings\u003c/h2\u003e\n\u003cp\u003eThe following HTML \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e‚Äî\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e elements represent six levels of section headings. \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e is the highest section level while \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e is the lowest.\u003c/p\u003e\n\u003ch1 id=\"h1\"\u003eH1\u003c/h1\u003e\n\u003ch2 id=\"h2\"\u003eH2\u003c/h2\u003e\n\u003ch3 id=\"h3\"\u003eH3\u003c/h3\u003e\n\u003ch4 id=\"h4\"\u003eH4\u003c/h4\u003e\n\u003ch5 id=\"h5\"\u003eH5\u003c/h5\u003e\n\u003ch6 id=\"h6\"\u003eH6\u003c/h6\u003e\n\u003ch2 id=\"other-elements--abbr-sub-sup-kbd-mark\"\u003eOther Elements ‚Äî abbr, sub, sup, kbd, mark\u003c/h2\u003e\n\u003cp\u003e\u003cabbr title=\"Graphics Interchange Format\"\u003eGIF\u003c/abbr\u003e is a bitmap image format.\u003c/p\u003e\n\u003cp\u003eH\u003csub\u003e2\u003c/sub\u003eO\u003c/p\u003e\n\u003cp\u003eX\u003csup\u003en\u003c/sup\u003e + Y\u003csup\u003en\u003c/sup\u003e = Z\u003csup\u003en\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003ePress \u003ckbd\u003e\u003ckbd\u003eCTRL\u003c/kbd\u003e+\u003ckbd\u003eALT\u003c/kbd\u003e+\u003ckbd\u003eDelete\u003c/kbd\u003e\u003c/kbd\u003e to end the session.\u003c/p\u003e\n\u003cp\u003eMost \u003cmark\u003esalamanders\u003c/mark\u003e are nocturnal, and hunt for insects, worms, and other small creatures.\u003c/p\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003eThe above quote is excerpted from Rob Pike\u0026rsquo;s \u003ca href=\"https://www.youtube.com/watch?v=PAAkCSZUG1c\"\u003etalk\u003c/a\u003e during Gopherfest, November 18, 2015.\u0026#160;\u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n","description":"Android Interview Series 2024 ‚Äî Part 7","image":"https://miro.medium.com/v2/resize:fit:3840/format:webp/0*ovGMYgU7aA9In-oV.jpeg","permalink":"https://whywhom.github.io/blogs/android-interview-series-2024-part-7-jetpack-compose/","title":"Jetpack Compose"},{"content":"\u003cp\u003eHere is the original article:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://proandroiddev.com/android-interview-series-2024-part-6-kotlin-flows-730f6bf877df\"\u003eüîó Android Interview Series 2024 ‚Äî Part 6 (Kotlin Flows)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis article is published on ProAndroidDev and covers essential Android interview topics for 2024. üöÄ\u003c/p\u003e\n\u003ch5 id=\"1-what-is-flow\"\u003e1. What is Flow?\u003c/h5\u003e\n\u003cp\u003eA stream of data that can be computed asynchronously is referred to as a Flow . It allows you to emit multiple values over time in a sequential and reactive manner. Some key characteristics of Flow:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFlow is designed to handle asynchronous data streams, where values are emitted one after the other. Each emission is processed sequentially, suspending until the previous emission completes, providing a natural way to handle data flow in a non-blocking way.\u003c/li\u003e\n\u003cli\u003eFlow handles backpressure automatically by suspending emissions if the collector (consumer) is slow to process them. This prevents overwhelming the consumer and manages resource usage effectively.\u003c/li\u003e\n\u003cli\u003eFlow is \u0026ldquo;cold,\u0026rdquo; meaning it doesn‚Äôt produce or emit any values until it is actively collected. Each time you call collect on a Flow, it starts from scratch, similar to how a function is called and executed anew. This is different from hot streams, like LiveData or RxJava‚Äôs Subject, which emit values independently of whether there‚Äôs an active observer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"2-what-are-the-different-ways-to-create-a-flow\"\u003e2. What are the different ways to create a Flow?\u003c/h5\u003e\n\u003cp\u003eFlow builders allow you to create flows in various ways depending on your use case. The most commonly used flow builders include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe flow builder is the primary way to create a flow. It allows you to emit values asynchronously using the emit() function.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003esimpleFlow\u003c/span\u003e(): Flow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInt\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i in 1..\u003cspan style=\"color:#a6e22e\"\u003e5\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(100) \u003cspan style=\"color:#75715e\"\u003e// Simulate some delay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(i) \u003cspan style=\"color:#75715e\"\u003e// Emit values from 1 to 5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eThe flowOf builder creates a flow from a fixed set of values.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval values = flowOf(1, 2, 3, 4, 5)\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eThe asFlow extension allows you to convert collections or sequences into flows.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eval values = listOf(1, 2, 3).asFlow()\n\u003c/code\u003e\u003c/pre\u003e\u003ch5 id=\"3-what-are-the-two-different-types-of-flows\"\u003e3. What are the two different types of Flows?\u003c/h5\u003e\n\u003cp\u003eThere are two different types of Flows:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eA Cold Flow in Kotlin is a flow that does not start emitting values until a collector actively starts collecting it. This means that each collector (or subscriber) gets its own instance of the flow, and the flow starts from scratch every time it is collected.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eCold flows are ‚Äúlazy,‚Äù so no work is done until there is a demand for data.\u003c/li\u003e\n\u003cli\u003eEach collector receives its own independent stream of data. Each time a new collector subscribes, the flow starts from the beginning.\u003c/li\u003e\n\u003cli\u003eSuitable for use cases where you want fresh data for each subscriber, such as database queries, network requests, or other repeatable sources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Regular Flow example\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val coldFlow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         emit(0) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         emit(1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         emit(2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    launch { \u003cspan style=\"color:#75715e\"\u003e// Calling collect the first time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        coldFlow.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cold flow collector 1 received: $value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(2500)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// Calling collect a second time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      coldFlow.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cold flow collector 2 received: $value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// RESULT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Both the collectors will get all the values from the beginning. \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// For both collectors, the corresponding Flow starts from the beginning.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eflow collector 1 received: \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0, 1, 2\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eflow collector 1 received: \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0, 1, 2\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eHot Flow emit values independently of whether there are active collectors or not. Once started, a hot flow continuously produces data that is shared among all collectors. This behavior is similar to broadcasting: new subscribers (collectors) receive only the latest emissions but miss any past values emitted before they started collecting.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eAll collectors receive data from the same ongoing flow, starting from the latest value at the time they subscribe.\u003c/li\u003e\n\u003cli\u003eEmission does not restart for each new collector; it‚Äôs a single, shared source.\u003c/li\u003e\n\u003cli\u003eSuitable for scenarios like UI state updates, event broadcasting, or shared state where all subscribers need access to the latest values.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// SharedFlow example\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val sharedFlow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableSharedFlow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInt\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sharedFlow.\u003cspan style=\"color:#a6e22e\"\u003eemit\u003c/span\u003e(0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sharedFlow.\u003cspan style=\"color:#a6e22e\"\u003eemit\u003c/span\u003e(1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sharedFlow.\u003cspan style=\"color:#a6e22e\"\u003eemit\u003c/span\u003e(2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sharedFlow.\u003cspan style=\"color:#a6e22e\"\u003eemit\u003c/span\u003e(3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sharedFlow.\u003cspan style=\"color:#a6e22e\"\u003eemit\u003c/span\u003e(4)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    launch {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sharedFlow.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SharedFlow collector 1 received: $value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(2500)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// Calling collect a second time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      sharedFlow.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SharedFlow collector 2 received: $value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// RESULT \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// The collectors will get the values from where they have started collecting. \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Here the 1st collector gets all the values. But the 2nd collector gets \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// only those values that got emitted after 2500 milliseconds as it started \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// collecting after 2500 milliseconds.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSharedFlow collector 1 received: \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0,1,2,3,4\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSharedFlow collector 2 received: \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e2,3,4\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"4-sharedflow-vs-stateflow\"\u003e4. SharedFlow vs StateFlow?\u003c/h5\u003e\n\u003cp\u003eBoth SharedFlow and StateFlow are types of hot flows that emit values to multiple subscribers and keep emitting even when no subscribers are actively collecting.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eStateFlow is a specialized hot flow designed to hold and emit state updates. It always has a single current value and emits the latest state to new collectors.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eIt holds a single, current value that can be read and updated directly. Changes to the value are updated immediately, and new collectors always receive the latest value upon subscription.\u003c/li\u003e\n\u003cli\u003eOnly the latest value is replayed to new collectors.\u003c/li\u003e\n\u003cli\u003eExposed as an immutable StateFlow, so external subscribers can read but not modify the value.\u003c/li\u003e\n\u003cli\u003eCommonly used in ViewModels to hold the UI state and expose it to the UI layer, such as with Android‚Äôs Jetpack Compose or LiveData replacements. Ideal for cases where a single source of truth (the current state) needs to be shared with multiple consumers, ensuring all consumers always have the most recent data.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHomeViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val _textStateFlow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableStateFlow(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val stateFlow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e_textStateFlow.\u003cspan style=\"color:#a6e22e\"\u003easStateFlow\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003etriggerStateFlow\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _textStateFlow.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;State flow\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Collecting StateFlow in Activity/Fragment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHomeFragment\u003c/span\u003e : Fragment() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val viewModel: HomeViewModel by \u003cspan style=\"color:#a6e22e\"\u003eviewModels\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonViewCreated\u003c/span\u003e(view: View, savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonViewCreated\u003c/span\u003e(view, savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elifecycleScope.\u003cspan style=\"color:#a6e22e\"\u003elaunchWhenStarted\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Triggers the flow and starts listening for values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// collectLatest() is a higher-order function in Kotlin\u0026#39;s Flow API \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// that allows you to collect emitted values from a Flow and perform \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// a transformation on the most recent value only. It is similar to \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// collect(), which is used to collect all emitted values, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// but collectLatest only processes the latest value emitted and \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// ignores any previous values that have not yet been processed.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    viewModel.\u003cspan style=\"color:#a6e22e\"\u003estateFlow\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollectLatest\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          binding.\u003cspan style=\"color:#a6e22e\"\u003estateFlowButton\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e it\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Collecting StateFlow in Compose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Compose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eHomeScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// Compose provides the collectAsStateWithLifecycle function, which \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// collects values from a flow and gives the latest value to be used \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// wherever needed. When a new flow value is emitted, we get the updated \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// value, and re-composition takes place to update the state of the value.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// It uses LifeCycle.State.Started by default to start collecting values \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// when the lifecycle is in the specified state and stops when it falls \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// below it.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  val someFlow by viewModel.\u003cspan style=\"color:#a6e22e\"\u003eflow\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollectAsStateWithLifecycle\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eSharedFlow is a general-purpose hot flow that can emit events or shared data to multiple subscribers.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eUnlike StateFlow, SharedFlow is highly configurable, allowing you to control the number of past emissions that new subscribers will receive (replay) and set a buffer to handle emissions when there are no active collectors.\u003c/li\u003e\n\u003cli\u003eSharedFlow does not hold a single current value. Instead, it broadcasts emissions to all subscribers.\u003c/li\u003e\n\u003cli\u003eAllows you to define a buffer for values, which can prevent emissions from being lost if there are no active collectors or if collectors are slow.\u003c/li\u003e\n\u003cli\u003eBest for representing events or streams of data that do not represent a continuous state (such as notifications, one-time actions, or events that multiple subscribers might need).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"5-what-are-terminal-operators-in-flow\"\u003e5. What are Terminal operators in Flow?\u003c/h5\u003e\n\u003cp\u003eTerminal operators are operators that collect the values emitted by a flow and perform a final action on them. Terminal operators are responsible for starting the flow‚Äôs collection process, meaning that until a terminal operator is invoked, the flow remains cold and does not produce any values. Different types of terminal operators:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecollect: is used to receive each emitted value from the flow and perform a specified action on it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eflowOf(1, 2, 3).\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Received: $value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003etoList collects all emitted values and stores them in a List, returning the list when the flow completes. Useful when you want to gather all items from a flow into a list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval resultList \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 3).\u003cspan style=\"color:#a6e22e\"\u003etoList\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(resultList) \u003cspan style=\"color:#75715e\"\u003e// Output: [1, 2, 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003etoSet collects all emitted values into a Set, eliminating duplicates, and returns the set when the flow completes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval resultSet \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 2, 3).\u003cspan style=\"color:#a6e22e\"\u003etoSet\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(resultSet) \u003cspan style=\"color:#75715e\"\u003e// Output: [1, 2, 3]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003efirst returns the first value emitted by the flow and then immediately cancels further collection. firstOrNull is similar but returns null if the flow is empty.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval firstValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 3).\u003cspan style=\"color:#a6e22e\"\u003efirst\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(firstValue) \u003cspan style=\"color:#75715e\"\u003e// Output: 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003elast collects all values and returns the last emitted value. If the flow is empty, it throws an exception. lastOrNull returns the last emitted value or null if the flow is empty.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval lastValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 3).\u003cspan style=\"color:#a6e22e\"\u003elast\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(lastValue) \u003cspan style=\"color:#75715e\"\u003e// Output: 3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003esingle expects the flow to emit exactly one value. If the flow emits more than one value, it throws an exception. singleOrNull returns null if the flow is empty, and if there‚Äôs only one item, it returns that item. It throws an exception if the flow emits more than one item.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval singleValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(42).\u003cspan style=\"color:#a6e22e\"\u003esingle\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(singleValue) \u003cspan style=\"color:#75715e\"\u003e// Output: 42\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003ereduce performs a reduction operation, accumulating values as they are emitted by the flow. This operator applies an accumulator function to combine values and returns the final accumulated result. It‚Äôs similar to fold, but reduce doesn‚Äôt take an initial value and starts with the first emitted value as the initial accumulator.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 3, 4).\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e { accumulator, value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    accumulator \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e value\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(sum) \u003cspan style=\"color:#75715e\"\u003e// Output: 10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003efold is similar to reduce, but it allows you to specify an initial value for the accumulation. This is useful if you want to start the accumulation with a specific value (e.g., an initial count or sum).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval sumWithInitial \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 3, 4).\u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e(10) { accumulator, value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    accumulator \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e value\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(sumWithInitial) \u003cspan style=\"color:#75715e\"\u003e// Output: 20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003ecount counts the number of items emitted by the flow that satisfy a given predicate and returns the count. If no predicate is provided, it counts all items emitted.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 3, 4).\u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e { it \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e 2 \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 0 }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(count) \u003cspan style=\"color:#75715e\"\u003e// Output: 2 (counts 2 and 4)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"6-what-does-the-launchin-keyword-do\"\u003e6. What does the launchIn keyword do?\u003c/h5\u003e\n\u003cp\u003elaunchIn collects the flow within a specific coroutine scope without blocking the calling coroutine. It is often used when working with hot flows and when you want to start collecting in a different coroutine scope. Unlike other terminal operators, launchIn doesn‚Äôt wait for the flow to complete but runs it in a separate coroutine.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval scope \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CoroutineScope(Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eDefault\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eflowOf(1, 2, 3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003eonEach\u003c/span\u003e { println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Received: $it\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003elaunchIn\u003c/span\u003e(scope)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"7-what-is-the-difference-between-statein-and-sharein\"\u003e7. What is the difference between StateIn and ShareIn?\u003c/h5\u003e\n\u003cp\u003estateIn and shareIn are operators used to convert a Flow into a hot flow that can be shared among multiple collectors. Both are commonly used for transforming cold flows into hot flows that keep data in memory and emit it to multiple subscribers.\u003c/p\u003e\n\u003cp\u003eThe stateIn operator converts a cold Flow into a StateFlow, which is a hot flow that retains the latest emitted value and always has a single current state.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhen a new collector starts collecting, it immediately receives the latest value held in StateFlow, even if it started after that value was emitted.\u003c/li\u003e\n\u003cli\u003eSince StateFlow must always have a value, stateIn requires an initial value that will be emitted until the flow starts producing data.\u003c/li\u003e\n\u003cli\u003eStateFlow always retains the latest emitted value, making it ideal for state management where you need to hold a \u0026ldquo;single source of truth\u0026rdquo; that represents the current state.\nNew collectors receive the latest value immediately upon subscription, even if they subscribe after the value was emitted.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003esealed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUiState\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    object Loading : UiState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    data \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSuccess\u003c/span\u003e(val users: List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e) : UiState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    data \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e(val message: String) : UiState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Simulate a repository flow that fetches users\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val userFlow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(UiState.\u003cspan style=\"color:#a6e22e\"\u003eLoading\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(2000) \u003cspan style=\"color:#75715e\"\u003e// Simulate network delay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(UiState.\u003cspan style=\"color:#a6e22e\"\u003eSuccess\u003c/span\u003e(listOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Alice\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Charlie\u0026#34;\u003c/span\u003e))) \u003cspan style=\"color:#75715e\"\u003e// Simulated data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Convert the userFlow to StateFlow using stateIn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val uiState: StateFlow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUiState\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e userFlow\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .\u003cspan style=\"color:#a6e22e\"\u003estateIn\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            scope \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModelScope,                \u003cspan style=\"color:#75715e\"\u003e// Use viewModelScope to manage lifecycle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            started \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e SharingStarted.\u003cspan style=\"color:#a6e22e\"\u003eWhileSubscribed\u003c/span\u003e(5000), \u003cspan style=\"color:#75715e\"\u003e// Start when UI subscribes and stop when inactive\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            initialValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e UiState.\u003cspan style=\"color:#a6e22e\"\u003eLoading\u003c/span\u003e         \u003cspan style=\"color:#75715e\"\u003e// Initial state while loading data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserFragment\u003c/span\u003e : Fragment(R.\u003cspan style=\"color:#a6e22e\"\u003elayout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efragment_user\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val viewModel: UserViewModel by \u003cspan style=\"color:#a6e22e\"\u003eviewModels\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonViewCreated\u003c/span\u003e(view: View, savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonViewCreated\u003c/span\u003e(view, savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val textView \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e view.\u003cspan style=\"color:#a6e22e\"\u003efindViewById\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eTextView\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(R.\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etextView\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Observe the uiState from the ViewModel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewLifecycleOwner.\u003cspan style=\"color:#a6e22e\"\u003elifecycleScope\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elaunchWhenStarted\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            viewModel.\u003cspan style=\"color:#a6e22e\"\u003euiState\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { uiState \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                when (uiState) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    is UiState.\u003cspan style=\"color:#a6e22e\"\u003eLoading\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e textView.\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Loading...\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    is UiState.\u003cspan style=\"color:#a6e22e\"\u003eSuccess\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e textView.\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Users: ${uiState.users.joinToString()}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    is UiState.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e textView.\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Error: ${uiState.message}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe shareIn operator converts a cold Flow into a SharedFlow, which is a hot flow that can replay a specified number of past values to new collectors.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUnlike stateIn, shareIn allows you to configure how many values to replay (if any) and provides more flexibility for managing event-driven flows.\u003c/li\u003e\n\u003cli\u003eSince SharedFlow doesn‚Äôt retain a single latest value by default, it‚Äôs better for event-based data streams where the most recent state isn‚Äôt needed.\u003c/li\u003e\n\u003cli\u003eSharedFlow can be configured to replay a certain number of past values to new collectors, making it suitable for event streams or data that needs to be replayed partially.\u003c/li\u003e\n\u003cli\u003eUnlike stateIn, shareIn doesn‚Äôt require an initial value, as it‚Äôs used for handling events rather than holding state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNotificationViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Simulate a stream of notifications from a repository\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val notificationFlow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e notificationCount \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Notification #$notificationCount\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            notificationCount\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            delay(2000) \u003cspan style=\"color:#75715e\"\u003e// Emit a notification every 2 seconds\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Convert the notification flow to a SharedFlow with a replay of the last 2 notifications\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val sharedNotifications: SharedFlow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e notificationFlow\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .\u003cspan style=\"color:#a6e22e\"\u003eshareIn\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            scope \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModelScope,                         \u003cspan style=\"color:#75715e\"\u003e// Start and manage in viewModelScope\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            started \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e SharingStarted.\u003cspan style=\"color:#a6e22e\"\u003eWhileSubscribed\u003c/span\u003e(5000), \u003cspan style=\"color:#75715e\"\u003e// Keep active while subscribed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            replay \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2                                      \u003cspan style=\"color:#75715e\"\u003e// Replay the last 2 notifications to new subscribers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNotificationFragment\u003c/span\u003e : Fragment(R.\u003cspan style=\"color:#a6e22e\"\u003elayout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efragment_notification\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val viewModel: NotificationViewModel by \u003cspan style=\"color:#a6e22e\"\u003eviewModels\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonViewCreated\u003c/span\u003e(view: View, savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonViewCreated\u003c/span\u003e(view, savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val textView \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e view.\u003cspan style=\"color:#a6e22e\"\u003efindViewById\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eTextView\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(R.\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003enotificationTextView\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Collect notifications from sharedNotifications\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewLifecycleOwner.\u003cspan style=\"color:#a6e22e\"\u003elifecycleScope\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elaunchWhenStarted\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            viewModel.\u003cspan style=\"color:#a6e22e\"\u003esharedNotifications\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { notification \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                textView.\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e notification\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"8-how-can-we-collect-flows-in-jetpack-compose\"\u003e8. How can we collect Flows in Jetpack Compose?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eUsing collectAsState with StateFlow: The collectAsState extension function is ideal for collecting a StateFlow in a Jetpack Compose function. It converts the StateFlow into a Compose State, which automatically re-composes the UI when the flow emits a new value.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Suppose we have a ViewModel with a StateFlow representing a UI state.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val _uiState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableStateFlow(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val uiState: StateFlow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e _uiState\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyScreen\u003c/span\u003e(viewModel: MyViewModel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModel()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Collect the StateFlow as State in Compose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val uiState by viewModel.\u003cspan style=\"color:#a6e22e\"\u003euiState\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollectAsState\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Use the uiState to display the data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e uiState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eUsing collectAsStateWithLifecycle for Lifecycle-Aware Collection: In scenarios where the Flow may emit values while the composable is not in a visible lifecycle state (such as paused or stopped), it‚Äôs recommended to use collectAsStateWithLifecycle, which is lifecycle-aware and only collects when the composable is in an active lifecycle state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Suppose we have a ViewModel with a StateFlow representing a UI state.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val _uiState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableStateFlow(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val uiState: StateFlow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e _uiState\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eMyScreen\u003c/span\u003e(viewModel: MyViewModel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModel()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Collect StateFlow in a lifecycle-aware manner\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val uiState by viewModel.\u003cspan style=\"color:#a6e22e\"\u003euiState\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollectAsStateWithLifecycle\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e uiState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eUsing LaunchedEffect with collect for Event Flows: If you want to collect Flow events that are not StateFlow or that represent one-time events (such as navigation events or showing a toast), you can use LaunchedEffect along with collect. This method allows you to collect Flow values inside a composable without re-composing on every emission.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEventViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val events \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableSharedFlow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// SharedFlow for one-time events\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003esendEvent\u003c/span\u003e(message: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewModelScope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            events.\u003cspan style=\"color:#a6e22e\"\u003eemit\u003c/span\u003e(message)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eEventScreen\u003c/span\u003e(viewModel: EventViewModel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e viewModel()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val coroutineScope \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e rememberCoroutineScope()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Collect events from SharedFlow using LaunchedEffect\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    LaunchedEffect(Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewModel.\u003cspan style=\"color:#a6e22e\"\u003eevents\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollectLatest\u003c/span\u003e { message \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// Handle one-time events, such as showing a toast or navigating\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Received event: $message\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// UI content\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// You could call `viewModel.sendEvent(\u0026#34;Event message\u0026#34;)` from a button click or other UI action\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"9-how-can-we-handle-backpressure-when-using-flows\"\u003e9. How can we handle backpressure when using flows?\u003c/h5\u003e\n\u003cp\u003eBackpressure occurs when the producer emits items at a higher rate than the consumer can process, leading to potential issues like memory overflow or delayed processing. Kotlin‚Äôs Flow API provides several operators and strategies for handling backpressure effectively:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe buffer operator allows you to add a buffer to a flow, enabling the producer to emit items without waiting for each item to be processed by the consumer. This helps smooth out the differences between the production and consumption rates.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i in 1..\u003cspan style=\"color:#a6e22e\"\u003e5\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            delay(100) \u003cspan style=\"color:#75715e\"\u003e// Simulate fast producer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            emit(i)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Emitted: $i\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003ebuffer\u003c/span\u003e(capacity \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2) \u003cspan style=\"color:#75715e\"\u003e// Buffer with capacity of 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(300) \u003cspan style=\"color:#75715e\"\u003e// Simulate slower consumer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Collected: $value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003econflate: If only the latest values matter, we can make use of the conflate operator: this keeps only the most recent value, dropping any previous unprocessed values. This reduces the memory usage by discarding intermediate emissions when the consumer is slower.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i in 1..\u003cspan style=\"color:#a6e22e\"\u003e5\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(100) \u003cspan style=\"color:#75715e\"\u003e// Fast producer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(i)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Emitted: $i\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#a6e22e\"\u003econflate\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(300) \u003cspan style=\"color:#75715e\"\u003e// Slow consumer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Collected: $value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003ezip and combine: These operators merge emissions from multiple flows. zip matches values pairwise, while combine merges the latest values from each flow.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  val fastFlow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i in 1..\u003cspan style=\"color:#a6e22e\"\u003e5\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          delay(100) \u003cspan style=\"color:#75715e\"\u003e// Fast producer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Fast $i\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  val slowFlow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i in 1..\u003cspan style=\"color:#a6e22e\"\u003e5\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          delay(300) \u003cspan style=\"color:#75715e\"\u003e// Slow producer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Slow $i\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Using zip to slow down fastFlow to match slowFlow\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  fastFlow.\u003cspan style=\"color:#a6e22e\"\u003ezip\u003c/span\u003e(slowFlow) { fast, slow \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$fast with $slow\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { result \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      println(result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"10-how-can-we-cancel-a-flow\"\u003e10. How can we cancel a flow?\u003c/h5\u003e\n\u003cp\u003eFlow operates under the structured concurrency model of coroutines. So cancelling a Flow is generally done by cancelling the coroutine that is collecting the flow. Since flows are cold and only emit values when they are actively collected, cancelling the coroutine effectively stops the flow collection and cancels any ongoing emissions.\u003c/p\u003e\n\u003ch5 id=\"11-what-does-the-flowon-keyword-do\"\u003e11. What does the flowOn keyword do?\u003c/h5\u003e\n\u003cp\u003eThe flowOn operator is used to change the coroutine context of the upstream operations in a flow. This is particularly useful when you need to specify a different thread or dispatcher for specific parts of a flow pipeline, without affecting the downstream operations (like collection).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.Dispatchers\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.flow.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.runBlocking\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003egetDatabaseData\u003c/span\u003e(): Flow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInt\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Fetching data from database on thread: ${Thread.currentThread().name}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i in 1..\u003cspan style=\"color:#a6e22e\"\u003e5\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(100) \u003cspan style=\"color:#75715e\"\u003e// Simulating database delay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(i)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}.\u003cspan style=\"color:#a6e22e\"\u003eflowOn\u003c/span\u003e(Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eIO\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// Use IO dispatcher for database access\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    getDatabaseData()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e { it \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e 2 } \u003cspan style=\"color:#75715e\"\u003e// Processing on IO thread\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Collected $value on thread: ${Thread.currentThread().name}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"12-how-can-we-combine-multiple-flows\"\u003e12. How can we combine multiple flows?\u003c/h5\u003e\n\u003cp\u003eCommon operators to combine multiple flows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe zip operator combines two flows into one by pairing each emission from one flow with the corresponding emission from the other flow. The resulting flow emits values as pairs or as a transformation based on a provided lambda function. The combination stops as soon as one of the flows completes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Zip: Output \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1A, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2B, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3C\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val flow1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val flow2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;D\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    flow1.\u003cspan style=\"color:#a6e22e\"\u003ezip\u003c/span\u003e(flow2) { number, letter \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$number$letter\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { result \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eThe combine operator takes the latest value from each flow and emits a new value whenever any of the flows emit a value. This is useful for cases where you want to react to the latest values from multiple flows.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Output: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3C\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val flow1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(100)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(100)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val flow2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(50)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(150)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(50)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    flow1.\u003cspan style=\"color:#a6e22e\"\u003ecombine\u003c/span\u003e(flow2) { number, letter \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$number$letter\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { result \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eThe flattenMerge operator collects from multiple flows concurrently and merges their emissions into a single flow. This is useful when you want to start collecting from multiple flows simultaneously without waiting for one to complete before starting the next.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval flow1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(100)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval flow2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(50)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval flow3 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(150)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    listOf(flow1, flow2, flow3).\u003cspan style=\"color:#a6e22e\"\u003easFlow\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eflattenMerge\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(value) \u003cspan style=\"color:#75715e\"\u003e// Output: B, A, C\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eThe merge operator combines multiple flows by interleaving their emissions without pairing them. It collects from each flow as they emit and emits each value in the order it‚Äôs produced.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval flow1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(100)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval flow2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(50)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(50)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Output\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    merge(flow1, flow2).\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(value)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eflatMapConcat: Concatenates flows sequentially, waiting for each inner flow to complete before moving to the next.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval numbers \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003egetStringFlow\u003c/span\u003e(number: Int) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$number: A\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(100)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$number: B\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Output:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1: A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1: B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2: A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2: B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3: A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3: B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    numbers.\u003cspan style=\"color:#a6e22e\"\u003eflatMapConcat\u003c/span\u003e { number \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        getStringFlow(number)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { result \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eflatMapMerge: Collects from multiple flows concurrently, merging their emissions as they come.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval numbers \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flowOf(1, 2, 3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003egetStringFlow\u003c/span\u003e(number: Int) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$number: A\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(100)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    emit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$number: B\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Output:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1: A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2: A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3: A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1: B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2: B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3: B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    numbers.\u003cspan style=\"color:#a6e22e\"\u003eflatMapMerge\u003c/span\u003e { number \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        getStringFlow(number)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { result \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eflatMapLatest: Cancels the previous flow whenever a new flow is emitted, only collecting the latest emitted flow.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Output:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1: A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2: A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3: A\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3: B\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    numbers.\u003cspan style=\"color:#a6e22e\"\u003eflatMapLatest\u003c/span\u003e { number \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        getStringFlow(number)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }.\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { result \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"13-what-are-the-different-ways-to-handle-exception-in-flows\"\u003e13. What are the different ways to handle exception in flows?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003ecatch\u003c/code\u003e operator is the primary way to handle exceptions in flows. It catches exceptions thrown by the upstream flow and allows you to handle or emit alternative values.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eonCompletion\u003c/code\u003e operator is a terminal operation that is triggered when the flow completes, either normally or exceptionally. It allows you to perform cleanup actions or log when a flow has finished, regardless of whether it completed successfully or due to an exception.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e RuntimeException(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Flow exception\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003eonCompletion\u003c/span\u003e { cause \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (cause \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Flow completed exceptionally: ${cause.message}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Flow completed successfully\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003ecatch\u003c/span\u003e { e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Caught exception: ${e.message}\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e println(value) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eWe can handle exceptions more granularly by using emitCatching (a function you implement to wrap emit). This approach allows us to catch exceptions within specific parts of the flow and handle them without breaking the flow.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003ecustomFlow\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e RuntimeException(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Custom error\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (e: Exception) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Caught exception in emit: ${e.message}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    customFlow().\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Collected: $value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"14-how-does-the-retry-operator-work-with-flow\"\u003e14. How does the retry operator work with Flow?\u003c/h5\u003e\n\u003cp\u003eThe retry operator allows you to retry the flow when an exception occurs, making it useful for transient errors, such as network issues. You can specify the number of retry attempts and use a predicate to determine which exceptions should trigger a retry.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        emit(1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e RuntimeException(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Network error\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003eretry\u003c/span\u003e(retries \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 3) { e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Retrying due to: ${e.message}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        e is RuntimeException\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003ecatch\u003c/span\u003e { e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Caught exception after retries: ${e.message}\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e println(value) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"15-how-do-you-implement-a-debounce-mechanism-for-user-input-using-flows\"\u003e15. How do you implement a debounce mechanism for user input using flows?\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSearchViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Flow that holds the latest user input\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val _searchQuery \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableStateFlow(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val searchQuery: StateFlow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e _searchQuery\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Flow that emits debounced search results\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val searchResults: Flow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e searchQuery\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .\u003cspan style=\"color:#a6e22e\"\u003edebounce\u003c/span\u003e(300) \u003cspan style=\"color:#75715e\"\u003e// Wait for 300 ms of inactivity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .\u003cspan style=\"color:#a6e22e\"\u003edistinctUntilChanged\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// Only proceed if the query has changed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .\u003cspan style=\"color:#a6e22e\"\u003eflatMapLatest\u003c/span\u003e { query \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            performSearch(query)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .\u003cspan style=\"color:#a6e22e\"\u003ecatch\u003c/span\u003e { emit(emptyList()) } \u003cspan style=\"color:#75715e\"\u003e// Handle any errors\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Update the search query\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003eupdateSearchQuery\u003c/span\u003e(query: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _searchQuery.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e query\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Simulated search function\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e fun \u003cspan style=\"color:#a6e22e\"\u003eperformSearch\u003c/span\u003e(query: String): Flow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e flow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (query.\u003cspan style=\"color:#a6e22e\"\u003eisBlank\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            emit(emptyList())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            delay(500) \u003cspan style=\"color:#75715e\"\u003e// Simulate network delay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            emit(listOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Result 1 for \u0026#39;$query\u0026#39;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Result 2 for \u0026#39;$query\u0026#39;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Result 3 for \u0026#39;$query\u0026#39;\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Composable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003eSearchScreen\u003c/span\u003e(viewModel: SearchViewModel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e hiltViewModel()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val searchQuery by viewModel.\u003cspan style=\"color:#a6e22e\"\u003esearchQuery\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollectAsState\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Observes the debounced search results from viewModel.searchResults, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// updating the UI only after the debounce delay.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val searchResults by viewModel.\u003cspan style=\"color:#a6e22e\"\u003esearchResults\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecollectAsState\u003c/span\u003e(initial \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e emptyList())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Column(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003efillMaxSize\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003epadding\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        TextField(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e searchQuery,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            onValueChange \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { viewModel.\u003cspan style=\"color:#a6e22e\"\u003eupdateSearchQuery\u003c/span\u003e(it) },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003efillMaxWidth\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            label \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Search\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Spacer(modifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Modifier.\u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e(16.\u003cspan style=\"color:#a6e22e\"\u003edp\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Results:\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        searchResults.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e { result \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"16-difference-between-livedata--flows\"\u003e16. Difference between LiveData \u0026amp; Flows.\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eLiveData\u003c/code\u003e is a Hot stream. It starts emitting data as soon as it has an active observer (typically a lifecycle-aware component like an Activity or Fragment) and continues to emit values even if there are no observers. \u003ccode\u003eFlow\u003c/code\u003e is a Cold stream. It only starts emitting data when it‚Äôs collected. Each time a Flow is collected, it starts from the beginning and behaves as if it\u0026rsquo;s \u0026ldquo;restarted.\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLiveData\u003c/code\u003e is Lifecycle-aware by default. It automatically starts and stops observing based on the lifecycle of the UI component. \u003ccode\u003eFlow\u003c/code\u003e is not lifecycle-aware by default. When using Flow in Android, you must manually manage the lifecycle (e.g., using lifecycleScope or repeatOnLifecycle).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLiveData\u003c/code\u003e is designed for use in the UI layer, especially for observing data in ViewModels. It is tightly integrated with the Android lifecycle, making it ideal for UI-bound data. \u003ccode\u003eFlow\u003c/code\u003e is a general-purpose reactive data stream that can be used throughout the application, not just in the UI layer. It‚Äôs well-suited for managing data streams in repositories, data sources, or any asynchronous data-handling logic.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLiveData\u003c/code\u003e doesn‚Äôt have built-in error handling. \u003ccode\u003eFlow\u003c/code\u003e supports built-in error handling operators like catch, retry, and retryWhen.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLiveData\u003c/code\u003e always observes on the main thread, so you don‚Äôt need to worry about threading when observing from UI components. \u003ccode\u003eFlow\u003c/code\u003e allows explicit control over threading using the flowOn operator, which lets you specify which dispatcher should be used for upstream operations.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLiveData\u003c/code\u003e doesn‚Äôt support back pressure handling natively. If data is produced faster than it‚Äôs consumed, it could lead to missed updates or performance issues. \u003ccode\u003eFlow\u003c/code\u003e has built-in back pressure handling, allowing you to use operators like buffer, conflate, collectLatest, and debounce to control the rate of data flow and avoid overwhelming the consumer.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLiveData\u003c/code\u003e requires additional handling for one-time events like navigation or showing a message. Patterns like SingleLiveEvent or EventWrapper are commonly used to avoid issues with events being re-emitted on configuration changes. \u003ccode\u003eFlow\u003c/code\u003e is more suitable for one-time events, especially with SharedFlow or StateFlow, which allow you to configure replay behavior and provide finer control over event emission and collection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLiveData to Flow\u003c/code\u003e: You can convert LiveData to Flow using the .asFlow() extension function. \u003ccode\u003eFlow to LiveData\u003c/code\u003e: You can convert Flow to LiveData using the .asLiveData() extension function, making it easy to use Flow in lifecycle-aware contexts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"17-difference-between-flows--channels\"\u003e17. Difference between Flows \u0026amp; Channels?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eFlow\u003c/code\u003e is a cold stream (starts emitting on collection), while \u003ccode\u003eChannel\u003c/code\u003e is a hot stream (emits values immediately upon being sent).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFlow\u003c/code\u003e has a single producer-consumer model, while \u003ccode\u003eChannel\u003c/code\u003e supports multiple producers and consumers, making it ideal for communication between coroutines.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFlow\u003c/code\u003e starts and stops with each collection; \u003ccode\u003eChannel\u003c/code\u003e can remain open and active until explicitly closed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFlow\u003c/code\u003e has built-in suspension to handle backpressure; \u003ccode\u003eChannel\u003c/code\u003e uses buffering to manage backpressure (e.g., Buffered, Conflated).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFlow\u003c/code\u003e has built-in error handling with operators like catch; \u003ccode\u003eChannel\u003c/code\u003e doesn‚Äôt support built-in error handling but can propagate exceptions.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFlow\u003c/code\u003e offers a rich set of operators (map, filter, combine), while \u003ccode\u003eChannel\u003c/code\u003e provides basic send and receive methods without transformations.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eChannel\u003c/code\u003e supports concurrent producers and consumers, whereas \u003ccode\u003eFlow\u003c/code\u003e is more suited for sequential processing.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFlow\u003c/code\u003e can only be collected once per collector, while a \u003ccode\u003eChannel\u003c/code\u003e allows values to be received by multiple consumers.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFlow\u003c/code\u003e is ideal for data streams, transformations, and UI updates; \u003ccode\u003eChannel\u003c/code\u003e is suited for message passing and producer-consumer patterns.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"18-example-of-unit-testing-with-flows\"\u003e18. Example of unit testing with flows\u003c/h5\u003e\n\u003cp\u003eStep 1: Define the ViewModel\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.ViewModel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.flow.Flow\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.flow.catch\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.flow.flow\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e(val id: Int, val name: String)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserRepository\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003egetUsers\u003c/span\u003e(): Flow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUser\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserViewModel\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val userRepository: UserRepository) : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Expose users flow with error handling\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val users: Flow\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUser\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e userRepository.\u003cspan style=\"color:#a6e22e\"\u003egetUsers\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .\u003cspan style=\"color:#a6e22e\"\u003ecatch\u003c/span\u003e { emit(emptyList()) } \u003cspan style=\"color:#75715e\"\u003e// Emit an empty list on error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eStep 2: Set Up Test Dependencies\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edependencies {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Testing libraries\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    testImplementation \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    testImplementation \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;app.cash.turbine:turbine:0.7.0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    testImplementation \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;org.mockito:mockito-core:4.0.0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    testImplementation \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;org.mockito.kotlin:mockito-kotlin:4.0.0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eStep 3: Test the UserViewModel using Flow and Turbine.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e app.cash.turbine.test\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.ExperimentalCoroutinesApi\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.flow.flow\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.test.runTest\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.junit.Assert.assertEquals\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.junit.Before\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.junit.Rule\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.junit.Test\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.mockito.Mockito.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.mockito.kotlin.mock\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@OptIn\u003c/span\u003e(ExperimentalCoroutinesApi::\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e UserViewModelTest {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e lateinit \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e userRepository: UserRepository\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e lateinit \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e viewModel: UserViewModel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Before\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003esetUp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        userRepository \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mock()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewModel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e UserViewModel(userRepository)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Test\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003eshould emit list of users when repository returns data\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runTest {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Arrange\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val mockUsers \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e listOf(User(1, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Alice\u0026#34;\u003c/span\u003e), User(2, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003ewhen\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e(userRepository.\u003cspan style=\"color:#a6e22e\"\u003egetUsers\u003c/span\u003e()).\u003cspan style=\"color:#a6e22e\"\u003ethenReturn\u003c/span\u003e(flow { emit(mockUsers) })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Act \u0026amp; Assert\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewModel.\u003cspan style=\"color:#a6e22e\"\u003eusers\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etest\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            assertEquals(mockUsers, awaitItem()) \u003cspan style=\"color:#75715e\"\u003e// Check that the emitted item is the expected user list\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cancelAndConsumeRemainingEvents() \u003cspan style=\"color:#75715e\"\u003e// Ensure the flow is cancelled after checking\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Test\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003eshould emit empty list when repository \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e an error\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runTest {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Arrange\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003ewhen\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e(userRepository.\u003cspan style=\"color:#a6e22e\"\u003egetUsers\u003c/span\u003e()).\u003cspan style=\"color:#a6e22e\"\u003ethenReturn\u003c/span\u003e(flow { \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e RuntimeException(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Network error\u0026#34;\u003c/span\u003e) })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Act \u0026amp; Assert\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewModel.\u003cspan style=\"color:#a6e22e\"\u003eusers\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etest\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            assertEquals(emptyList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUser\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(), awaitItem()) \u003cspan style=\"color:#75715e\"\u003e// Check that an empty list is emitted on error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cancelAndConsumeRemainingEvents()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"thanks-for-reading\"\u003eThanks for reading!\u003c/h5\u003e\n\u003cp\u003eHope you find this useful. This is just a list of questions I personally found useful in interviews. This list is by no means exhaustive. Let me know your thoughts in the responses. Happy coding!\u003c/p\u003e\n","description":"Android Interview Series 2024 ‚Äî Part 6","image":"https://miro.medium.com/v2/resize:fit:3840/format:webp/0*ovGMYgU7aA9In-oV.jpeg","permalink":"https://whywhom.github.io/blogs/android-interview-series-2024-part-6-kotlin-flows/","title":"Kotlin Flows"},{"content":"\u003cp\u003eHere is the original article:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://proandroiddev.com/android-interview-series-2024-part-5-kotlin-coroutines-3dd1ae81c721\"\u003eüîó Android Interview Series 2024 ‚Äî Part 5 (Kotlin Coroutines)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis article is published on ProAndroidDev and covers essential Android interview topics for 2024. üöÄ\u003c/p\u003e\n\u003ch5 id=\"1-what-are-coroutines\"\u003e1. What are coroutines?\u003c/h5\u003e\n\u003cp\u003eCoroutine stands for cooperating functions. They provide a more efficient and readable way to handle asynchronous tasks. It is similar to a thread, in that it takes a block of code to run that works concurrently with the rest of the code. However, a coroutine is not bound to any particular thread. It may suspend its execution in one thread and resume in another one. Coroutines were launched to Kotlin in version 1.3.\u003c/p\u003e\n\u003ch5 id=\"2-how-do-coroutines-differ-from-traditional-threading\"\u003e2. How do coroutines differ from traditional threading?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eCoroutines are lightweight ‚Äî We can run many coroutines on a single thread due to its support for suspension. Here suspension means that you can execute some instructions, then stop the coroutine in between the execution and continue when you wish to. Suspending saves memory over blocking while supporting many concurrent operations.\u003c/li\u003e\n\u003cli\u003eCoroutines have fewer memory leaks ‚Äî coroutines follow the structured concurrency principle, which means that each coroutine should be launched inside a specific context with a determinate life-time. Structured concurrency is an approach where the lifetime of coroutines is tied to a specific scope, ensuring that all launched coroutines within that scope complete before the scope itself completes. This helps avoid coroutine leaks and simplifies resource management.\u003c/li\u003e\n\u003cli\u003eOn android, coroutines offer Main-safety ‚Äî coroutines help to manage long-running tasks that might otherwise block the main thread and cause your app to become unresponsive. Main-safety allows you to ensure that any suspend function can be called from the main thread.\u003c/li\u003e\n\u003cli\u003eCoroutines offer built-in cancellation support ‚Äî one of the most important mechanisms of coroutines is cancellation because, on Android, nearly every coroutine is associated with some view, and if this view is destroyed, its coroutines are not needed, so they should be cancelled. This is a crucial capability that used to require a lot of effort from developers, but coroutines offer a simple and safe cancellation mechanism.\u003c/li\u003e\n\u003cli\u003eCoroutines are cooperatively multitasked ‚Äî this means that coroutines are concurrency primitives that cooperatively execute a set of instructions and that the operating system doesn‚Äôt control the scheduling of tasks or processes performed by coroutines. Instead, it relies on the program, and platform that runs them to do that. As such, coroutines can yield control back to the scheduler to allow other threads to run. Scheduler from OS is responsible to let these threads do their job and if need be can also pause them so that the same resources can be used by other threads.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"3-what-is-structured-concurrency\"\u003e3. What is structured concurrency?\u003c/h5\u003e\n\u003cp\u003eStructured concurrency is a design principle where the lifetime of coroutines is tied to a specific scope, ensuring that all launched coroutines within that scope complete before the scope itself completes. It ties the lifecycle of coroutines to the scope they are launched in, ensuring they are properly cancelled when the scope is no longer active. Key concepts of structured concurrency include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHierarchical Structure: Coroutines launched in a scope form a parent-child relationship, where the parent coroutine is responsible for managing the lifecycle of its children.\u003c/li\u003e\n\u003cli\u003eAutomatic Cancellation: With structured concurrency, if a coroutine within a scope fails, other coroutines in the same scope are canceled automatically, preventing incomplete or inconsistent tasks.\u003c/li\u003e\n\u003cli\u003eScope-Aware Exception Handling: Exceptions in child coroutines can be propagated to the parent, ensuring that the entire operation fails fast if any part of it fails.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"4-what-are-suspend-functions\"\u003e4. What are suspend functions?\u003c/h5\u003e\n\u003cp\u003eSuspending functions are those functions that can be paused and then continued later. While the suspend function is executing, the coroutine releases the thread on which it was running and allows other coroutines to access that thread (because coroutines are cooperative).\u003c/p\u003e\n\u003cp\u003eThe syntax of the suspended function is the same as that of the normal function but with the addition of the suspend keyword. Suspend functions are only allowed to be called from a coroutine or another suspend function.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA suspend function is a special type of function in Kotlin that can be paused (suspended) and resumed later without blocking the main thread. It allows writing asynchronous, non-blocking code in a sequential manner.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esuspend fun \u003cspan style=\"color:#a6e22e\"\u003efetchUserData\u003c/span\u003e(): User {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val response \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e apiService.\u003cspan style=\"color:#a6e22e\"\u003egetUser\u003c/span\u003e()  \u003cspan style=\"color:#75715e\"\u003e// Assume this is a suspending API call\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e response\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"5-how-would-you-define-a-coroutine-scope\"\u003e5. How would you define a coroutine scope?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eA coroutine scope defines the lifecycle/lifetime of a coroutine. It is responsible for controlling the lifecycle of a group of coroutines and their context.\u003c/li\u003e\n\u003cli\u003eEach coroutine scope has a context that can include a dispatcher (like Dispatchers.IO for background work, Dispatchers.Main for UI updates, etc.) and other configuration settings. Coroutines launched within the scope inherit this context, making it easy to handle the specifics of threading or exception handling.\u003c/li\u003e\n\u003cli\u003eCoroutine scopes help ensure that coroutines are canceled if they‚Äôre no longer needed. For instance, in an Android app, the lifecycle of a coroutine scope is often tied to a component like a ViewModel or Activity. When the component is destroyed, all coroutines within its scope are canceled to avoid memory leaks or unnecessary background work.\u003c/li\u003e\n\u003cli\u003eBy grouping related coroutines under a single scope, you can manage tasks as a group. For example, in an API call with several concurrent requests, you might want to cancel all requests if one fails. The coroutine scope helps to implement this pattern effectively.\u003c/li\u003e\n\u003cli\u003eA coroutine scope allows you to catch exceptions across all coroutines within it, ensuring consistent error handling without needing to manage each coroutine separately.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHow to Define a Coroutine Scope?\u003c/p\u003e\n\u003cp\u003eA coroutine scope is typically defined using CoroutineScope or specific lifecycle-aware scopes like:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1Ô∏è‚É£ GlobalScope ‚Äì Unbound, not recommended for structured concurrency.\u003c/li\u003e\n\u003cli\u003e2Ô∏è‚É£ runBlocking ‚Äì Blocks the current thread (used in main functions or testing).\u003c/li\u003e\n\u003cli\u003e3Ô∏è‚É£ CoroutineScope(Dispatchers.IO/Main/etc.) ‚Äì Custom scope for background tasks.\u003c/li\u003e\n\u003cli\u003e4Ô∏è‚É£ viewModelScope (Android) ‚Äì Automatically cancels when ViewModel is cleared.\u003c/li\u003e\n\u003cli\u003e5Ô∏è‚É£ lifecycleScope (Android) ‚Äì Tied to the Lifecycle of an Activity/Fragment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"6-what-are-the-3-primary-coroutine-scopes\"\u003e6. What are the 3 primary coroutine scopes?\u003c/h5\u003e\n\u003cp\u003eIn Kotlin, there are three primary coroutine scopes commonly used, especially in Android development, to manage the lifecycle of coroutines:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGlobalScope: is a predefined coroutine scope that lives for the duration of the application\u0026rsquo;s lifetime. Coroutines launched in GlobalScope are not tied to any specific lifecycle or component. Therefore, they are \u003cstrong\u003enever canceled automatically\u003c/strong\u003e and continue running as long as the app is alive. Since it lacks \u003cstrong\u003estructured concurrency\u003c/strong\u003e, it\u0026rsquo;s often discouraged for most use cases, as it can lead to memory leaks or wasted resources if not managed carefully.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGlobalScope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Do some long-running work\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eCoroutineScope: is a general-purpose coroutine scope that you can define with a specific lifecycle and context. It‚Äôs commonly used to create custom coroutine scopes, especially in classes that need to control coroutine lifecycles explicitly (e.g., repositories, service classes). With CoroutineScope, you can specify a Job or dispatcher, making it more flexible and adaptable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyRepository\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val scope \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CoroutineScope(Job() \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eIO\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003efetchData\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        scope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// Coroutine runs on Dispatchers.IO\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003eclear\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        scope.\u003cspan style=\"color:#a6e22e\"\u003ecancel\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// Cancels all coroutines launched in this scope\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eviewModelScope, lifecycleScope\u003c/code\u003e: These scopes are specific to Android and simplify coroutine management by tying coroutine lifecycles to Android components. They automatically cancel coroutines based on the lifecycle of the component, reducing the need for explicit cleanup.\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eviewModelScope\u003c/code\u003e: Tied to a ViewModel‚Äôs lifecycle, coroutines launched in this scope are canceled automatically when the ViewModel is cleared.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elifecycleScope\u003c/code\u003e: Available for Activity or Fragment, it cancels coroutines when the component\u0026rsquo;s lifecycle reaches a specific state (e.g., onDestroy).\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"7-what-are-coroutine-builders\"\u003e7. What are coroutine builders?\u003c/h5\u003e\n\u003cp\u003eCoroutine builders are functions for initialising or creating new coroutines. They simplify the process of launching coroutines and help define the structure of concurrent tasks. Each builder serves a different purpose, depending on how you want the coroutine to behave.\u003c/p\u003e\n\u003ch5 id=\"8-what-are-the-different-coroutine-builders\"\u003e8. What are the different coroutine builders?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003elaunch: is the most common coroutine builder, that launches a new coroutine concurrently, i.e., without blocking the current thread. It‚Äôs typically used for fire-and-forget tasks where you don‚Äôt need a return value. launch creates a Job that represents the coroutine and can be used to manage its lifecycle (e.g., cancel it). launch is used a lot on ViewModels to create a bridge from non-suspending code to suspending code.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elaunch {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(1000L)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e)    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003easync: like the launch function, it is also used to launch a new coroutine; the only difference is that it returns a deferred instead of a Job. The deferred is a non-blocking future that promises to deliver the result later. The running coroutine is cancelled when the resulting deferred is cancelled. You can call await() on this Deferred to get the result once the coroutine completes. It‚Äôs commonly used for parallel execution of tasks when you need to retrieve and combine results.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval deferred1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e async { fetchDataFromNetwork() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval deferred2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e async { fetchDataFromDatabase() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Wait for both results\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e deferred1.\u003cspan style=\"color:#a6e22e\"\u003eawait\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e deferred2.\u003cspan style=\"color:#a6e22e\"\u003eawait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003erunBlocking: runs a new coroutine and blocks the current thread until its completion. In other words, the thread that runs in it gets blocked for the given duration until all the code blocks inside the brackets of run-blocking complete their execution. It‚Äôs primarily used in unit tests or in main functions where you need to call suspending functions but don‚Äôt have a coroutine context. It should be used sparingly in Android development since it blocks the main thread, potentially causing UI freezes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Calls a suspending function and waits for it to complete\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fetchData()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003ewithContext: It is a suspending function that is used to switch coroutine context within a coroutine. It suspends the current coroutine, switches to the specified context, and resumes execution in the new context. withContext is synchronous within a coroutine and returns the result directly, making it useful for switching between threads seamlessly within a coroutine. You‚Äôll be using it most of the time to switch the dispatcher the coroutine will be executed on.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e withContext(Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eIO\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fetchDataFromNetwork()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Now you can use the result on the main thread\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etextView.\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e result\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"9-what-is-the-concept-of-coroutinecontext\"\u003e9. What is the concept of CoroutineContext?\u003c/h5\u003e\n\u003cp\u003eCoroutine Context is a set of elements that define the behaviour and characteristics of a coroutine. It includes things like dispatchers, jobs, exception handlers, and coroutine name. The context is used to determine how and where the coroutine will be executed.\u003c/p\u003e\n\u003ch5 id=\"10-how-would-you-define-coroutine-dispatcher\"\u003e10. How would you define Coroutine Dispatcher?\u003c/h5\u003e\n\u003cp\u003eA Coroutine Dispatcher is responsible for determining the thread or threads on which the coroutine will be executed. It controls where the coroutine‚Äôs code executes. Kotlin provides several standard dispatchers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDispatchers.Main: Runs the coroutine on the main (UI) thread, useful for updating UI elements.\u003c/li\u003e\n\u003cli\u003eDispatchers.IO: IO Dispatchers initiate the coroutine on the IO thread. This one is suitable for I/O operations that can block the execution thread, such as reading or writing files, making database queries, or making network requests.\u003c/li\u003e\n\u003cli\u003eDispatchers.Default: The default dispatcher is used when no other dispatcher is explicitly specified in the scope. It takes advantage of a pool of shared background threads. This is a good option for compute-intensive coroutines that need CPU resources.\u003c/li\u003e\n\u003cli\u003eDispatchers.Unconfined: Starts the coroutine in the current thread but does not confine it to any specific thread afterward. It is appropriate for coroutines that do not consume CPU or update shared data confined to a specific thread.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    launch { \u003cspan style=\"color:#75715e\"\u003e// context of the parent, main runBlocking coroutine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;main runBlocking      : I\u0026#39;m working in thread ${Thread.currentThread().name}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    launch(Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eUnconfined\u003c/span\u003e) { \u003cspan style=\"color:#75715e\"\u003e// not confined -- will work with main thread\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Unconfined            : I\u0026#39;m working in thread ${Thread.currentThread().name}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    launch(Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eDefault\u003c/span\u003e) { \u003cspan style=\"color:#75715e\"\u003e// will get dispatched to DefaultDispatcher \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Default               : I\u0026#39;m working in thread ${Thread.currentThread().name}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    launch(newSingleThreadContext(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;MyOwnThread\u0026#34;\u003c/span\u003e)) { \u003cspan style=\"color:#75715e\"\u003e// will get its own new thread\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;newSingleThreadContext: I\u0026#39;m working in thread ${Thread.currentThread().name}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"11-what-is-a-coroutine-job\"\u003e11. What is a Coroutine Job?\u003c/h5\u003e\n\u003cp\u003eA Job represents the lifecycle of a coroutine. It‚Äôs responsible for controlling the coroutine‚Äôs status, such as whether it‚Äôs active, completed, or canceled.\nJobs are hierarchical, meaning if a parent job is canceled, all child jobs within it are also canceled.\nFor every coroutine that is created, a Job instance is returned to uniquely identify that coroutine and allow you to manage its lifecycle.\nBy adding a Job to the CoroutineContext, you can manage coroutine lifecycles explicitly, which is particularly helpful in Android to prevent memory leaks and ensure tasks are canceled when they‚Äôre no longer needed.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval job \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Job()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval scope \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CoroutineScope(job \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eMain\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// This coroutine will be tied to the \u0026#39;job\u0026#39; lifecycle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Cancel all coroutines in this scope by canceling the job\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ejob.\u003cspan style=\"color:#a6e22e\"\u003ecancel\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"12-what-is-a-supervisorjob\"\u003e12. What is a SupervisorJob?\u003c/h5\u003e\n\u003cp\u003eIt is an implementation of Job that acts as a supervisor for child coroutines. It allows child coroutines to fail independently of each other, without causing the entire scope to cancel. This is particularly useful when you have multiple tasks running in parallel, and you want each task to continue running even if one of them fails.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val supervisorJob \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e SupervisorJob()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val scope \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CoroutineScope(supervisorJob \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eMain\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003eloadData\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        scope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            val job1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e launch {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    fetchDataFromNetwork()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (e: Exception) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#75715e\"\u003e// Handle network failure without affecting other tasks\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            val job2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e launch {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    fetchDataFromDatabase()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (e: Exception) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#75715e\"\u003e// Handle database failure independently\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCleared\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        supervisorJob.\u003cspan style=\"color:#a6e22e\"\u003ecancel\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// Cancels all coroutines when ViewModel is cleared\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"13-what-is-the-coroutinename\"\u003e13. What is the coroutineName?\u003c/h5\u003e\n\u003cp\u003eThe CoroutineContext can hold other elements like CoroutineName, which is used for debugging purposes, or custom elements for handling specific needs. For example, \u003ccode\u003eCoroutineName(\u0026quot;MyCoroutine\u0026quot;)\u003c/code\u003e allows you to assign a name to the coroutine, making it easier to track in logs.\u003c/p\u003e\n\u003ch5 id=\"14-what-are-the-different-ways-you-can-cancel-a-coroutine\"\u003e14. What are the different ways you can cancel a coroutine?\u003c/h5\u003e\n\u003cp\u003eCancellation is a cooperative mechanism, meaning that a coroutine can only be canceled if it checks for cancellation at specific points and responds appropriately.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eManual checking: You can also use isActive, an extension property on CoroutineScope, to check if the coroutine is still active. If you want to cancel the coroutine, you can use cancel() on its Job or CoroutineScope.\u003c/li\u003e\n\u003cli\u003eCancellation typically propagates through the coroutine hierarchy. When a parent coroutine is canceled, all its child coroutines are also canceled automatically, ensuring a clean, consistent state across related tasks.\u003c/li\u003e\n\u003cli\u003eCancellation check points: These are points in the code where the coroutine automatically checks for cancellation. Common cancellation points include:\u003c/li\u003e\n\u003cli\u003eSuspending functions like delay(), yield(), withTimeout, and functions that perform I/O operations, such as network calls.\u003c/li\u003e\n\u003cli\u003eThese functions check if the coroutine‚Äôs Job is still active. If it‚Äôs canceled, they throw a CancellationException, which stops the coroutine.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"15-how-do-you-handle-cancellation-exceptions\"\u003e15. How do you handle cancellation exceptions?\u003c/h5\u003e\n\u003cp\u003eWhen a coroutine is canceled, it throws a CancellationException. This exception is used to signal that the coroutine was canceled and is not considered a failure in the usual sense, so it won‚Äôt be logged as an error. However, if the cancellation needs to be handled or cleaned up, you can catch the CancellationException explicitly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(5000) \u003cspan style=\"color:#75715e\"\u003e// This coroutine will be canceled if scope.cancel() is called\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (e: CancellationException) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Coroutine was canceled\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// Optional: Perform cleanup or logging\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003efinally\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Use finally to release resources or perform additional cleanup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Clean up resources\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"16-how-can-you-handle-errors-in-coroutines\"\u003e16. How can you handle errors in coroutines?\u003c/h5\u003e\n\u003cp\u003eSince coroutines often perform background tasks like network requests or database operations, managing errors properly helps prevent crashes and ensures that failures are handled gracefully. Some best practices on error handling:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUsing try-catch for Exception Handling in Coroutines: You can use a try-catch block within a coroutine to handle exceptions as you would in regular synchronous code. This allows you to handle specific errors within the coroutine, preventing the coroutine from terminating abruptly due to an exception.\u003c/li\u003e\n\u003cli\u003eUsing CoroutineExceptionHandler: is a way to handle uncaught exceptions at the coroutine scope level. This handler catches any unhandled exceptions thrown by coroutines within its scope. Note that CoroutineExceptionHandler only works with root coroutines launched using launch. It does not handle exceptions in child coroutines launched with async or withContext, as they propagate exceptions back to their caller.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval exceptionHandler \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CoroutineExceptionHandler { _, exception \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Caught exception: ${exception.message}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e(exceptionHandler) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fetchDataFromNetwork() \u003cspan style=\"color:#75715e\"\u003e// Exception will be caught by exceptionHandler\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCoroutines started with launch and async handle exceptions differently:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eExceptions in launch coroutines are immediately propagated to the parent scope or handled by a CoroutineExceptionHandler.\u003c/li\u003e\n\u003cli\u003eExceptions in async coroutines are deferred until you call await(). If the exception occurs, it will be thrown when await() is called, allowing you to handle it there.\u003c/li\u003e\n\u003cli\u003esupervisorScope and SupervisorJob are useful for handling exceptions in coroutines independently within a scope, allowing one child coroutine to fail without canceling the others. This approach is ideal when you have several concurrent tasks that should run independently, and the failure of one task should not impact the others.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"17-how-can-you-handle-timeouts-in-kotlin-coroutines\"\u003e17. How can you handle timeouts in Kotlin Coroutines?\u003c/h5\u003e\n\u003cp\u003etimeouts can be handled using the withTimeout and withTimeoutOrNull functions. These functions allow you to set a maximum time limit for coroutine execution. If the coroutine takes longer than the specified time, it‚Äôs automatically canceled, ensuring that resources aren‚Äôt tied up by long-running tasks.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ewithTimeout(timeMillis) sets a time limit (in milliseconds) for the coroutine to complete. If the coroutine exceeds this limit, it throws a TimeoutCancellationException. This exception can be caught with a try-catch block, allowing you to handle the timeout as needed.\u003c/li\u003e\n\u003cli\u003ewithTimeoutOrNull(timeMillis) also sets a time limit but behaves differently from withTimeout. Instead of throwing an exception, withTimeoutOrNull returns null if the coroutine doesn‚Äôt complete within the time limit. This can make handling timeouts simpler, as you don‚Äôt need a try-catch block.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"18-how-do-you-achieve-parallelism-using-coroutines\"\u003e18. How do you achieve parallelism using coroutines?\u003c/h5\u003e\n\u003cp\u003eThe async coroutine builder is commonly used to perform parallel tasks that return a result. By launching multiple async coroutines, each task can run concurrently, and you can use await() to retrieve the result when needed.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esuspend fun \u003cspan style=\"color:#a6e22e\"\u003efetchDataFromNetwork\u003c/span\u003e(): String {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(1000) \u003cspan style=\"color:#75715e\"\u003e// Simulates network delay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Network Data\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esuspend fun \u003cspan style=\"color:#a6e22e\"\u003efetchDataFromDatabase\u003c/span\u003e(): String {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(500) \u003cspan style=\"color:#75715e\"\u003e// Simulates database delay\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Database Data\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Launch two coroutines in parallel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val networkData \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e async { fetchDataFromNetwork() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val databaseData \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e async { fetchDataFromDatabase() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Wait for both results\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Fetched data: ${networkData.await()} and ${databaseData.await()}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"19-what-are-coroutine-channels\"\u003e19. What are coroutine channels?\u003c/h5\u003e\n\u003cp\u003eCoroutine channels in Kotlin are a communication mechanism that allows coroutines to send and receive data asynchronously. Channels provide a way for coroutines to communicate with each other safely without needing to use traditional concurrency primitives like locks. Channels are particularly useful for coordinating tasks, streaming data, or implementing producer-consumer patterns.\u003c/p\u003e\n\u003ch5 id=\"20-what-is-mutex\"\u003e20. What is Mutex?\u003c/h5\u003e\n\u003cp\u003eA Mutex (short for ‚Äúmutual exclusion‚Äù) is a synchronization primitive used in concurrent programming to prevent multiple threads or coroutines from accessing shared resources (like variables or data structures) simultaneously. Mutex provides a non-blocking way to synchronize access to shared resources. By allowing only one coroutine to access critical sections at a time, it prevents race conditions and ensures data consistency.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.sync.Mutex\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.sync.withLock\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// counter is a shared variable that both coroutines (job1 and job2) try to modify concurrently.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e counter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eval mutex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Mutex() \u003cspan style=\"color:#75715e\"\u003e// Mutex for synchronizing access\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val job1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e launch {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        repeat(1000) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// Lock the mutex while incrementing the counter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            mutex.\u003cspan style=\"color:#a6e22e\"\u003ewithLock\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                counter\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val job2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e launch {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        repeat(1000) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// suspending function that acquires the Mutex \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// for the duration of the block. Inside this block, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// the counter is incremented safely by each coroutine, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// one at a time.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            mutex.\u003cspan style=\"color:#a6e22e\"\u003ewithLock\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                counter\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    job1.\u003cspan style=\"color:#a6e22e\"\u003ejoin\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    job2.\u003cspan style=\"color:#a6e22e\"\u003ejoin\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Counter = $counter\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"21-define-the-role-of-the-yield-function\"\u003e21. Define the role of the \u003ccode\u003eyield\u003c/code\u003e function.\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eThe yield function in Kotlin coroutines is a suspending function that gives a coroutine the opportunity to suspend voluntarily, allowing other coroutines or tasks to run.\u003c/li\u003e\n\u003cli\u003eWhen a coroutine calls yield, it temporarily suspends its execution, giving the dispatcher a chance to switch to another coroutine or task, then resumes the original coroutine when its turn comes again.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// In this example, the job coroutine yields control \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// on each iteration of the loop. This allows the \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// anotherJob coroutine to interleave its execution, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// so both coroutines can run cooperatively on the same thread.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Without yield, job would run continuously through \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// all iterations, potentially delaying anotherJob \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// if running on the same dispatcher.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val job \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e launch {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        repeat(5) { i \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Coroutine working on iteration $i\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eyield\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// Yield control to other coroutines\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val anotherJob \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e launch {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        repeat(5) { j \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Another coroutine working on iteration $j\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            delay(100) \u003cspan style=\"color:#75715e\"\u003e// Simulate some work\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    job.\u003cspan style=\"color:#a6e22e\"\u003ejoin\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    anotherJob.\u003cspan style=\"color:#a6e22e\"\u003ejoin\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"22-how-can-you-combine-multiple-coroutine-results\"\u003e22. How can you combine multiple coroutine results?\u003c/h5\u003e\n\u003cp\u003eYou can combine multiple coroutine results using functions like awaitAll or awaitAllOrNull. These functions take multiple Deferred objects (result of async) and return a list of their results or null if any of them fails.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val tasks \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e listOf(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        async(Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eIO\u003c/span\u003e) { fetchDataFromNetwork() },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        async(Dispatchers.\u003cspan style=\"color:#a6e22e\"\u003eIO\u003c/span\u003e) { fetchDataFromDatabase() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Await all results in parallel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val results \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tasks.\u003cspan style=\"color:#a6e22e\"\u003eawaitAll\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Fetched data: ${results[0]} and ${results[1]}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"23-what-is-the-role-of-the-produce-coroutine-builder-in-coroutines\"\u003e23. What is the role of the \u003ccode\u003eproduce\u003c/code\u003e coroutine builder in coroutines?\u003c/h5\u003e\n\u003cp\u003eThe produce coroutine builder in Kotlin coroutines is used to create a producer coroutine that generates a stream of values and sends them through a channel. This builder is particularly useful when implementing the producer-consumer pattern, where a producer coroutine sends data items that can be consumed by one or more consumer coroutines.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.channels.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun CoroutineScope.\u003cspan style=\"color:#a6e22e\"\u003eproduceNumbers\u003c/span\u003e(): ReceiveChannel\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInt\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e produce {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i in 1..\u003cspan style=\"color:#a6e22e\"\u003e5\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Producing $i\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        send(i) \u003cspan style=\"color:#75715e\"\u003e// Send each number to the channel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(500) \u003cspan style=\"color:#75715e\"\u003e// Simulate some work\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val numbers \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e produceNumbers() \u003cspan style=\"color:#75715e\"\u003e// Start producing numbers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    numbers.\u003cspan style=\"color:#a6e22e\"\u003econsumeEach\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Consumed $value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(1000) \u003cspan style=\"color:#75715e\"\u003e// Simulate some work with each consumed value\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Done consuming\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"24-what-is-the-role-of-coroutinestartlazy-in-the-context-of-coroutine-builders\"\u003e24. What is the role of CoroutineStart.LAZY in the context of coroutine builders?\u003c/h5\u003e\n\u003cp\u003eCoroutineStart.LAZY is a coroutine start option in Kotlin that delays the start of a coroutine until it‚Äôs explicitly needed. When you launch a coroutine with CoroutineStart.LAZY, it won‚Äôt start running immediately. Instead, it will only start executing when one of the following conditions is met:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003estart() is explicitly called on the coroutine‚Äôs Job.\u003c/li\u003e\n\u003cli\u003ejoin() is called on the coroutine‚Äôs Job, waiting for it to complete.\u003c/li\u003e\n\u003cli\u003eawait() is called on a Deferred result if using async.\nThe coroutine result is accessed (for instance, if it‚Äôs used or awaited elsewhere in the program).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Launch a coroutine with CoroutineStart.LAZY\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val job \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e launch(start \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CoroutineStart.\u003cspan style=\"color:#a6e22e\"\u003eLAZY\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Coroutine started\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        delay(1000) \u003cspan style=\"color:#75715e\"\u003e// Simulate some work\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Coroutine completed\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Coroutine hasn\u0026#39;t started yet\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Start the coroutine explicitly\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    job.\u003cspan style=\"color:#a6e22e\"\u003estart\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// This triggers the coroutine execution\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Alternatively, calling job.join() would also start and wait for its completion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    job.\u003cspan style=\"color:#a6e22e\"\u003ejoin\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// Waits for coroutine to complete\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Coroutine has finished execution\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"25-how-do-you-implement-a-debounce-mechanism-for-user-input-using-coroutines\"\u003e25. How do you implement a debounce mechanism for user input using coroutines?\u003c/h5\u003e\n\u003cp\u003eA common way to implement debounce with coroutines is to use a CoroutineScope to launch a coroutine that delays execution for a specified debounce time. If a new input comes in before the delay completes, the previous coroutine is canceled, and a new coroutine is launched.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlinx.coroutines.flow.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e kotlin.system.measureTimeMillis\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDebouncer\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val debounceTime: Long, \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val scope: CoroutineScope) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e debounceJob: Job\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003esubmit\u003c/span\u003e(action: () \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e Unit) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Cancel any previously scheduled job\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        debounceJob\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecancel\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Schedule a new job\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        debounceJob \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scope.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            delay(debounceTime)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            action() \u003cspan style=\"color:#75715e\"\u003e// Perform the action after the debounce time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e runBlocking {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val debouncer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Debouncer(debounceTime \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 300L, scope \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Simulate typing events\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Typing...\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    debouncer.\u003cspan style=\"color:#a6e22e\"\u003esubmit\u003c/span\u003e { println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;User input submitted after debounce!\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(100) \u003cspan style=\"color:#75715e\"\u003e// Simulate user typing again\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    debouncer.\u003cspan style=\"color:#a6e22e\"\u003esubmit\u003c/span\u003e { println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;User input submitted after debounce!\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(400) \u003cspan style=\"color:#75715e\"\u003e// Pause longer than the debounce time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    debouncer.\u003cspan style=\"color:#a6e22e\"\u003esubmit\u003c/span\u003e { println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;User input submitted after debounce!\u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Delay to see final result before main exits\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    delay(500)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"thanks-for-reading\"\u003eThanks for reading!\u003c/h5\u003e\n\u003cp\u003eHope you find this useful. This is just a list of questions I personally found useful in interviews. This list is by no means exhaustive. Let me know your thoughts in the responses. Happy coding!\u003c/p\u003e\n","description":"Android Interview Series 2024 ‚Äî Part 5","image":"https://hdwallsbox.com/wallpapers/m/78/3d-android-logo-background-m77313.jpg","permalink":"https://whywhom.github.io/blogs/android-interview-series-2024-part-5-kotlin-coroutines/","title":"Kotlin Coroutines"},{"content":"\u003cp\u003eHere is the original article:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://proandroiddev.com/android-interview-series-2024-part-4-kotlin-basics-16531ee54e8a\"\u003eüîó Android Interview Series 2024 ‚Äî Part 4 (Kotlin Basics)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis article is published on ProAndroidDev and covers essential Android interview topics for 2024. üöÄ\u003c/p\u003e\n\u003ch2 id=\"paragraph\"\u003eParagraph\u003c/h2\u003e\n\u003cp\u003eXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\u003c/p\u003e\n\u003cp\u003eItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\u003c/p\u003e\n\u003ch2 id=\"blockquotes\"\u003eBlockquotes\u003c/h2\u003e\n\u003cp\u003eThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a \u003ccode\u003efooter\u003c/code\u003e or \u003ccode\u003ecite\u003c/code\u003e element, and optionally with in-line changes such as annotations and abbreviations.\u003c/p\u003e\n\u003ch3 id=\"blockquote-without-attribution\"\u003eBlockquote without attribution\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTiam, ad mint andaepu dandae nostion secatur sequo quae.\n\u003cstrong\u003eNote\u003c/strong\u003e that you can use \u003cem\u003eMarkdown syntax\u003c/em\u003e within a blockquote.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"blockquote-with-attribution\"\u003eBlockquote with attribution\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon\u0026rsquo;t communicate by sharing memory, share memory by communicating.\u003c/p\u003e\n‚Äî \u003ccite\u003eRob Pike\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/cite\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"tables\"\u003eTables\u003c/h2\u003e\n\u003cp\u003eTables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eName\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eAge\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eBob\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e27\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eAlice\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e23\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"inline-markdown-within-tables\"\u003eInline Markdown within tables\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eInline¬†¬†¬†\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eMarkdown¬†¬†¬†\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eIn¬†¬†¬†\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eTable\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cem\u003eitalics\u003c/em\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003ebold\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cdel\u003estrikethrough\u003c/del\u003e¬†¬†¬†\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003ecode\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"code-blocks\"\u003eCode Blocks\u003c/h2\u003e\n\u003ch3 id=\"code-block-with-backticks\"\u003eCode block with backticks\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;Example HTML5 Document\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;Test\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"code-block-indented-with-four-spaces\"\u003eCode block indented with four spaces\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\n\u0026lt;head\u0026gt;\n  \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\n  \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n  \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"code-block-with-hugos-internal-highlight-shortcode\"\u003eCode block with Hugo\u0026rsquo;s internal highlight shortcode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;Example HTML5 Document\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;Test\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"list-types\"\u003eList Types\u003c/h2\u003e\n\u003ch3 id=\"ordered-list\"\u003eOrdered List\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eFirst item\u003c/li\u003e\n\u003cli\u003eSecond item\u003c/li\u003e\n\u003cli\u003eThird item\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"unordered-list\"\u003eUnordered List\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eList item\u003c/li\u003e\n\u003cli\u003eAnother item\u003c/li\u003e\n\u003cli\u003eAnd another item\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"nested-list\"\u003eNested list\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eItem\n\u003col\u003e\n\u003cli\u003eFirst Sub-item\u003c/li\u003e\n\u003cli\u003eSecond Sub-item\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"headings\"\u003eHeadings\u003c/h2\u003e\n\u003cp\u003eThe following HTML \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e‚Äî\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e elements represent six levels of section headings. \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e is the highest section level while \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e is the lowest.\u003c/p\u003e\n\u003ch1 id=\"h1\"\u003eH1\u003c/h1\u003e\n\u003ch2 id=\"h2\"\u003eH2\u003c/h2\u003e\n\u003ch3 id=\"h3\"\u003eH3\u003c/h3\u003e\n\u003ch4 id=\"h4\"\u003eH4\u003c/h4\u003e\n\u003ch5 id=\"h5\"\u003eH5\u003c/h5\u003e\n\u003ch6 id=\"h6\"\u003eH6\u003c/h6\u003e\n\u003ch2 id=\"other-elements--abbr-sub-sup-kbd-mark\"\u003eOther Elements ‚Äî abbr, sub, sup, kbd, mark\u003c/h2\u003e\n\u003cp\u003e\u003cabbr title=\"Graphics Interchange Format\"\u003eGIF\u003c/abbr\u003e is a bitmap image format.\u003c/p\u003e\n\u003cp\u003eH\u003csub\u003e2\u003c/sub\u003eO\u003c/p\u003e\n\u003cp\u003eX\u003csup\u003en\u003c/sup\u003e + Y\u003csup\u003en\u003c/sup\u003e = Z\u003csup\u003en\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003ePress \u003ckbd\u003e\u003ckbd\u003eCTRL\u003c/kbd\u003e+\u003ckbd\u003eALT\u003c/kbd\u003e+\u003ckbd\u003eDelete\u003c/kbd\u003e\u003c/kbd\u003e to end the session.\u003c/p\u003e\n\u003cp\u003eMost \u003cmark\u003esalamanders\u003c/mark\u003e are nocturnal, and hunt for insects, worms, and other small creatures.\u003c/p\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003eThe above quote is excerpted from Rob Pike\u0026rsquo;s \u003ca href=\"https://www.youtube.com/watch?v=PAAkCSZUG1c\"\u003etalk\u003c/a\u003e during Gopherfest, November 18, 2015.\u0026#160;\u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n","description":"Android Interview Series 2024 ‚Äî Part 4","image":"https://hdwallsbox.com/wallpapers/m/78/3d-android-logo-background-m77313.jpg","permalink":"https://whywhom.github.io/blogs/android-interview-series-2024-part-4-kotlin-basics/","title":"Kotlin Basics"},{"content":"\u003cp\u003eHere is the original article:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://medium.com/android-news/android-interview-questions-cheat-sheet-part-ii-bea0633f0da7\"\u003eüîó Android Interview Series 2024 ‚Äî Part 3 (Java basics)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis article is published on ProAndroidDev and covers essential Android interview topics for 2024. üöÄ\u003c/p\u003e\n\u003ch2 id=\"paragraph\"\u003eParagraph\u003c/h2\u003e\n\u003cp\u003eXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\u003c/p\u003e\n\u003cp\u003eItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\u003c/p\u003e\n\u003ch2 id=\"blockquotes\"\u003eBlockquotes\u003c/h2\u003e\n\u003cp\u003eThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a \u003ccode\u003efooter\u003c/code\u003e or \u003ccode\u003ecite\u003c/code\u003e element, and optionally with in-line changes such as annotations and abbreviations.\u003c/p\u003e\n\u003ch3 id=\"blockquote-without-attribution\"\u003eBlockquote without attribution\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTiam, ad mint andaepu dandae nostion secatur sequo quae.\n\u003cstrong\u003eNote\u003c/strong\u003e that you can use \u003cem\u003eMarkdown syntax\u003c/em\u003e within a blockquote.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"blockquote-with-attribution\"\u003eBlockquote with attribution\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon\u0026rsquo;t communicate by sharing memory, share memory by communicating.\u003c/p\u003e\n‚Äî \u003ccite\u003eRob Pike\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/cite\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"tables\"\u003eTables\u003c/h2\u003e\n\u003cp\u003eTables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eName\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eAge\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eBob\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e27\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eAlice\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e23\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"inline-markdown-within-tables\"\u003eInline Markdown within tables\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eInline¬†¬†¬†\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eMarkdown¬†¬†¬†\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eIn¬†¬†¬†\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eTable\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cem\u003eitalics\u003c/em\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003ebold\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cdel\u003estrikethrough\u003c/del\u003e¬†¬†¬†\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003ecode\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"code-blocks\"\u003eCode Blocks\u003c/h2\u003e\n\u003ch3 id=\"code-block-with-backticks\"\u003eCode block with backticks\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;Example HTML5 Document\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;Test\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"code-block-indented-with-four-spaces\"\u003eCode block indented with four spaces\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\n\u0026lt;head\u0026gt;\n  \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\n  \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n  \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"code-block-with-hugos-internal-highlight-shortcode\"\u003eCode block with Hugo\u0026rsquo;s internal highlight shortcode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;Example HTML5 Document\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;Test\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"list-types\"\u003eList Types\u003c/h2\u003e\n\u003ch3 id=\"ordered-list\"\u003eOrdered List\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eFirst item\u003c/li\u003e\n\u003cli\u003eSecond item\u003c/li\u003e\n\u003cli\u003eThird item\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"unordered-list\"\u003eUnordered List\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eList item\u003c/li\u003e\n\u003cli\u003eAnother item\u003c/li\u003e\n\u003cli\u003eAnd another item\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"nested-list\"\u003eNested list\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eItem\n\u003col\u003e\n\u003cli\u003eFirst Sub-item\u003c/li\u003e\n\u003cli\u003eSecond Sub-item\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"headings\"\u003eHeadings\u003c/h2\u003e\n\u003cp\u003eThe following HTML \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e‚Äî\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e elements represent six levels of section headings. \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e is the highest section level while \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e is the lowest.\u003c/p\u003e\n\u003ch1 id=\"h1\"\u003eH1\u003c/h1\u003e\n\u003ch2 id=\"h2\"\u003eH2\u003c/h2\u003e\n\u003ch3 id=\"h3\"\u003eH3\u003c/h3\u003e\n\u003ch4 id=\"h4\"\u003eH4\u003c/h4\u003e\n\u003ch5 id=\"h5\"\u003eH5\u003c/h5\u003e\n\u003ch6 id=\"h6\"\u003eH6\u003c/h6\u003e\n\u003ch2 id=\"other-elements--abbr-sub-sup-kbd-mark\"\u003eOther Elements ‚Äî abbr, sub, sup, kbd, mark\u003c/h2\u003e\n\u003cp\u003e\u003cabbr title=\"Graphics Interchange Format\"\u003eGIF\u003c/abbr\u003e is a bitmap image format.\u003c/p\u003e\n\u003cp\u003eH\u003csub\u003e2\u003c/sub\u003eO\u003c/p\u003e\n\u003cp\u003eX\u003csup\u003en\u003c/sup\u003e + Y\u003csup\u003en\u003c/sup\u003e = Z\u003csup\u003en\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003ePress \u003ckbd\u003e\u003ckbd\u003eCTRL\u003c/kbd\u003e+\u003ckbd\u003eALT\u003c/kbd\u003e+\u003ckbd\u003eDelete\u003c/kbd\u003e\u003c/kbd\u003e to end the session.\u003c/p\u003e\n\u003cp\u003eMost \u003cmark\u003esalamanders\u003c/mark\u003e are nocturnal, and hunt for insects, worms, and other small creatures.\u003c/p\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003eThe above quote is excerpted from Rob Pike\u0026rsquo;s \u003ca href=\"https://www.youtube.com/watch?v=PAAkCSZUG1c\"\u003etalk\u003c/a\u003e during Gopherfest, November 18, 2015.\u0026#160;\u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n","description":"Android Interview Series 2024 ‚Äî Part 3","image":"https://miro.medium.com/v2/resize:fit:2000/format:webp/1*4HpxaQPzrkvvy5R2320yAw.jpeg","permalink":"https://whywhom.github.io/blogs/android-interview-series-2024-part-3-java-basics/","title":"Java basics"},{"content":"\u003cp\u003eHere is the original article:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://proandroiddev.com/android-interview-series-2024-part-2-android-intermediate-472e0e787725\"\u003eüîó Android Interview Series 2024 ‚Äî Part 2 (Android intermediate)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis article is published on ProAndroidDev and covers essential Android interview topics for 2024. üöÄ\u003c/p\u003e\n\u003ch5 id=\"1-what-are-android-architecture-components-and-why-are-they-useful\"\u003e1. What are Android Architecture Components, and why are they useful?\u003c/h5\u003e\n\u003cp\u003eAndroid Architecture Components are a set of libraries introduced by Google to help developers design robust, testable, and maintainable Android applications. These libraries provide solutions to common problems that Android developers face, such as managing UI lifecycle changes and handling data persistence efficiently.\u003c/p\u003e\n\u003ch5 id=\"2-how-do-android-architecture-components-help-in-managing-app-complexity\"\u003e2. How do Android Architecture Components help in managing app complexity?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eLifecycle Awareness\u003c/code\u003e: These components are lifecycle-aware, helping prevent memory leaks and crashes by automatically managing data updates with respect to the activity/fragment lifecycle.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eData Consistency\u003c/code\u003e: ViewModel and LiveData help ensure that data is consistent across configuration changes, such as screen rotations, eliminating the need for manual handling in activities or fragments.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTestability\u003c/code\u003e: The structure provided by architecture components encourages modularity, making it easier to write unit tests for each component.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReduced Boilerplate\u003c/code\u003e: With Room and other components, architecture components help reduce the amount of boilerplate code, making the codebase cleaner and easier to maintain.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEncourages MVVM Architecture\u003c/code\u003e: These components naturally fit into the Model-View-ViewModel (MVVM) architecture, which is widely used in Android development for maintaining a clean separation between UI and data logic.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"3-what-are-the-main-components-included-in-android-architecture-components\"\u003e3. What are the main components included in Android Architecture Components?\u003c/h5\u003e\n\u003cp\u003eThe primary components include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eViewModel\u003c/code\u003e: Stores and manages UI-related data in a lifecycle-conscious way. It allows data to survive configuration changes like screen rotations, ensuring that UI data remains consistent without having to reload or recreate data unnecessarily.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLiveData\u003c/code\u003e: An observable data holder class that‚Äôs lifecycle-aware. It ensures that the UI components only observe LiveData when they‚Äôre in an active state, helping to prevent memory leaks and avoid crashes from updates that occur when the UI is in the background.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRoom\u003c/code\u003e: A database library that provides an abstraction layer over SQLite, making it easier to manage local data. Room includes compile-time checks for SQL queries and simplifies working with databases by using annotations and eliminating the need for boilerplate SQL code.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRepository\u003c/code\u003e: Although not an official library, a repository is a popular architectural pattern for abstracting data access. It acts as a single source of truth, managing data from various sources (local databases, network, etc.) and providing a clean API for data access.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNavigation Component\u003c/code\u003e: Helps manage navigation within an app, supporting complex navigational patterns like bottom navigation, tab navigation, and side navigation drawers. It also includes safe-args to ensure type-safety in navigation.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWorkManager\u003c/code\u003e: A library that handles scheduling background tasks in a reliable way. It‚Äôs especially useful for tasks that need guaranteed execution, like syncing data in the background.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"4-what-is-a-lifecycleowner\"\u003e4. What is a LifecycleOwner?\u003c/h5\u003e\n\u003cp\u003eA LifecycleOwner is an interface that represents an entity with an Android lifecycle. It is a component that has a defined lifecycle, such as an Activity or Fragment, which allows it to hold and observe other components that are aware of its lifecycle state (like LiveData or ViewModel). This helps manage resources efficiently and prevents memory leaks by only observing changes while the LifecycleOwner is in an active state.\u003c/p\u003e\n\u003ch5 id=\"5-why-is-it-important-to-use-lifecycle-aware-components-in-android-development\"\u003e5. Why is it important to use lifecycle-aware components in Android development?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eUsing LifecycleOwner with lifecycle-aware components (like LiveData) prevents memory leaks because observers are automatically removed when the lifecycle is no longer active, reducing the need for manual cleanup.\u003c/li\u003e\n\u003cli\u003eWhen a LifecycleOwner (e.g., an Activity) observes LiveData, updates to the UI occur only while the component is in an active state. If the component is stopped or destroyed, updates are automatically paused or detached.\u003c/li\u003e\n\u003cli\u003eWith a LifecycleOwner, components can respond accurately to lifecycle changes, enabling a more consistent user experience (e.g., data is not lost when screen rotations occur).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"6-what-is-the-purpose-of-the-viewmodel-class\"\u003e6. What is the purpose of the ViewModel class?\u003c/h5\u003e\n\u003cp\u003eThe ViewModel class in Android is a part of the Android Architecture Components and is designed to store and manage UI-related data in a lifecycle-conscious way. Its purpose is to hold data that is relevant to the UI and retain this data through configuration changes, such as screen rotations, avoiding the need to reload or re-fetch data every time an activity or fragment is recreated.\u003c/p\u003e\n\u003ch5 id=\"7-how-does-viewmodel-help-in-managing-ui-related-data-during-configuration-changes\"\u003e7. How does ViewModel help in managing UI-related data during configuration changes?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eOne of the primary benefits of ViewModel is that it survives configuration changes like screen rotations. This means that if an activity is recreated due to a configuration change, the ViewModel remains in memory and keeps the UI data intact, avoiding the need to reload data from scratch.\u003c/li\u003e\n\u003cli\u003eViewModel helps to keep the UI controller (like Activity or Fragment) lean and focused on UI-related tasks only. The business logic and data handling are managed by the ViewModel, which improves code organization and makes it easier to maintain.\u003c/li\u003e\n\u003cli\u003eThe ViewModel is lifecycle-aware and knows when an activity or fragment is destroyed. When a UI component is finished (e.g., activity is destroyed permanently), the ViewModel‚Äôs data is cleared, releasing resources and preventing memory leaks.\u003c/li\u003e\n\u003cli\u003eSince the ViewModel does not contain any references to the UI elements (like View or Context), it can be tested independently of the UI. This makes it easier to unit test and verify the behavior of the ViewModel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"8-explain-the-relationship-between-viewmodel-and-savedstatehandle\"\u003e8. Explain the relationship between ViewModel and SavedStateHandle.\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eA ViewModel stores and manages UI-related data in a lifecycle-aware manner, retaining data across configuration changes, such as screen rotations. However, if the app process is killed (e.g., due to low memory), data stored in a ViewModel is lost, as ViewModel does not retain its state when the app is killed and later restarted.\u003c/li\u003e\n\u003cli\u003eSavedStateHandle is a key-value map available in a ViewModel to store data that should survive process death.It can retain and restore small pieces of UI-related state data (like user input, scroll positions, or other data that should persist across app restarts).SavedStateHandle works in conjunction with the Android Saved State feature, leveraging onSaveInstanceState under the hood, allowing you to define data that should be saved and restored automatically.\u003c/li\u003e\n\u003cli\u003eWhen a ViewModel has a SavedStateHandle, it can store data that will be preserved not only through configuration changes but also across process death. This makes it useful for retaining critical UI state that the user expects to see restored if they return to the app after it was killed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCounterViewModel\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val savedStateHandle: SavedStateHandle) : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Define a key to store the counter value in SavedStateHandle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    companion object {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e val COUNTER_KEY \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;counter\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Retrieve the counter value from SavedStateHandle, or set to 0 if it\u0026#39;s not set\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val counter: MutableLiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInt\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e savedStateHandle.\u003cspan style=\"color:#a6e22e\"\u003egetLiveData\u003c/span\u003e(COUNTER_KEY, 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Method to increment the counter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003eincrementCounter\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val updatedValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (counter.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e: 0) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        counter.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e updatedValue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Save the updated counter value to SavedStateHandle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        savedStateHandle\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eCOUNTER_KEY\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e updatedValue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"9-what-is-livedata-and-how-does-livedata-help-in-managing-ui-state\"\u003e9. What is LiveData, and how does LiveData help in managing UI state?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eLiveData is an observable data holder class that is lifecycle-aware, meaning it respects the lifecycle of the Android components (such as Activity or Fragment) that observe it.\u003c/li\u003e\n\u003cli\u003eBy observing LiveData, UI components automatically receive updates when the data changes. This reactive approach allows developers to decouple UI components from data sources, leading to a cleaner architecture where the data layer notifies the UI without explicit callbacks.\u003c/li\u003e\n\u003cli\u003eLiveData works seamlessly with ViewModel, which survives configuration changes like screen rotations. This means that the UI retains its state and stays up-to-date with the latest data without reloading or re-fetching it.\u003c/li\u003e\n\u003cli\u003eLiveData is useful for managing asynchronous data sources, such as data fetched from a network or a database. Once data is fetched, it can be set in LiveData, which notifies observers to update the UI automatically.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"10-explain-the-difference-between-mutablelivedata-and-livedata\"\u003e10. Explain the difference between MutableLiveData and LiveData.\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eLiveData is an immutable data holder class, meaning that once data is set in a LiveData object, it can only be observed but not modified. This immutability is enforced to provide a safe, read-only view of data, especially when you want to expose data from a ViewModel to be observed by UI components without allowing them to modify it.\u003c/li\u003e\n\u003cli\u003eMutableLiveData is a subclass of LiveData that allows data to be modified. Unlike LiveData, it provides setter methods (setValue() or postValue()), which enable changing the data held in the MutableLiveData object. MutableLiveData is typically used inside a ViewModel where you want to manage and update the data in response to events.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"11-what-are-transformations-in-livedata-and-how-do-you-use-them\"\u003e11. What are Transformations in LiveData, and how do you use them?\u003c/h5\u003e\n\u003cp\u003eTransformations in LiveData are utility methods provided by the Android Architecture Components that allow you to manipulate or transform the data held in one LiveData into another LiveData.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emap is used to apply a transformation function to each value in LiveData.\u003c/li\u003e\n\u003cli\u003eswitchMap is helpful when the transformation depends on another LiveData that might change.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.LiveData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.MutableLiveData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.Transformations\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.ViewModel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCounterViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val _counter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableLiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInt\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eapply\u003c/span\u003e { value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0 }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val counter: LiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInt\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e _counter\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Transform the counter value into a formatted string\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val counterText: LiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Transformations.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(_counter) { count \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Counter Value: $count\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003eincrementCounter\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _counter.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (_counter.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e: 0) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val _userId \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableLiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val userId: LiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e _userId\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Simulated repository method to fetch user details by ID\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e fun \u003cspan style=\"color:#a6e22e\"\u003egetUserDetails\u003c/span\u003e(userId: String): LiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUser\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Normally, this would be a call to a repository that fetches data from a database or network\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e MutableLiveData(User(userId, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;User Name for $userId\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Using switchMap to retrieve user details whenever userId changes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val userDetails: LiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUser\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Transformations.\u003cspan style=\"color:#a6e22e\"\u003eswitchMap\u003c/span\u003e(_userId) { id \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        getUserDetails(id)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003esetUserId\u003c/span\u003e(id: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _userId.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e id\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Data class for User details\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e(val id: String, val name: String)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"12-explain-the-differences-between-mediatorlivedata-and-regular-livedata\"\u003e12. Explain the differences between MediatorLiveData and regular LiveData.\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eLiveData is a lifecycle-aware, observable data holder class. It allows UI components to observe changes in data and automatically updates the UI when the data changes. It is primarily used for single-source observation, meaning it directly holds and manages data from one source. Once LiveData is observed, it provides the updated value to the UI component when the data changes.\u003c/li\u003e\n\u003cli\u003eMediatorLiveData is a subclass of LiveData that can observe multiple LiveData sources simultaneously. It acts as a ‚Äúmediator‚Äù and can combine data from multiple sources or react to changes in one or more LiveData sources. MediatorLiveData is helpful for scenarios where you need to manage and observe data from multiple LiveData sources and produce a single, unified result. It allows developers to define custom transformation logic to handle the data from multiple sources and decide what should be emitted to observers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"13-how-would-you-implement-singleliveevent-to-handle-single-time-events\"\u003e13. How would you implement SingleLiveEvent to handle single-time events?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eLiveData is commonly used to observe data changes in a lifecycle-aware manner, but it has a limitation when handling single-time events. Events like navigation, showing a toast, or triggering a one-time action should only happen once. However, if the LiveData is observed again (like after a configuration change), it will re-emit the last value, causing the event to trigger multiple times.\u003c/li\u003e\n\u003cli\u003eTo solve this issue, developers often implement a custom class called SingleLiveEvent. SingleLiveEvent is a LiveData subclass designed to handle events that should only be triggered once, such as displaying a message or navigating to another screen. It ensures that the event is only observed once, even if the observer\u0026rsquo;s lifecycle changes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.annotation.MainThread\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.LifecycleOwner\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.MutableLiveData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.Observer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.util.concurrent.atomic.AtomicBoolean\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSingleLiveEvent\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eT\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e : MutableLiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eT\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val pending \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e AtomicBoolean(\u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@MainThread\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eobserve\u003c/span\u003e(owner: LifecycleOwner, observer: Observer\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003ein T\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Observe the internal MutableLiveData\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eobserve\u003c/span\u003e(owner, { t \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (pending.\u003cspan style=\"color:#a6e22e\"\u003ecompareAndSet\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                observer.\u003cspan style=\"color:#a6e22e\"\u003eonChanged\u003c/span\u003e(t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@MainThread\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003esetValue\u003c/span\u003e(value: T\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        pending.\u003cspan style=\"color:#a6e22e\"\u003eset\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esetValue\u003c/span\u003e(value)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// A method to call when there\u0026#39;s no data (for events like showing a Toast)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@MainThread\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003ecall\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"14-what-is-room-database-and-why-should-it-be-used-instead-of-sqlite-directly\"\u003e14. What is Room Database, and why should it be used instead of SQLite directly?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eRoom Database is part of the Android Architecture Components and provides an abstraction layer over SQLite to make database interactions more robust, easier to use, and less error-prone.\u003c/li\u003e\n\u003cli\u003eOne of the biggest advantages of Room is that it verifies SQL queries at compile time. This means if there‚Äôs a typo or an invalid SQL query, you‚Äôll get an error before even running the app.\u003c/li\u003e\n\u003cli\u003eRoom provides annotations (@Entity, @Dao, @Query, etc.) that reduce the need for boilerplate code, making database interactions more concise and readable.\u003c/li\u003e\n\u003cli\u003eRoom is designed to work seamlessly with Android‚Äôs Architecture Components, including LiveData and ViewModel. This makes it easier to build lifecycle-aware applications, where data from the database can be observed and automatically update the UI.\u003c/li\u003e\n\u003cli\u003eRoom provides a structured way to handle database versioning and migrations.\u003c/li\u003e\n\u003cli\u003eRoom uses annotated Entity classes to represent database tables, allowing developers to work with Java/Kotlin objects instead of managing raw SQL statements and cursors.\u003c/li\u003e\n\u003cli\u003eWith Room, unit testing is simpler because you can create an in-memory version of the database for tests. Room also provides a clear separation of concerns and better support for dependency injection, making testing more straightforward.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"15-how-does-room-handle-database-migrations\"\u003e15. How does Room handle database migrations?\u003c/h5\u003e\n\u003cp\u003eRoom uses migration strategies that allow you to define transformations to bring the database schema from one version to the next. When you increment the version number of the Room database, you must also specify how to migrate from the old schema to the new schema to avoid errors and ensure data consistency.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.content.Context\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.room.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.sqlite.db.SupportSQLiteDatabase\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.lifecycle.LiveData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.util.concurrent.atomic.AtomicInteger\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Entity representing the \u0026#39;user_table\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Entity\u003c/span\u003e(tableName \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;user_table\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@PrimaryKey\u003c/span\u003e(autoGenerate \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e) val id: Int \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val name: String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val email: String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val age: Int \u003cspan style=\"color:#75715e\"\u003e// New column added in version 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DAO Interface for accessing \u0026#39;user_table\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Dao\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserDao\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Insert\u003c/span\u003e(onConflict \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e OnConflictStrategy.\u003cspan style=\"color:#a6e22e\"\u003eIGNORE\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    suspend fun \u003cspan style=\"color:#a6e22e\"\u003einsert\u003c/span\u003e(user: User)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Query\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SELECT * FROM user_table ORDER BY name ASC\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003egetAllUsers\u003c/span\u003e(): LiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUser\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Delete\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    suspend fun \u003cspan style=\"color:#a6e22e\"\u003edelete\u003c/span\u003e(user: User)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Room Database with migration from version 1 to version 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Database\u003c/span\u003e(entities \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eUser::\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e],\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eversion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2, exportSchema \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserDatabase\u003c/span\u003e : RoomDatabase() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e fun \u003cspan style=\"color:#a6e22e\"\u003euserDao\u003c/span\u003e(): UserDao\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    companion object {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003e@Volatile\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e INSTANCE: UserDatabase\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Migration object to add \u0026#39;age\u0026#39; column to the \u0026#39;user_table\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val MIGRATION_1_2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e object : Migration(1, 2) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            override fun \u003cspan style=\"color:#a6e22e\"\u003emigrate\u003c/span\u003e(database: SupportSQLiteDatabase) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// Add the new \u0026#39;age\u0026#39; column with a default value to existing rows\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                database.\u003cspan style=\"color:#a6e22e\"\u003eexecSQL\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ALTER TABLE user_table ADD COLUMN age INTEGER NOT NULL DEFAULT 0\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Singleton pattern to get a single instance of UserDatabase\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        fun \u003cspan style=\"color:#a6e22e\"\u003egetDatabase\u003c/span\u003e(context: Context): UserDatabase {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e INSTANCE \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003esynchronized\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                val instance \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Room.\u003cspan style=\"color:#a6e22e\"\u003edatabaseBuilder\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    context.\u003cspan style=\"color:#a6e22e\"\u003eapplicationContext\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    UserDatabase::\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ejava\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;user_database\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003eaddMigrations\u003c/span\u003e(MIGRATION_1_2) \u003cspan style=\"color:#75715e\"\u003e// Register the migration here\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .\u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                INSTANCE \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e instance\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                instance\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"16-how-do-you-manage-relationships-eg-one-to-many-in-room\"\u003e16. How do you manage relationships (e.g., one-to-many) in Room?\u003c/h5\u003e\n\u003cp\u003eRoom supports relationships using embedded classes and the @Relation annotation to define how entities are connected. For example, in a one-to-many relationship, you might have a User entity that can have multiple Address entries.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.room.*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Entity\u003c/span\u003e(tableName \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;user_table\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@PrimaryKey\u003c/span\u003e val userId: Long,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val userName: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Entity\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    tableName \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;address_table\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    foreignKeys \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eForeignKey(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        entity \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e User::\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eparentColumns\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;userId\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        childColumns \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;userOwnerId\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        onDelete \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ForeignKey.\u003cspan style=\"color:#a6e22e\"\u003eCASCADE\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAddress\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@PrimaryKey\u003c/span\u003e(autoGenerate \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e) val addressId: Long \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val address: String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val userOwnerId: Long \u003cspan style=\"color:#75715e\"\u003e// Foreign key referencing User\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserWithAddresses\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Embedded\u003c/span\u003e val user: User,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Relation\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        parentColumn \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;userId\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        entityColumn \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;userOwnerId\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val addresses: List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eAddress\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@Dao\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserDao\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Transaction\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Query\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SELECT * FROM user_table WHERE userId = :userId\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003egetUserWithAddresses\u003c/span\u003e(userId: Long): LiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eUserWithAddresses\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"17-what-is-the-difference-between-data-binding-and-view-binding\"\u003e17. What is the difference between Data Binding and View Binding?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eView Binding is a straightforward, lightweight tool that generates binding classes for each XML layout file. It allows you to access views directly in code without needing findViewById. It‚Äôs simple to use, as it automatically generates a binding class for each XML file, where each view can be referenced directly through its ID.\u003c/li\u003e\n\u003cli\u003eData Binding allows you to bind data directly to the XML layout, enabling a reactive, two-way binding setup where the UI automatically updates in response to changes in data. It supports binding expressions, observable properties, and two-way data binding, which can simplify UI updates in complex applications, especially those using MVVM architecture.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"18-how-do-you-handle-data-binding-errors-during-compile-time\"\u003e18. How do you handle data-binding errors during compile time?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eHandling data-binding errors during compile time can be challenging, as these errors often arise from incorrect expressions, type mismatches, or improperly defined variables in the XML layout.\u003c/li\u003e\n\u003cli\u003eTo proactively handle data-binding errors, developers can enable ViewModel validation and use @Bindable annotations for properties that need two-way binding, ensuring proper communication between the XML and ViewModel.\u003c/li\u003e\n\u003cli\u003eAnother best practice is to use @BindingAdapter methods for custom binding logic, as this keeps the code cleaner and reduces the risk of XML syntax errors.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"19-what-is-the-navigation-component-and-how-does-the-navigation-component-simplify-fragment-transactions\"\u003e19. What is the Navigation Component, and how does the Navigation Component simplify Fragment transactions?\u003c/h5\u003e\n\u003cp\u003eThe Navigation Component provides a cohesive framework to define navigation paths, handle fragment transactions, and manage back stacks.\nThe Navigation Component enables developers to define all app navigation in a single navigation graph XML file, making it easy to visualize the app‚Äôs flow. This file contains Destinations (screens like activities and fragments) and Actions (connections between screens), allowing you to specify navigation paths, arguments, and transition animations in one place.\nThe Navigation Component simplifies fragment transactions by automatically handling many complexities of fragment management, such as back-stack handling and lifecycle awareness. Instead of manually managing fragment transactions with FragmentManager, developers can use the NavController to navigate between fragments with a single command, such as findNavController().navigate(R.id.destinationFragment). It eliminates the need for boilerplate code, making fragment navigation more readable and less error-prone.\u003c/p\u003e\n\u003ch5 id=\"20-explain-the-difference-between-safe-args-and-implicit-intents\"\u003e20. Explain the difference between Safe Args and implicit intents.\u003c/h5\u003e\n\u003cp\u003eSafe Args is specifically part of the Navigation Component, designed to facilitate safe and type-checked data passing between destinations defined in a navigation graph, typically between fragments or activities.\nSafe Args generates argument classes for each destination, allowing developers to pass data using strongly typed methods, reducing the risk of runtime errors like missing or mismatched arguments.\nThis approach makes navigation code more predictable, as it ensures that all required arguments are passed correctly at compile time.\nImplicit intents, on the other hand, are used to request actions from other applications or components within Android without specifying the exact component (activity, service, etc.) that should handle the request. For example, an implicit intent can be used to open a URL in a web browser or share content via available apps.\u003c/p\u003e\n\u003ch5 id=\"21-how-do-you-handle-deep-linking-with-the-navigation-component\"\u003e21. How do you handle deep linking with the Navigation Component?\u003c/h5\u003e\n\u003cp\u003eTo handle deep linking with the Navigation Component, you define deep links within the navigation graph, which allows your app to open specific destinations directly via a URL or URI. This feature makes it easy to navigate to particular fragments or activities directly from external sources like notifications, emails, or web links.\nWhen the app receives an intent with a matching deep link, the Navigation Component automatically handles the navigation and populates any arguments specified in the URI.\u003c/p\u003e\n\u003ch5 id=\"22-what-are-some-best-practices-for-working-with-the-navigation-component\"\u003e22. What are some best practices for working with the Navigation Component?\u003c/h5\u003e\n\u003cp\u003eAim to use one main activity with multiple fragments managed by the Navigation Component. This approach reduces complexity and takes full advantage of fragment-based navigation with a single NavController.\nUse Safe Args to pass data between destinations. Safe Args generates type-safe classes for arguments, reducing the risk of runtime errors and ensuring compile-time checks.\nKeep the navigation graph organized and avoid deeply nested or overly complex navigation paths. If the app has separate flows, consider using multiple navigation graphs or nested graphs to keep each graph manageable.\nConfigure up and back navigation to respect the back stack. Use app:defaultNavHost=\u0026ldquo;true\u0026rdquo; for the NavHostFragment in the main activity layout to handle system back button presses correctly.\nDefine deep links in the navigation graph for screens that should be accessible from external sources (like notifications or URLs). This simplifies external navigation and ensures that deep links can bring users to the correct destination with the right data.\nSet up custom animations in the navigation graph to provide smooth transitions between fragments, enhancing the user experience. Use shared element transitions when moving between fragments that share visual elements.\nUse popUpTo and popUpToInclusive attributes in actions to clear unnecessary fragments from the back stack, preventing stack overflow and reducing memory usage.\u003c/p\u003e\n\u003ch5 id=\"23-what-is-the-purpose-of-the-paging-library\"\u003e23. What is the purpose of the Paging library?\u003c/h5\u003e\n\u003cp\u003eThe Paging library in Android simplifies loading large data sets by loading and displaying data in chunks or ‚Äúpages‚Äù rather than all at once, thus optimizing memory usage and performance. This approach is especially helpful for lists that fetch data from local databases or remote sources, ensuring smooth scrolling and efficient resource use.\u003c/p\u003e\n\u003ch5 id=\"24-explain-the-differences-between-pagingsource-pagingdata-and-pagingadapter\"\u003e24. Explain the differences between PagingSource, PagingData, and PagingAdapter.\u003c/h5\u003e\n\u003cp\u003ePagingSource: Defines how to load data pages from a data source (e.g., database or network).\nPagingData: A container holding paginated data that the UI can observe and render.\nPagingAdapter: A RecyclerView adapter designed to submit PagingData to the UI and handle diffing and display of data items.\nclass MyPagingSource : PagingSource\u0026lt;Int, MyData\u0026gt;() { /* Load data */ }\nval pagingData = Pager(PagingConfig(pageSize = 20)) { MyPagingSource() }.flow\nadapter.submitData(lifecycle, pagingData)\u003c/p\u003e\n\u003ch5 id=\"25-how-does-the-paging-library-handle-data-loading-state-eg-loading-error-empty\"\u003e25. How does the Paging library handle data loading state (e.g., loading, error, empty)?\u003c/h5\u003e\n\u003cp\u003eThe Paging library uses LoadState to track data states: LoadState.Loading, LoadState.Error, and LoadState.NotLoading. Observing these states allows the UI to react appropriately, like showing a loading spinner or error message.\u003c/p\u003e\n\u003cp\u003eadapter.loadStateFlow.collect { loadStates -\u0026gt;\nwhen (val state = loadStates.refresh) {\nis LoadState.Loading -\u0026gt; showLoading()\nis LoadState.Error -\u0026gt; showError(state.error)\nis LoadState.NotLoading -\u0026gt; showContent()\n}\n}\u003c/p\u003e\n\u003ch5 id=\"26-how-would-you-implement-a-refresh-mechanism-with-the-paging-library\"\u003e26. How would you implement a refresh mechanism with the Paging library?\u003c/h5\u003e\n\u003cp\u003eYou can implement a refresh by calling adapter.refresh() on the PagingAdapter, which reloads data from the start.\u003c/p\u003e\n\u003cp\u003erefreshButton.setOnClickListener { adapter.refresh() }\u003c/p\u003e\n\u003ch5 id=\"27-whats-the-purpose-of-remotemediator-in-the-paging-library\"\u003e27. What‚Äôs the purpose of RemoteMediator in the Paging library?\u003c/h5\u003e\n\u003cp\u003eRemoteMediator can fetch data from a remote source, typically an API, and store it in a local database. This cached data can then be loaded by the PagingSource, allowing the app to access previously loaded pages of data offline.\nIt manages boundary conditions for loading additional data. For example, it will trigger network requests for loading more items when the user scrolls to the end of the list or when more data is required from the server.\nIt enables the paging library to keep the locally cached data synchronized with remote data while ensuring that you‚Äôre not repeatedly loading the same pages.\nRemoteMediator also handles various load states (e.g., Loading, Success, Error) and propagates them to the UI, providing a better user experience by indicating loading progress or errors.\u003c/p\u003e\n\u003ch5 id=\"28-what-is-workmanager-and-when-should-it-be-used\"\u003e28. What is WorkManager, and when should it be used?\u003c/h5\u003e\n\u003cp\u003eWorkManager is an Android library designed to handle background tasks that need to be guaranteed to run, even if the app is closed or the device is restarted. It\u0026rsquo;s the recommended API for managing persistent, deferrable, and guaranteed background tasks in Android.\u003c/p\u003e\n\u003cp\u003eTasks can be set to run only under specific conditions, such as when the device is connected to Wi-Fi, has sufficient battery level, or is charging.\nAutomatically retries tasks if they fail, based on exponential backoff.\nSupports chaining and combining multiple tasks with dependencies.\nYou can schedule one-off or repeating tasks.\u003c/p\u003e\n\u003ch5 id=\"29-explain-the-differences-between-workmanager-jobscheduler-and-alarmmanager\"\u003e29. Explain the differences between WorkManager, JobScheduler, and AlarmManager.\u003c/h5\u003e\n\u003cp\u003eWorkManager: Used for deferrable, guaranteed background tasks that need to complete even if the app or device restarts. Used for tasks that should be guaranteed to run eventually (e.g., uploading logs, syncing data) and support constraints like battery level, network connectivity, etc.\nJobScheduler: Schedules jobs to be run at a later time or under certain conditions (introduced in Android API 21). Used for background tasks that don‚Äôt need immediate execution and can wait for conditions (e.g., network connectivity, idle state).\nAlarmManager: Used to trigger actions at exact times or after a specific duration. Suitable for time-sensitive tasks. Best for exact timing requirements where you need tasks to be triggered at a specific time or interval (e.g., scheduling daily alarms).\u003c/p\u003e\n\u003ch5 id=\"30-describe-the-different-types-of-work-requests-in-workmanager\"\u003e30. Describe the different types of work requests in WorkManager.\u003c/h5\u003e\n\u003cp\u003eWorkManager supports three types of work requests:\u003c/p\u003e\n\u003cp\u003eOneTimeWorkRequest: Executes a task once, ideal for one-off background tasks like a single data sync or upload. This is the most commonly used work request for tasks that don‚Äôt need repetition.\nval oneTimeRequest = OneTimeWorkRequestBuilder\u003cMyWorker\u003e().build() WorkManager.getInstance(context).enqueue(oneTimeRequest)\nPeriodicWorkRequest: Executes tasks on a recurring basis with a minimum interval of 15 minutes. It‚Äôs useful for tasks like daily backups or routine data sync.\nval periodicRequest = PeriodicWorkRequestBuilder\u003cMyWorker\u003e(15, TimeUnit.MINUTES).build() WorkManager.getInstance(context).enqueue(periodicRequest)\nUniqueWorkRequest: Allows you to enqueue a work request with a unique name, helping to avoid duplication. You can specify how to handle existing work if a request with the same name is already queued (e.g., REPLACE, KEEP).\u003c/p\u003e\n\u003ch5 id=\"31-how-can-you-chain-multiple-work-requests-in-workmanager\"\u003e31. How can you chain multiple work requests in WorkManager?\u003c/h5\u003e\n\u003cp\u003eIn WorkManager, you can chain multiple work requests to ensure they run sequentially or based on complex dependencies. This is done using WorkContinuation.\u003c/p\u003e\n\u003cp\u003eval downloadWork = OneTimeWorkRequestBuilder\u003cDownloadWorker\u003e().build()\nval processWork = OneTimeWorkRequestBuilder\u003cProcessWorker\u003e().build()\nval uploadWork = OneTimeWorkRequestBuilder\u003cUploadWorker\u003e().build()\u003c/p\u003e\n\u003cp\u003eWorkManager.getInstance(context)\n.beginWith(downloadWork) // Starts with download work\n.then(processWork)        // Chains process work after download\n.then(uploadWork)         // Chains upload work after processing\n.enqueue()\u003c/p\u003e\n\u003ch5 id=\"32-what-are-the-limitations-of-workmanager-and-when-should-you-consider-alternatives\"\u003e32. What are the limitations of WorkManager, and when should you consider alternatives?\u003c/h5\u003e\n\u003cp\u003eWhile WorkManager is powerful, it has a few limitations:\u003c/p\u003e\n\u003cp\u003eMinimum interval for periodic work is 15 minutes, which makes it unsuitable for tasks that need frequent execution.\nExact timing is not guaranteed, as WorkManager is optimized for battery and resource efficiency, so it may defer work based on system conditions.\nDevice constraints may cause WorkManager to postpone tasks until conditions are favorable (e.g., network availability).\nAlternatives to consider:\u003c/p\u003e\n\u003cp\u003eJobScheduler for background tasks that don‚Äôt require precise timing but do need to respect device constraints, especially on API 21+.\nAlarmManager if exact timing is critical for tasks (e.g., notifications at a specific time).\nFirebase JobDispatcher (deprecated) for high-priority background tasks.\u003c/p\u003e\n\u003ch5 id=\"33-what-is-dependency-injection-di-in-android\"\u003e33. What is Dependency Injection (DI) in Android?\u003c/h5\u003e\n\u003cp\u003eDependency Injection (DI) is a design pattern that enables objects or classes to be provided with their dependencies from an external source rather than creating them internally. In Android, DI simplifies dependency management, improves code readability, and makes testing easier by allowing mock dependencies to be injected. Popular DI frameworks like Dagger and Hilt (a Dagger extension) automate dependency injection, reducing boilerplate code and handling the dependency lifecycle.\u003c/p\u003e\n\u003cp\u003eCheckout this article by yours truly to find out more details about Hilt :)\u003c/p\u003e\n\u003ch5 id=\"34-what-is-datastore-and-how-is-it-different-from-sharedpreferences\"\u003e34. What is DataStore, and how is it different from SharedPreferences?\u003c/h5\u003e\n\u003cp\u003eDataStore is a data storage solution introduced in Android to replace SharedPreferences, providing a more robust and scalable way to store data, especially for asynchronous operations. There are two types of DataStore: Preferences DataStore and Proto DataStore.\nPreferences DataStore: Stores simple key-value pairs, similar to SharedPreferences, but with improved data handling and thread safety.\nProto DataStore: Stores structured data using Protocol Buffers, ideal for complex data models.\nDataStore operates asynchronously, preventing blocking the main thread.\nDataStore is designed to work with Kotlin Coroutines, making it more efficient for modern Android applications.\nDataStore guarantees data consistency and is safe to use across multiple threads.\u003c/p\u003e\n\u003ch5 id=\"35-how-do-you-handle-large-data-sets-in-android-to-avoid-memory-issues\"\u003e35. How do you handle large data sets in Android to avoid memory issues?\u003c/h5\u003e\n\u003cp\u003ePagination: Use the Paging library to load data in chunks, displaying only a subset at a time to avoid loading the entire dataset into memory.\nUse RecyclerView instead of ListView as it efficiently recycles views, reducing memory usage.\u003c/p\u003e\n\u003ch5 id=\"36-how-would-you-handle-asynchronous-tasks-in-android\"\u003e36. How would you handle asynchronous tasks in Android?\u003c/h5\u003e\n\u003cp\u003eAndroid provides several ways to handle asynchronous tasks:\u003c/p\u003e\n\u003cp\u003eCoroutines: Coroutines allow developers to handle asynchronous tasks in a sequential and readable manner. Using launch or async with Dispatchers.IO or Dispatchers.Default is common for background tasks\nAsyncTask (Deprecated): Previously used for background tasks, but no longer recommended due to better alternatives like coroutines.\nWorkManager: For tasks that require guaranteed execution, even if the app is closed or the device restarts.\nRxJava: An alternative to coroutines, providing a powerful functional approach to handle asynchronous tasks.\u003c/p\u003e\n\u003ch5 id=\"37-explain-how-you-can-prevent-memory-leaks-in-android\"\u003e37. Explain how you can prevent memory leaks in Android.\u003c/h5\u003e\n\u003cp\u003eMemory leaks occur when objects that are no longer needed remain in memory, leading to increased memory usage. Techniques to prevent memory leaks include:\u003c/p\u003e\n\u003cp\u003eAvoid Long-lived Context References: Do not hold references to Activity or Context in non-UI classes (e.g., in singleton objects).\nUse Weak References: For large objects that are accessed occasionally, use WeakReference to avoid keeping them in memory unnecessarily.\nLifecycle-aware Components: Use ViewModel and LiveData to manage data across configuration changes, avoiding Activity and Fragment references that can lead to leaks.\nUse LeakCanary: A powerful tool for detecting memory leaks in real-time, helping identify and fix leaks during development.\u003c/p\u003e\n\u003ch5 id=\"38-how-do-you-handle-large-image-files-efficiently-in-android\"\u003e38. How do you handle large image files efficiently in Android?\u003c/h5\u003e\n\u003cp\u003eImage Compression: Resize and compress images before loading them, reducing the memory footprint.\nUse libraries like Glide, Picasso, or Coil, which handle caching, compression, and efficient loading.\nCache frequently used images to reduce memory consumption and speed up loading.\nUse vector images for icons and simple graphics instead of large bitmaps, and consider modern formats like WebP.\u003c/p\u003e\n\u003ch5 id=\"39-what-is-an-application-not-responding-anr-error-and-how-can-you-prevent-them-from-occurring-in-an-app\"\u003e39. What is an Application Not Responding (ANR) error, and how can you prevent them from occurring in an app?\u003c/h5\u003e\n\u003cp\u003eAn ANR (Application Not Responding) error occurs when the main thread is blocked for more than five seconds, preventing the app from responding to user inputs. Common causes include performing long-running operations on the main thread, such as file I/O, database queries, or network requests.\u003c/p\u003e\n\u003cp\u003eTo prevent ANR errors:\u003c/p\u003e\n\u003cp\u003eRun Tasks on Background Threads: Use coroutines or AsyncTask (in older apps) to move time-consuming tasks off the main thread.\nUse Handlers and HandlerThread: For tasks that need to communicate with the main thread, use Handler with a background HandlerThread.\nOptimize Loops and Heavy Calculations: If your app needs to perform complex calculations, optimize the logic to reduce execution time and run it in a background thread.\nAvoid Blocking Operations in UI Lifecycle Callbacks: Avoid blocking calls in lifecycle methods like onCreate or onResume. Initialize heavy resources asynchronously.\u003c/p\u003e\n\u003ch5 id=\"40-what-is-the-android-build-process-and-what-are-its-main-stages\"\u003e40. What is the Android build process, and what are its main stages?\u003c/h5\u003e\n\u003cp\u003eThe Android build process is a series of steps that convert source code, resources, and configuration files into an installable Android application package (APK). The main stages of the build process include:\u003c/p\u003e\n\u003cp\u003eCompile: This stage compiles the Java/Kotlin code into bytecode. The Android Gradle plugin compiles the code using the Java Compiler (javac) or Kotlin Compiler.\nResource Processing: Resources (layouts, images, strings, etc.) are processed and compiled into a binary format. The Android Asset Packaging Tool (AAPT) handles this stage, generating the R.java file that maps resource IDs.\nLinking: In this stage, the compiled code and processed resources are linked together. The build system merges these elements and prepares them for packaging.\nPackaging: Finally, the APK is generated, containing all compiled code, resources, and manifest files, ready for installation on Android devices.\u003c/p\u003e\n\u003ch5 id=\"41-can-you-explain-the-difference-between-build-variants-and-product-flavors-in-android\"\u003e41. Can you explain the difference between build variants and product flavors in Android?\u003c/h5\u003e\n\u003cp\u003eBuild Variants: A combination of a build type (like debug or release) and product flavor. Each variant can have its own settings and behaviors, allowing developers to customize builds based on different requirements. For example, if you have a debug build type and a paid product flavor, you would get a paidDebug variant.\nProduct Flavors: These are different versions of your app that can be developed using the same codebase, typically used for creating free and paid versions, or variants for different markets. Each flavor can define its own resources and configurations. For instance, you might have flavors like free and paid, each with different features.\u003c/p\u003e\n\u003ch5 id=\"42-what-is-gradle-and-why-is-it-used-in-the-android-build-process\"\u003e42. What is Gradle, and why is it used in the Android build process?\u003c/h5\u003e\n\u003cp\u003eGradle is a powerful build automation tool used in the Android development ecosystem to manage dependencies, compile code, run tests, and package applications. Its flexibility allows developers to define custom build configurations, automate tasks, and manage complex build processes efficiently.\nGradle serves as the foundation for the build system. It allows developers to configure build types, product flavors, and dependencies using a Groovy or Kotlin DSL (Domain Specific Language). Gradle‚Äôs incremental build capabilities also help reduce build times by only compiling code that has changed since the last build.\u003c/p\u003e\n\u003ch5 id=\"43-what-are-gradle-tasks-and-how-are-they-used-in-the-build-process\"\u003e43. What are Gradle tasks, and how are they used in the build process?\u003c/h5\u003e\n\u003cp\u003eGradle tasks are units of work that Gradle performs when building your project. Each task represents a specific action, such as compiling code, packaging an APK, or running tests. Tasks can be built-in (provided by the Android Gradle plugin) or custom (defined by developers).\u003c/p\u003e\n\u003ch5 id=\"44-how-would-you-customize-the-build-process-using-gradle-scripts\"\u003e44. How would you customize the build process using Gradle scripts?\u003c/h5\u003e\n\u003cp\u003eCustomizing the build process in Android can be achieved through Gradle scripts by adding custom tasks, modifying existing tasks, or adjusting project properties. You can create custom tasks to automate repetitive actions or to perform additional checks during the build process.\u003c/p\u003e\n\u003cp\u003eFor example, if you want to copy assets after building, you could define a task like this:\u003c/p\u003e\n\u003cp\u003etask copyAssets(type: Copy) {\nfrom \u0026lsquo;src/main/assets\u0026rsquo;\ninto \u0026lsquo;build/outputs/assets\u0026rsquo;\n}\u003c/p\u003e\n\u003cp\u003epreBuild.dependsOn(copyAssets) // Making the copyAssets task run before the preBuild task\u003c/p\u003e\n\u003ch5 id=\"45-what-is-the-difference-between-implementation-api-and-compileonly-dependencies-in-gradle\"\u003e45. What is the difference between implementation, api, and compileOnly dependencies in Gradle?\u003c/h5\u003e\n\u003cp\u003eimplementation: This dependency is only available to the module where it is declared and is not exposed to other modules that depend on it. This is useful for internal dependencies that should not leak out.\napi: Dependencies declared with api are available to both the module where they are declared and any other module that depends on this module. Use api for libraries that need to be exposed to consumers.\ncompileOnly: This dependency is only available at compile time, meaning it is not included in the final APK. It‚Äôs used for dependencies required only during compilation, like annotation processors or provided libraries.\ndependencies {\nimplementation \u0026lsquo;com.google.code.gson:gson:2.8.8\u0026rsquo;\napi \u0026lsquo;com.squareup.okhttp3:okhttp:4.9.2\u0026rsquo;\ncompileOnly \u0026lsquo;javax.annotation:javax.annotation-api:1.3.2\u0026rsquo;\n}\u003c/p\u003e\n\u003ch5 id=\"46-can-you-explain-the-purpose-of-proguard-and-r8-in-the-android-build-process\"\u003e46. Can you explain the purpose of ProGuard and R8 in the Android build process?\u003c/h5\u003e\n\u003cp\u003eProGuard and R8 are tools used for code shrinking and obfuscation in Android applications.\u003c/p\u003e\n\u003cp\u003eProGuard: A tool that has been traditionally used for code shrinking and obfuscation in Android. It works by analyzing the bytecode, removing unused classes and methods, and renaming classes and fields to shorter names.\nR8: Introduced as a replacement for ProGuard, R8 performs all the functions of ProGuard but is more efficient and faster. It combines the shrinking and optimization processes, resulting in smaller APK sizes with better performance.\nBoth tools can be configured in the build.gradle file, and R8 is enabled by default in Android projects.\nandroid {\nbuildTypes {\nrelease {\nminifyEnabled true\nproguardFiles getDefaultProguardFile(\u0026lsquo;proguard-android-optimize.txt\u0026rsquo;), \u0026lsquo;proguard-rules.pro\u0026rsquo;\n}\n}\n}\u003c/p\u003e\n\u003ch5 id=\"47-what-are-build-types-in-android-and-what-are-the-default-types-provided\"\u003e47. What are build types in Android, and what are the default types provided?\u003c/h5\u003e\n\u003cp\u003eBuild types in Android define different configurations for building an app, typically used to differentiate between development and production versions. The default build types provided by the Android Gradle plugin are:\u003c/p\u003e\n\u003cp\u003edebug: This type is used during development and includes debug symbols and additional logging features. It enables testing and debugging of the app.\nrelease: This type is optimized for production use, removing debugging information and enabling code shrinking and obfuscation. It should be used to generate the final APK or app bundle for distribution.\nYou can also define custom build types based on your project requirements.\u003c/p\u003e\n\u003ch5 id=\"48-how-does-the-android-asset-packaging-tool-aapt-work-in-the-build-process\"\u003e48. How does the Android Asset Packaging Tool (AAPT) work in the build process?\u003c/h5\u003e\n\u003cp\u003eThe Android Asset Packaging Tool (AAPT) is a crucial component in the Android build process that handles the packaging of app resources into an APK. It compiles resources such as XML files, images, and other assets, generating a binary representation that the Android system can understand. AAPT also generates the R.java file, which is a reference for accessing resources in the code.\u003c/p\u003e\n\u003cp\u003eDuring the build process, AAPT processes resource directories, merging resources from different sources (like libraries) and ensuring that resources are unique. It then packages these resources into the APK, along with compiled code and manifest files.\u003c/p\u003e\n\u003ch5 id=\"49-how-can-you-improve-the-build-speed-in-android\"\u003e49. How can you improve the build speed in Android?\u003c/h5\u003e\n\u003cp\u003eSome effective strategies include:\u003c/p\u003e\n\u003cp\u003eEnable Gradle Daemon: Using the Gradle Daemon can speed up builds by keeping the Gradle process running in the background.\norg.gradle.daemon=true\nEnable Parallel Builds: Running tasks in parallel can reduce build times, especially in large projects.\norg.gradle.parallel=true\nConfigure Incremental Builds: Ensure that only modified files are rebuilt by using incremental compilation and caching mechanisms.\nUse Build Caches: Gradle supports local and remote build caches, allowing tasks to reuse outputs from previous builds.\nMinimize Resource Processing: Limit resource usage by optimizing image sizes and using vector graphics where possible.\u003c/p\u003e\n\u003ch5 id=\"50-what-are-multidex-and-multidex-support-library-and-when-are-they-needed\"\u003e50. What are multidex and multidex support library, and when are they needed?\u003c/h5\u003e\n\u003cp\u003eMultidex is a feature that allows an Android app to have multiple DEX files. This is necessary when the number of method references in an app exceeds the 65,536 limit imposed by the DEX format. Multidex support library provides tools and methods to manage and access multiple DEX files seamlessly.\nTo enable multidex support, you can add the following configuration in your build.gradle file:\nandroid {\ndefaultConfig {\nmultiDexEnabled true\n}\n}\ndependencies {\nimplementation \u0026lsquo;com.android.support:multidex:1.0.3\u0026rsquo;\n}\u003c/p\u003e\n\u003ch5 id=\"51-how-do-you-handle-versioning-in-the-android-build-process\"\u003e51. How do you handle versioning in the Android build process?\u003c/h5\u003e\n\u003cp\u003eVersioning in the Android build process is crucial for tracking application releases and managing updates. It is defined in the build.gradle file using versionCode and versionName.\u003c/p\u003e\n\u003cp\u003eversionCode: An integer value representing the version of the application. This number must be incremented with each release and is used by the Android system to determine whether one version is more recent than another.\nversionName: A user-friendly string representing the version name of the application (e.g., ‚Äú1.0‚Äù, ‚Äú2.1.3‚Äù). It does not have to be unique and can be used for display purposes.\u003c/p\u003e\n\u003ch5 id=\"52-what-are-buildconfig-and-manifest-placeholders-and-how-are-they-used\"\u003e52. What are BuildConfig and Manifest placeholders, and how are they used?\u003c/h5\u003e\n\u003cp\u003eBuildConfig is a class automatically generated by the Android build system that contains build-specific constants, such as the application ID, build type, and version information. It can be accessed directly in your Java or Kotlin code.\nManifest placeholders allow you to replace specific values in the AndroidManifest.xml at build time. This can be useful for customizing application IDs, API keys, or other configurations based on build types or flavors.\u003c/p\u003e\n\u003ch5 id=\"53-how-do-you-generate-signed-apks-and-app-bundles-in-android\"\u003e53. How do you generate signed APKs and app bundles in Android?\u003c/h5\u003e\n\u003cp\u003eTo generate signed APKs or app bundles in Android, you can use Android Studio or Gradle command line. In Android Studio, you can navigate to Build \u0026gt; Generate Signed Bundle/APK and follow the wizard to create a signed APK or app bundle. You will need to provide your keystore file and configure signing credentials.\u003c/p\u003e\n\u003cp\u003eUsing Gradle command line, you can build a signed APK by running:\u003c/p\u003e\n\u003cp\u003e./gradlew assembleRelease\nEnsure that you have configured signing information in your build.gradle file under the buildTypes section.\u003c/p\u003e\n\u003cp\u003eandroid {\nsigningConfigs {\nrelease {\nkeyAlias \u0026lsquo;my-key-alias\u0026rsquo;\nkeyPassword \u0026lsquo;my-key-password\u0026rsquo;\nstoreFile file(\u0026lsquo;my-keystore.jks\u0026rsquo;)\nstorePassword \u0026lsquo;my-store-password\u0026rsquo;\n}\n}\nbuildTypes {\nrelease {\nsigningConfig signingConfigs.release\n}\n}\n}\u003c/p\u003e\n\u003ch5 id=\"54-what-are-the-differences-between-an-apk-and-an-aab-android-app-bundle\"\u003e54. What are the differences between an APK and an AAB (Android App Bundle)?\u003c/h5\u003e\n\u003cp\u003eAPK (Android Package) and AAB (Android App Bundle) are both packaging formats for Android applications, but they serve different purposes:\u003c/p\u003e\n\u003cp\u003eAPK: This is the traditional package format used for distributing and installing apps on Android devices. It contains all the app‚Äôs resources, code, and metadata in a single file. APKs are simple to distribute but can lead to larger download sizes since they include resources for all device configurations.\nAAB: The Android App Bundle is a more efficient format introduced by Google Play. It allows developers to package their apps in a way that Google Play can optimize for each device configuration, delivering only the necessary code and resources. This results in smaller app sizes for end-users and supports features like dynamic delivery and on-demand resources.\u003c/p\u003e\n\u003ch5 id=\"55-how-to-reduce-apk-size-in-android\"\u003e55. How to reduce APK size in Android?\u003c/h5\u003e\n\u003cp\u003eUse ProGuard/R8: Enable code shrinking and obfuscation to remove unused code and resources.\nOptimize Images: Use compressed image formats (like WebP) and reduce image resolutions for various screen densities.\nRemove Unused Resources: Use resource shrinking to eliminate unused resources in the final APK.\nModularize the App: Split the app into multiple modules and load only necessary parts, using features like dynamic delivery.\nUse Android App Bundle (AAB): Transition to AAB format for optimized delivery through Google Play, ensuring users download only the necessary code and resources.\u003c/p\u003e\n\u003ch5 id=\"56-what-is-the-purpose-of-the-android-profiler-and-what-are-its-main-components\"\u003e56. What is the purpose of the Android Profiler, and what are its main components?\u003c/h5\u003e\n\u003cp\u003eThe Android Profiler is a powerful tool integrated into Android Studio that helps developers monitor the performance of their applications in real time. It provides insights into various aspects of app behavior, such as CPU usage, memory allocation, network activity, and battery consumption.\nThe main components of the Android Profiler include the CPU Profiler, Memory Profiler, Network Profiler, and Energy Profiler.\nThe CPU Profiler allows you to analyze how your app utilizes the CPU, helping to identify heavy processing tasks.\nThe Memory Profiler tracks memory usage over time, enabling you to spot leaks and optimize memory allocation.\nThe Network Profiler monitors network requests and responses, giving insights into data usage and response times.\nLastly, the Energy Profiler helps you understand your app‚Äôs battery usage patterns, making it easier to implement energy-saving measures.\u003c/p\u003e\n\u003ch5 id=\"57-how-can-you-use-the-memory-profiler-to-detect-memory-leaks\"\u003e57. How can you use the Memory Profiler to detect memory leaks?\u003c/h5\u003e\n\u003cp\u003eThe Memory Profiler is an essential tool for identifying memory leaks in Android applications. A memory leak occurs when an application holds onto memory that is no longer needed, leading to increased memory usage and potential app crashes.\nTo use the Memory Profiler, you first run your app in debug mode, then open the profiler by selecting the ‚ÄúMemory‚Äù tab in the Android Profiler window. Here, you can monitor memory allocations in real time, take heap dumps, and analyze retained objects.\nTo detect memory leaks, initiate a heap dump while your app is running and then analyze the heap dump. In the heap dump, you can inspect the instances of objects and their references. Look for objects that should have been cleared but are still in memory.\u003c/p\u003e\n\u003ch5 id=\"58-explain-how-to-use-the-cpu-profiler-to-analyze-app-performance\"\u003e58. Explain how to use the CPU Profiler to analyze app performance.\u003c/h5\u003e\n\u003cp\u003eThe CPU Profiler is a critical component for analyzing the performance of an Android application, particularly in understanding how effectively your app utilizes CPU resources.\nTo use the CPU Profiler, run your app in Android Studio, navigate to the ‚ÄúCPU‚Äù section of the Android Profiler, and start recording CPU activity. You can select to profile specific processes, such as your app or background services, and choose the recording mode ‚Äî either ‚ÄúSampling‚Äù for an overview or ‚ÄúInstrumentation‚Äù for detailed method tracing.\nThe profiler displays information on CPU usage over time, highlighting which methods are consuming the most resources. You can drill down into specific method calls and view their execution times, enabling you to identify performance bottlenecks.\u003c/p\u003e\n\u003ch5 id=\"59-what-is-strictmode-and-how-can-it-help-in-debugging\"\u003e59. What is StrictMode, and how can it help in debugging?\u003c/h5\u003e\n\u003cp\u003etrictMode is a debugging tool provided by Android that helps developers identify and fix issues related to performance and improper usage of the Android framework. When enabled, StrictMode can catch potential problems such as accidental disk writes on the main thread, network operations on the UI thread, and memory leaks. This tool is particularly useful during the development phase, as it enforces best practices and promotes cleaner code by alerting developers to problematic patterns that may lead to a degraded user experience.\u003c/p\u003e\n\u003cp\u003eTo enable StrictMode in your application, you can add the following code in your Application class or Activity\u0026rsquo;s onCreate method:\u003c/p\u003e\n\u003cp\u003eif (BuildConfig.DEBUG) {\nStrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()\n.detectAll()\n.penaltyLog()\n.build());\nStrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()\n.detectLeakedSqlLiteObjects()\n.detectLeakedClosableObjects()\n.penaltyLog()\n.build());\n}\u003c/p\u003e\n\u003ch5 id=\"60-how-do-you-use-the-network-profiler-and-what-information-can-you-obtain-from-it\"\u003e60. How do you use the Network Profiler, and what information can you obtain from it?\u003c/h5\u003e\n\u003cp\u003eThe Network Profiler is a valuable tool for monitoring the network activity of your Android application, helping you understand how it consumes data and interacts with web services.\nTo use the Network Profiler, launch your app in Android Studio, navigate to the ‚ÄúNetwork‚Äù tab in the Android Profiler, and observe real-time network requests made by your app. The profiler displays various metrics such as request size, response size, latency, and the status of each request.\nIt helps identify large payloads that may slow down app performance and allows you to see the specific endpoints your app is communicating with. You can also check for HTTP errors, such as 404 or 500 status codes, which may indicate issues with your server or API.\u003c/p\u003e\n\u003ch5 id=\"61-what-are-some-strategies-you-use-to-identify-and-resolve-anr-application-not-responding-issues\"\u003e61. What are some strategies you use to identify and resolve ANR (Application Not Responding) issues?\u003c/h5\u003e\n\u003cp\u003eApplication Not Responding (ANR) issues occur when the main thread of an Android application is blocked for too long, typically over 5 seconds.\u003c/p\u003e\n\u003cp\u003eUsing the Android Profiler, particularly the CPU Profiler, can help you monitor thread activity and identify long-running operations. Analyze the stack traces provided in the ANR dialog, which reveal what the main thread was executing at the time of the ANR.\nAnother effective strategy is to implement asynchronous processing using background threads for long-running tasks.\nAdditionally, profiling your app‚Äôs performance during heavy operations can highlight potential bottlenecks. Implementing a responsive user interface, such as displaying loading indicators or providing user feedback during data processing, can also mitigate the impact of ANRs.\u003c/p\u003e\n\u003ch5 id=\"62-how-can-you-debug-a-crash-that-only-happens-in-release-builds\"\u003e62. How can you debug a crash that only happens in release builds?\u003c/h5\u003e\n\u003cp\u003eTo tackle this issue, start by ensuring you have proper logging in place. Using libraries like Firebase Crashlytics or Sentry can help capture and report crashes in production, providing detailed stack traces and user context to assist in diagnosing the problem.\nAdditionally, you can implement custom error handling to log exceptions before they cause a crash.\nAnother approach is to generate a mapping file during the build process, which can help you deobfuscate stack traces from release builds. If you‚Äôre using ProGuard or R8 for code shrinking, make sure to keep the mapping files accessible. When a crash occurs, you can use these files to translate obfuscated method names and line numbers back to the original source code, making it easier to pinpoint the cause of the crash.\nFinally, consider testing release builds on different devices and configurations to reproduce the issue.\u003c/p\u003e\n\u003ch5 id=\"63-what-is-adb-and-how-is-it-useful-in-android-debugging\"\u003e63. What is ADB, and how is it useful in Android debugging?\u003c/h5\u003e\n\u003cp\u003eAndroid Debug Bridge (ADB) is a versatile command-line tool that enables communication between a computer and an Android device or emulator. ADB is particularly useful for debugging because it allows developers to retrieve logs from the device using commands like adb logcat. This command outputs the system logs, including log messages from your application, which can be invaluable for troubleshooting crashes and performance issues. Additionally, ADB provides features for running tests, pushing and pulling files to and from the device, and monitoring app performance, all of which streamline the debugging process.\u003c/p\u003e\n\u003ch5 id=\"64-explain-the-process-of-debugging-a-memory-leak-when-dealing-with-the-android-activity-lifecycle\"\u003e64. Explain the process of debugging a memory leak when dealing with the Android Activity Lifecycle.\u003c/h5\u003e\n\u003cp\u003eTo start, use the Memory Profiler in Android Studio to track memory usage and identify any unusual increases in memory allocation when activities are created and destroyed. When an Activity is paused or destroyed, ensure that it properly cleans up resources, such as unregistering listeners, nullifying references to static objects, and avoiding memory leaks from inner classes.\nTaking a heap dump while the application is running can provide further insights into retained objects that should have been cleared. In the heap dump analysis, look for instances of the Activity that should no longer be in memory, as well as any objects that hold references to the Activity. For example, if you see a retained instance of a Fragment or a View that references the Activity, it may indicate a leak.\nAdditionally, consider using libraries like LeakCanary, which can automatically detect leaks and provide detailed reports, streamlining the debugging process.\u003c/p\u003e\n\u003ch5 id=\"65-how-do-you-debug-ui-related-issues-which-tools-do-you-prefer-for-layout-analysis\"\u003e65. How do you debug UI-related issues? Which tools do you prefer for layout analysis?\u003c/h5\u003e\n\u003cp\u003eOne of the primary tools for layout analysis is the Layout Inspector, which allows you to view and analyze the UI hierarchy in real time while your app is running. With Layout Inspector, you can see how views are arranged, their attributes, and how they interact with each other, making it easier to spot problems like overlapping views or incorrect layouts.\nThe Constraint Layout editor provides visual feedback on layout constraints, helping you understand how to optimize your UI for different screen sizes.\nThe UI Automator Viewer allows you to inspect the layout of apps that are not under your control, which is particularly useful when testing against third-party apps.\u003c/p\u003e\n\u003ch5 id=\"66-what-is-unit-testing-and-why-is-it-important\"\u003e66. What is unit testing, and why is it important?\u003c/h5\u003e\n\u003cp\u003eUnit testing is the process of testing individual components or functions of a software application in isolation to ensure that each part performs as expected. In Android development, unit tests focus on testing small pieces of code, such as methods and classes, without relying on external systems like databases or network resources. The primary goal of unit testing is to validate that each unit of the codebase behaves correctly under various conditions, thus ensuring the reliability of the application.\u003c/p\u003e\n\u003ch5 id=\"67-what-are-the-key-principles-of-a-good-unit-test\"\u003e67. What are the key principles of a good unit test?\u003c/h5\u003e\n\u003cp\u003eGood unit tests are designed with several key principles in mind, ensuring they are effective and maintainable.\u003c/p\u003e\n\u003cp\u003eFirst, isolated: tests should focus on a single unit of work and not depend on other components. This isolation allows for faster execution and more straightforward debugging.\nSecond, repeatable: tests must produce the same result every time they are run, regardless of the environment or the order in which they are executed. This principle ensures consistency in the testing process.\nThird, descriptive: test names should clearly indicate what behavior is being tested, making it easier to understand the intent of the tests at a glance.\nFourth, fast: unit tests should execute quickly to encourage frequent running during development, promoting a continuous integration workflow.\nLastly, good unit tests should be independent, meaning that the outcome of one test should not influence another, allowing for easier pinpointing of issues when a test fails.\u003c/p\u003e\n\u003ch5 id=\"68-explain-the-difference-between-unit-testing-integration-testing-and-end-to-end-testing\"\u003e68. Explain the difference between unit testing, integration testing, and end-to-end testing.\u003c/h5\u003e\n\u003cp\u003eUnit testing focuses on individual components or functions within the application, ensuring that each unit behaves correctly in isolation. It generally tests small pieces of code, such as methods or classes, without relying on external dependencies.\nIntegration testing, on the other hand, examines how various components work together. It verifies that different modules or services interact as expected when combined, ensuring that the interfaces between them are functioning correctly. Integration tests may involve interactions with databases, network services, or file systems.\nEnd-to-end testing (E2E testing) tests the entire application workflow from start to finish, simulating user behavior in a real environment. It assesses how the application behaves as a whole, ensuring that all components work together to fulfill business requirements.\u003c/p\u003e\n\u003ch5 id=\"69-what-testing-frameworks-are-commonly-used-for-unit-testing-in-android\"\u003e69. What testing frameworks are commonly used for unit testing in Android?\u003c/h5\u003e\n\u003cp\u003eJUnit: A foundational framework for writing and running tests in Java, JUnit is commonly used for unit tests in Android applications. It provides annotations and assertions to define and check test conditions.\nMockito: A mocking framework that allows developers to create mock objects for testing. Mockito is particularly useful for isolating unit tests from dependencies, enabling the testing of components in isolation.\nRobolectric: This framework enables developers to run Android tests directly in the JVM, eliminating the need for an emulator or physical device. Robolectric provides a simulated Android environment for testing UI components and other Android-specific functionality.\nEspresso: While primarily used for UI testing, Espresso can also be used in conjunction with unit tests to validate user interactions and ensure that the UI behaves correctly.\nThese frameworks can be integrated with build systems like Gradle to streamline the testing process.\u003c/p\u003e\n\u003ch5 id=\"70-what-is-mockito-and-how-do-you-use-it-in-android-unit-tests\"\u003e70. What is Mockito, and how do you use it in Android unit tests?\u003c/h5\u003e\n\u003cp\u003eMockito is a popular mocking framework used to create mock objects for testing. It allows developers to simulate the behavior of complex dependencies, enabling unit tests to focus on the logic of the class being tested without relying on actual implementations of its dependencies. This isolation is crucial for ensuring that unit tests are efficient and reliable.\u003c/p\u003e\n\u003ch5 id=\"71-how-does-robolectric-work-and-why-is-it-used-in-android-testing\"\u003e71. How does Robolectric work, and why is it used in Android testing?\u003c/h5\u003e\n\u003cp\u003eRobolectric is a testing framework that allows developers to run Android tests directly on the JVM (Java Virtual Machine) instead of relying on an emulator or physical device.\nThis capability significantly speeds up the testing process, as it eliminates the overhead of starting an emulator, allowing developers to run tests quickly during the development cycle.\nRobolectric simulates the Android runtime environment, providing access to Android APIs and allowing for the testing of UI components, services, and other application components.\nRobolectric achieves this by creating a shadow of the Android classes, which acts as a substitute for the actual classes in the Android framework. This approach allows developers to write unit tests for Android applications in a more straightforward manner.\u003c/p\u003e\n\u003ch5 id=\"72-what-are-some-challenges-youve-faced-while-unit-testing-android-apps\"\u003e72. What are some challenges you‚Äôve faced while unit testing Android apps?\u003c/h5\u003e\n\u003cp\u003eOne common challenge is dealing with the Android framework itself, which can complicate testing due to its reliance on context and system services. For example, components like Activities and Services are tightly integrated with the Android lifecycle, making it challenging to test them in isolation without a robust testing framework like Robolectric.\nAnother challenge is managing dependencies, particularly when working with classes that require external resources or heavy configurations. These dependencies can lead to complex setup and teardown processes, making tests harder to maintain.\nMoreover, asynchronous code, such as network requests or database operations, can introduce timing issues that complicate unit testing. Ensuring that tests run reliably in the face of concurrency and timing can require additional strategies like using mock objects or libraries that facilitate testing of asynchronous tasks.\u003c/p\u003e\n\u003ch5 id=\"73-what-is-dependency-injection-and-why-is-it-useful-in-unit-testing\"\u003e73. What is dependency injection, and why is it useful in unit testing?\u003c/h5\u003e\n\u003cp\u003eDependency Injection (DI) is a design pattern that allows a class to receive its dependencies from an external source rather than creating them internally. This approach promotes loose coupling and enhances code modularity, making it easier to manage dependencies.\nBy using dependency injection, you can easily replace complex or stateful dependencies with simpler, predictable alternatives. For example, if a class requires a network service, you can inject a mock version of that service during tests to control the responses and behavior. This capability enables thorough testing of the class‚Äôs logic without interference from the complexities of the actual dependencies, leading to more reliable and maintainable tests.\u003c/p\u003e\n\u003ch5 id=\"74-explain-the-difference-between-mock-and-spy-in-mockito\"\u003e74. Explain the difference between @Mock and @Spy in Mockito.\u003c/h5\u003e\n\u003cp\u003eThe @Mock annotation is used to create a mock instance of a class. A mock is a simulated object that mimics the behavior of a real object but without executing its actual code. When you call methods on a mock, you can define the expected behavior using Mockito‚Äôs when and thenReturn methods.\nThe @Spy annotation is used to create a spy instance of a class. A spy is a partial mock that allows you to call real methods of the object while still being able to verify interactions and change the behavior of specific methods. This is useful when you want to test a class‚Äôs behavior but also monitor its interactions.\u003c/p\u003e\n\u003ch5 id=\"75-what-are-some-anti-patterns-in-unit-testing-and-how-do-you-avoid-them\"\u003e75. What are some anti-patterns in unit testing, and how do you avoid them?\u003c/h5\u003e\n\u003cp\u003eTesting Implementation Details: Focusing too much on the internal workings of a class rather than its behavior can make tests brittle and difficult to maintain. Instead, tests should validate the expected outcomes and behavior from the perspective of the class‚Äôs public interface.\nOver-Mocking: Creating excessive mocks can lead to tests that are disconnected from the actual behavior of the application. Instead of mocking every dependency, consider using real objects for simpler dependencies or integrating with lightweight versions of complex components.\nToo Many Assertions: Having multiple assertions in a single test can make it challenging to identify the cause of a failure. Aim for one assertion per test to improve clarity and focus.\nIgnoring Test Failures: Allowing failing tests to persist in the codebase can create technical debt and reduce the confidence in the test suite. Regularly review and maintain tests, removing or fixing any that are no longer relevant or passing.\u003c/p\u003e\n\u003ch5 id=\"76-how-do-you-decide-the-naming-conventions-for-test-cases\"\u003e76. How do you decide the naming conventions for test cases?\u003c/h5\u003e\n\u003cp\u003eA good naming convention should clearly convey the intent of the test and the specific behavior being validated. A common approach is to use the format methodName_StateUnderTest_ExpectedBehavior, which provides context about what is being tested.\u003c/p\u003e\n\u003cp\u003eFor example, if testing a method called calculateDiscount() in a class called ShoppingCart, a suitable test name might be calculateDiscount_WhenCalledWithValidInput_ReturnsCorrectDiscount(). This name indicates the method being tested, the condition under which it is called, and the expected outcome.\u003c/p\u003e\n\u003ch5 id=\"77-how-do-you-use-when-and-verify-statements-in-mockito\"\u003e77. How do you use when and verify statements in Mockito?\u003c/h5\u003e\n\u003cp\u003eThe when statement is used to define the behavior of a mock object when a specific method is called. This allows you to control what the mock returns or does when invoked. For example:\nwhen(mockedObject.methodCall()).thenReturn(someValue)\nThe verify statement is used to check whether a particular method was called on a mock object during the test. This is important for ensuring that interactions with the mock occur as expected.\nverify(mockedObject).methodCall()\u003c/p\u003e\n\u003ch5 id=\"78-can-you-give-examples-of-using-argumentcaptor-in-tests\"\u003e78. Can you give examples of using ArgumentCaptor in tests?\u003c/h5\u003e\n\u003cp\u003eArgumentCaptor is a useful feature in Mockito that allows you to capture arguments passed to mock methods during a test. This can be particularly helpful when you want to verify that a method was called with specific parameters or when you want to manipulate the arguments for further assertions.\u003c/p\u003e\n\u003ch5 id=\"thanks-for-reading\"\u003eThanks for reading!\u003c/h5\u003e\n\u003cp\u003eHope you find this useful. This is just a list of questions I personally found useful in interviews. This list is by no means exhaustive. Let me know your thoughts in the responses. Happy coding!\u003c/p\u003e\n","description":"Android Interview Series 2024 ‚Äî Part 2","image":"https://hdwallsbox.com/wallpapers/m/78/3d-android-logo-background-m77313.jpg","permalink":"https://whywhom.github.io/blogs/android-interview-series-2024-part-2-android-intermediate/","title":"Android intermediate"},{"content":"\u003cp\u003eHere is the original article:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://proandroiddev.com/android-interview-series-2024-part-1-android-basics-23a713f4a648\"\u003eüîó Android Interview Series 2024 ‚Äì Part 1 (Android Basics)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis article is published on ProAndroidDev and covers essential Android interview topics for 2024. üöÄ\u003c/p\u003e\n\u003ch5 id=\"1-what-is-the-android-application-architecture\"\u003e1. What is the Android Application Architecture?\u003c/h5\u003e\n\u003cp\u003eAndroid application architecture has the following components:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eContent Providers ‚àí It will share the data between applications.\u003c/li\u003e\n\u003cli\u003eServices ‚àí It will perform background functionalities\u003c/li\u003e\n\u003cli\u003eIntent ‚àí It will perform the inter connection between activities and the data passing mechanism.\u003c/li\u003e\n\u003cli\u003eResource Externalization ‚àí strings and graphics.\u003c/li\u003e\n\u003cli\u003eNotification ‚àí light, sound, icon, notification, dialog box and toast.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"2-what-is-the-application-class\"\u003e2. What is the Application class?\u003c/h5\u003e\n\u003cp\u003eThe Application class in Android is the base class within an Android app that contains all other components such as activities and services. The Application class, or any subclass of the Application class, is instantiated before any other class when the process for your application/package is created.\u003c/p\u003e\n\u003ch5 id=\"3-what-is-context\"\u003e3. What is \u003ccode\u003eContext\u003c/code\u003e?\u003c/h5\u003e\n\u003cp\u003eA \u003ccode\u003eContext\u003c/code\u003e is a handle to the system; it provides services like resolving resources, obtaining access to databases and preferences, and so on. An Android app has activities. Context is like a handle to the environment your application is currently running in.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eApplication Context: This context is tied to the lifecycle of an application. The application context can be used when you need a context whose lifecycle is separate from the current context or when you are passing a context beyond the scope of an activity.\u003c/li\u003e\n\u003cli\u003eActivity Context: This context is available in an activity. This context is tied to the lifecycle of an activity. The activity context should be used when you are passing the context in the scope of an activity or you need the context whose lifecycle is attached to the current context.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"4-what-are-the-four-components-of-an-android-application\"\u003e4. What are the four components of an android application?\u003c/h5\u003e\n\u003cp\u003eAn Android application is built around four main components, each serving a distinct purpose in how the application operates and interacts with the system and other applications. These four components are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eActivities\u003c/li\u003e\n\u003cli\u003eServices\u003c/li\u003e\n\u003cli\u003eBroadcast Receivers\u003c/li\u003e\n\u003cli\u003eContent Providers\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"5-describe-services\"\u003e5. Describe services\u003c/h5\u003e\n\u003cp\u003eA Service is a component that performs long-running operations in the background. Services do not provide a user interface; instead, they run in the background to handle tasks like data processing, file downloading, or playing music, even if the app isn‚Äôt in the foreground. These are the three different types of services:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eForeground Service: Runs actively and is visible to the user through a persistent notification in the notification bar. It is commonly used for tasks that the user is explicitly aware of, such as music players or navigation apps. Foreground services have a higher priority than other services.\u003c/li\u003e\n\u003cli\u003eBackground Service: Runs in the background without user interaction. Since Android 8.0 (Oreo), background services are restricted due to battery and performance optimizations. Background tasks are generally handled by WorkManager or JobScheduler for greater efficiency.\u003c/li\u003e\n\u003cli\u003eBound Service: Allows components (like activities and fragments) to bind to the service, enabling communication. For example, a bound service could handle requests and return results to a client, such as fetching data or updating an activity with real-time information.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"6-explain-the-service-lifecycle\"\u003e6. Explain the Service lifecycle.\u003c/h5\u003e\n\u003cp\u003eServices have a distinct lifecycle that differs from activities. Understanding these methods is key to managing resources and preventing memory leaks:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eonCreate()\u003c/code\u003e: Called when the service is created for the first time. This is where you initialize resources such as setting up connections or data processing.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonStartCommand()\u003c/code\u003e: Called each time a client starts the service using startService(). This method is where the service performs its main task. You can decide to keep the service running indefinitely or to stop it once the task is completed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonBind()\u003c/code\u003e: Called when another component wants to bind with the service by calling bindService(). A bound service uses this to return an IBinder instance for communication.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonUnbind()\u003c/code\u003e: Called when all clients unbind from the service.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e: Called when the service is being terminated. This is where resources are released, and any running tasks are cleaned up.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"7-difference-between-service--intent-service\"\u003e7. Difference between Service \u0026amp; Intent Service\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eA Service\u003c/code\u003e runs on the main (UI) thread of the application. When an IntentService is started, it creates a worker thread to handle all intent requests sequentially.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eA Service\u003c/code\u003e can handle multiple tasks simultaneously but requires additional threading management. An IntentService processes intents sequentially in a single background worker thread. When an intent is sent to an IntentService, it queues the work and processes each request in order, one at a time, until all tasks are complete.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eService\u003c/code\u003e is ideal for long-running tasks that require interaction or need to keep running in the background even if the user has left the app. IntentService is ideal for short, discrete background tasks that don‚Äôt require prolonged activity or user interaction, such as: downloading a file, uploading data to a server, processing or syncing data in the background.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"8-what-is-android-bound-service\"\u003e8. What is Android Bound Service?\u003c/h5\u003e\n\u003cp\u003eA Bound Service in Android is a type of service that allows other components, like activities or fragments, to bind to it and interact with it directly. Unlike a started service that runs independently, a bound service provides a client-server interface and remains active only as long as there are clients bound to it. Bound services are ideal when you need to maintain an interactive, continuous connection between the service and clients, such as: \u003cstrong\u003eReal-Time Data Syncing, Media Playback, Location Updates\u003c/strong\u003e etc.\u003c/p\u003e\n\u003ch5 id=\"9-explain-the-difference-between-intentservice-and-jobintentservice\"\u003e9. Explain the difference between IntentService and JobIntentService.\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIntentService\u003c/code\u003e is a specialized Service that handles each incoming intent on a worker thread, automatically stopping itself when all tasks are completed. It‚Äôs useful for lightweight, immediate tasks that need to run in the background. However, IntentService runs only as long as the app is in the foreground or has a persistent process, as it doesn‚Äôt survive app process termination.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eJobIntentService\u003c/code\u003e, introduced as part of Android‚Äôs support library, was designed to work better with these background restrictions. It combines the features of IntentService with JobScheduler, enabling tasks to be completed even if the app is no longer in the foreground. When the device is running Android 8.0 or later, JobIntentService uses the JobScheduler API, which allows tasks to persist across app restarts or even device reboots. It‚Äôs ideal for tasks that are not immediate but need guaranteed execution at some point, like uploading logs or syncing data.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"10-describe-activities\"\u003e10. Describe activities\u003c/h5\u003e\n\u003cp\u003eAn Activity represents a single screen with a user interface. It acts as the entry point for interacting with the app and serves as a container for views. Each activity is typically associated with a layout file that defines the UI components.\u003c/p\u003e\n\u003ch5 id=\"11-lifecycle-of-an-activity\"\u003e11. Lifecycle of an Activity\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOnCreate()\u003c/code\u003e: This is when the view is first created. This is normally where we create views, get data from bundles etc.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOnStart()\u003c/code\u003e: Called when the activity is becoming visible to the user. Followed by onResume() if the activity comes to the foreground, or onStop() if it becomes hidden.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOnResume()\u003c/code\u003e: Called when the activity will start interacting with the user. At this point your activity is at the top of the activity stack, with user input going to it.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOnPause()\u003c/code\u003e: Called as part of the activity lifecycle when an activity is going into the background, but has not (yet) been killed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOnStop()\u003c/code\u003e: Called when you are no longer visible to the user.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOnDestroy()\u003c/code\u003e: Called when the activity is finishing\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOnRestart()\u003c/code\u003e: Called after your activity has been stopped, prior to it being started again.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"12-whats-the-difference-between-oncreate-and-onstart\"\u003e12. What‚Äôs the difference between \u003ccode\u003eonCreate()\u003c/code\u003e and \u003ccode\u003eonStart()\u003c/code\u003e?\u003c/h5\u003e\n\u003cp\u003eThe \u003ccode\u003eonCreate()\u003c/code\u003e method is called once during the Activity lifecycle, either when the application starts, or when the Activity has been destroyed and then recreated, for example during a configuration change.\nThe \u003ccode\u003eonStart()\u003c/code\u003e method is called whenever the Activity becomes visible to the user, typically after \u003ccode\u003eonCreate()\u003c/code\u003e or \u003ccode\u003eonRestart()\u003c/code\u003e.\u003c/p\u003e\n\u003ch5 id=\"13-scenario-in-which-only-ondestroy-is-called-for-an-activity-without-onpause-and-onstop\"\u003e13. Scenario in which only onDestroy is called for an activity without onPause() and onStop()?\u003c/h5\u003e\n\u003cp\u003eIf finish() is called in the OnCreate() method of an activity, the system will invoke onDestroy() method directly.\u003c/p\u003e\n\u003ch5 id=\"14-why-would-you-set-the-setcontentview-in-oncreate-of-activity-class\"\u003e14. Why would you set the setContentView() in onCreate() of Activity class?\u003c/h5\u003e\n\u003cp\u003eAs onCreate() of an Activity is called only once, this is the point where most initialisation should go. It is inefficient to set the content in onResume() or onStart() (which are called multiple times) as the setContentView() is a heavy operation.\u003c/p\u003e\n\u003ch5 id=\"15-difference-between-onsavedinstancestate-and-onrestoreinstancestate-in-an-activity\"\u003e15. Difference between onSavedInstanceState() and onRestoreInstanceState() in an activity?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOnRestoreInstanceState()\u003c/code\u003e ‚Äì When activity is recreated after it was previously destroyed, we can recover the saved state from the Bundle that the system passes to the activity. Both the onCreate() and onRestoreInstanceState() callback methods receive the same Bundle that contains the instance state information. But because the onCreate() method is called whether the system is creating a new instance of your activity or recreating a previous one, you must check whether the state Bundle is null before you attempt to read it. If it is null, then the system is creating a new instance of the activity, instead of restoring a previous one that was destroyed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonSaveInstanceState()\u003c/code\u003e ‚Äì is a method used to store data before pausing the activity.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"16-launch-modes-in-android\"\u003e16. Launch modes in Android?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eStandard: It creates a new instance of an activity in the task from which it was started. Multiple instances of the activity can be created and multiple instances can be added to the same or different tasks. Eg: Suppose there is an activity stack of A -\u0026gt; B -\u0026gt; C. Now if we launch B again with the launch mode as ‚Äústandard‚Äù, the new stack will be A -\u0026gt; B -\u0026gt; C -\u0026gt; B.\u003c/li\u003e\n\u003cli\u003eSingleTop: It is the same as the standard, except if there is a previous instance of the activity that exists in the top of the stack, then it will not create a new instance but rather send the intent to the existing instance of the activity. Eg: Suppose there is an activity stack of A -\u0026gt; B. Now if we launch C with the launch mode as ‚ÄúsingleTop‚Äù, the new stack will be A -\u0026gt; B -\u0026gt; C as usual. Now if there is an activity stack of A -\u0026gt; B -\u0026gt; C. If we launch C again with the launch mode as ‚ÄúsingleTop‚Äù, the new stack will still be A -\u0026gt; B -\u0026gt; C.\u003c/li\u003e\n\u003cli\u003eSingleTask: A new task will always be created and a new instance will be pushed to the task as the root one. So if the activity is already in the task, the intent will be redirected to onNewIntent() or else a new instance will be created. At a time only one instance of activity will exist. Eg: Suppose there is an activity stack of A -\u0026gt; B -\u0026gt; C -\u0026gt; D. Now if we launch D with the launch mode as ‚ÄúsingleTask‚Äù, the new stack will be A -\u0026gt; B -\u0026gt; C -\u0026gt; D as usual. Now if there is an activity stack of A -\u0026gt; B -\u0026gt; C -\u0026gt; D. If we launch activity B again with the launch mode as ‚ÄúsingleTask‚Äù, the new activity stack will be A -\u0026gt; B. Activities C and D will be destroyed.\u003c/li\u003e\n\u003cli\u003eSingleInstance: Same as single task but the system does not launch any activities in the same task as this activity. If new activities are launched, they are done so in a separate task. Eg: Suppose there is an activity stack of A -\u0026gt; B -\u0026gt; C -\u0026gt; D. If we launch activity B again with the launch mode as ‚ÄúsingleInstance‚Äù, the new activity stack will be: Task1 ‚Äî A -\u0026gt; B -\u0026gt; C; Task2 ‚Äî D.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"17-how-does-the-activity-respond-when-the-user-rotates-the-screen\"\u003e17. How does the activity respond when the user rotates the screen?\u003c/h5\u003e\n\u003cp\u003eWhen the screen is rotated, the current instance of activity is destroyed a new instance of the Activity is created in the new orientation. The onRestart() is invoked first when a screen is rotated. The other lifecycle methods get invoked in the similar flow as they were when the activity was first created.\u003c/p\u003e\n\u003ch5 id=\"18-mention-two-ways-to-clear-the-back-stack-of-activities-when-a-new-activity-is-called-using-intent\"\u003e18. Mention two ways to clear the back stack of Activities when a new Activity is called using intent.\u003c/h5\u003e\n\u003cp\u003eThe first approach is to use a \u003ccode\u003eFLAG_ACTIVITY_CLEAR_TOP\u003c/code\u003e flag. The second way is by using \u003ccode\u003eFLAG_ACTIVITY_CLEAR_TASK\u003c/code\u003e and \u003ccode\u003eFLAG_ACTIVITY_NEW_TASK\u003c/code\u003e in conjunction.\u003c/p\u003e\n\u003ch5 id=\"19-whats-the-difference-between-flag_activity_clear_task-and-flag_activity_clear_top\"\u003e19. What‚Äôs the difference between FLAG_ACTIVITY_CLEAR_TASK and FLAG_ACTIVITY_CLEAR_TOP?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eFLAG_ACTIVITY_CLEAR_TOP\u003c/code\u003e, if set and if an old instance of this Activity exists in the task list then barring that all the other activities are removed and that old activity becomes the root of the task list. Else if there‚Äôs no instance of that activity then a new instance of it is made the root of the task list. Using FLAG_ACTIVITY_NEW_TASK in conjunction is a good practice, though not necessary.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFLAG_ACTIVITY_CLEAR_TASK\u003c/code\u003e is used to clear all the activities from the task including any existing instances of the class invoked. The Activity launched by intent becomes the new root of the otherwise empty task list. This flag has to be used in conjunction with FLAG_ ACTIVITY_NEW_TASK.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"20-difference-between-activity--service\"\u003e20. Difference between Activity \u0026amp; Service\u003c/h5\u003e\n\u003cp\u003eActivities are basically containers or windows to the user interface. Services is a component that is used to perform operations on the background. It does not have an UI.\u003c/p\u003e\n\u003ch5 id=\"21-what-is-the-ontrimmemory-method\"\u003e21. What is the onTrimMemory() method?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eonTrimMemory()\u003c/code\u003e method in Android is a callback that informs an app about its current memory status, allowing it to manage resources and release memory when necessary.\u003c/li\u003e\n\u003cli\u003eThis method is called with different levels of memory urgency, represented by constants like \u003ccode\u003eTRIM_MEMORY_RUNNING_MODERATE\u003c/code\u003e, \u003ccode\u003eTRIM_MEMORY_RUNNING_LOW\u003c/code\u003e, or \u003ccode\u003eTRIM_MEMORY_BACKGROUND\u003c/code\u003e, indicating whether the app is in the background, has reduced memory, or is at risk of being killed if memory isn‚Äôt freed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"22-explain-the-purpose-of-jobscheduler-and-how-it-works\"\u003e22. Explain the purpose of JobScheduler and how it works.\u003c/h5\u003e\n\u003cp\u003eThe \u003ccode\u003eJobScheduler\u003c/code\u003e API is designed to schedule tasks that need to be run in the background under specific conditions, such as network availability, device charging, or idle state. Introduced in Android 5.0 (API level 21),  \u003ccode\u003eJobScheduler\u003c/code\u003e allows developers to defer jobs until these optimal conditions are met, enhancing device efficiency and battery life by batching background tasks.\u003c/p\u003e\n\u003ch5 id=\"23-describe-content-providers\"\u003e23. Describe content providers\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eA ContentProvider provides data from one application to another, when requested. It manages access to a structured set of data.\u003c/li\u003e\n\u003cli\u003eIt provides mechanisms for defining data security.\u003c/li\u003e\n\u003cli\u003eContentProvider is the standard interface that connects data in one process with code running in another process. When you want to access data in a ContentProvider, you must instead use the ContentResolver object in your application‚Äôs Context to communicate with the provider as a client.\u003c/li\u003e\n\u003cli\u003eThe provider object receives data requests from clients, performs the requested action, and returns the results.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"24-access-data-using-content-provider\"\u003e24. Access data using Content Provider:\u003c/h5\u003e\n\u003cp\u003eStart by making sure your Android application has the necessary read access permissions. Then, get access to the ContentResolver object by calling getContentResolver() on the Context object, and retrieving the data by constructing a query using ContentResolver.query(). This method returns a Cursor, so you can retrieve data from each column using Cursor methods.\u003c/p\u003e\n\u003ch5 id=\"25-what-are-broadcastreceivers\"\u003e25. What are BroadcastReceivers?\u003c/h5\u003e\n\u003cp\u003eBroadcast Receivers allow your app to respond to system-wide events, like network changes or low battery. They can be registered in code or manifest and are useful for tasks like reacting to connectivity changes in a messaging app.\u003c/p\u003e\n\u003ch5 id=\"26-what-is-an-intent\"\u003e26. What is an intent?\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003eIntents\u003c/code\u003e are messages that can be used to pass information to the various components of android. For instance, launch an activity, open a webview etc. Two types of intents-\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eExplicit\u003c/code\u003e: Explicit intent is when you call an application activity from another activity of the same application.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eImplicit\u003c/code\u003e: Implicit intent is when you call system default intent like send email, send SMS, dial number.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"27-what-is-a-sticky-intent\"\u003e27. What is a Sticky Intent?\u003c/h5\u003e\n\u003cp\u003eA Sticky Intent is an intent that remains in the system after it has been broadcast. When a sticky broadcast is sent, it ‚Äústicks‚Äù around in the system so that future receivers can access the data even if they register after the broadcast was originally sent. This can be useful when you want to broadcast an intent that other components might need to access at a later time, rather than at the time of broadcast.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: Sticky broadcasts were widely used in earlier versions of Android but are discouraged in modern Android development. The Android team now recommends alternatives like ViewModel and LiveData to achieve similar results more securely and efficiently.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch5 id=\"28-what-is-a-pending-intent\"\u003e28. What is a Pending Intent?\u003c/h5\u003e\n\u003cp\u003eA PendingIntent in Android is a special type of intent that grants another app or system component the permission to execute a predefined action on behalf of your application at a later time. It‚Äôs essentially a wrapped intent that can be handed off to another application or the Android system to execute later, often under specific conditions. Example Use Cases:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNotifications: When you create a notification, you usually want to trigger an action when the user clicks it (like opening an activity). A PendingIntent lets you specify this action in advance.\u003c/li\u003e\n\u003cli\u003eAlarms with AlarmManager: If you want to schedule an action to be executed at a specific time, you use PendingIntent with AlarmManager to define the action.\u003c/li\u003e\n\u003cli\u003eLocation Updates: PendingIntent is used with location services to trigger a specific action when a location condition is met, like entering or exiting a geographical area.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"29-what-is-an-action\"\u003e29. What is an Action?\u003c/h5\u003e\n\u003cp\u003eAn Action represents a specific operation or behavior that an Intent can perform. It‚Äôs essentially a string constant that defines what type of operation should be carried out, and it‚Äôs used by both the system and applications to specify and handle particular actions. Actions are fundamental in defining the nature of intents, allowing Android components (like activities, services, and broadcast receivers) to respond to specific events or tasks.\u003c/p\u003e\n\u003ch5 id=\"30-what-are-intent-filters\"\u003e30. What are intent Filters?\u003c/h5\u003e\n\u003cp\u003eIntent Filters in Android define the types of intents that a component (such as an Activity, Service, or BroadcastReceiver) can respond to. They are specified in the AndroidManifest.xml file or programmatically and allow the Android system to determine which components are capable of handling certain intents. Intent filters make it possible for apps to interact with each other and respond to system-wide events.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eactivity android:name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.ExampleActivity\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eintent\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003efilter\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eaction android:name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.action.VIEW\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003ecategory android:name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.DEFAULT\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edata android:scheme\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e android:host\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;www.example.com\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/\u003c/span\u003eintent\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003efilter\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/\u003c/span\u003eactivity\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"31-what-is-a-fragment-and-how-does-it-differ-from-an-activity\"\u003e31. What is a Fragment, and how does it differ from an Activity?\u003c/h5\u003e\n\u003cp\u003eFragment is a UI entity attached to Activity. Fragments can be reused by attaching in different activities. Activity can have multiple fragments attached to it. Fragment must be attached to an activity and its lifecycle will depend on its host activity.\u003c/p\u003e\n\u003ch5 id=\"32-describe-fragment-lifecycle\"\u003e32. Describe fragment lifecycle\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eonAttach()\u003c/code\u003e : The fragment instance is associated with an activity instance.The fragment and the activity is not fully initialized. Typically you get in this method a reference to the activity which uses the fragment for further initialization work.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonCreate()\u003c/code\u003e : The system calls this method when creating the fragment. You should initialize essential components of the fragment that you want to retain when the fragment is paused or stopped, then resumed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e : The system calls this callback when it‚Äôs time for the fragment to draw its user interface for the first time. To draw a UI for your fragment, you must return a View component from this method that is the root of your fragment‚Äôs layout. You can return null if the fragment does not provide a UI.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonActivityCreated()\u003c/code\u003e : The onActivityCreated() is called after the onCreateView() method when the host activity is created. Activity and fragment instance have been created as well as the view hierarchy of the activity. At this point, view can be accessed with the findViewById() method. example. In this method you can instantiate objects which require a Context object\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonStart()\u003c/code\u003e : The onStart() method is called once the fragment gets visible.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonResume()\u003c/code\u003e : Fragment becomes active.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonPause()\u003c/code\u003e : The system calls this method as the first indication that the user is leaving the fragment. This is usually where you should commit any changes that should be persisted beyond the current user session.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonStop()\u003c/code\u003e : Fragment going to be stopped by calling onStop()\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonDestroyView()\u003c/code\u003e : Fragment view will destroy after call this method\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e: called to do final clean up of the fragment‚Äôs state but Not guaranteed to be called by the Android platform.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"33-what-is-the-difference-between-fragments--activities-explain-the-relationship-between-the-two\"\u003e33. What is the difference between fragments \u0026amp; activities. Explain the relationship between the two.\u003c/h5\u003e\n\u003cp\u003eAn Activity is an application component that provides a screen, with which users can interact in order to do something whereas a Fragment represents a behavior or a portion of user interface in an Activity (with its own lifecycle and input events, and which can be added or removed at will).\u003c/p\u003e\n\u003ch5 id=\"34-difference-between-addingreplacing-fragment-in-backstack\"\u003e34. Difference between adding/replacing fragment in backstack?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003ereplace removes the existing fragment and adds a new fragment. This means when you press back button the fragment that got replaced will be created with its onCreateView being invoked.\u003c/li\u003e\n\u003cli\u003eadd retains the existing fragments and adds a new fragment that means existing fragment will be active and they wont be in ‚Äòpaused‚Äô state hence when a back button is pressed onCreateView is not called for the existing fragment(the fragment which was there before new fragment was added).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: In terms of fragment‚Äôs life cycle events onPause(), onResume(), onCreateView() and other life cycle events will be invoked in case of replace but they wont be invoked in case of add.\u003c/p\u003e\n\u003ch5 id=\"35-what-are-retained-fragments\"\u003e35. What are retained fragments?\u003c/h5\u003e\n\u003cp\u003eRetained Fragments are fragments that are preserved across configuration changes (like screen rotations). By setting a fragment to be retained, you prevent it from being destroyed and recreated when the activity‚Äôs configuration changes, allowing the fragment to retain its data and state.\u003c/p\u003e\n\u003cp\u003eTo create a retained fragment, you need to call setRetainInstance(true) in the fragment‚Äôs onCreate() method. This marks the fragment as retained, allowing it to survive configuration changes.\u003c/p\u003e\n\u003ch5 id=\"36-how-do-you-handle-back-navigation-in-a-fragment\"\u003e36. How do you handle back navigation in a Fragment?\u003c/h5\u003e\n\u003cp\u003eYou can use the OnBackPressedDispatcher to listen for back press events and navigate accordingly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// MainActivity.kt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.os.Bundle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.OnBackPressedCallback\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.appcompat.app.AppCompatActivity\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.fragment.app.Fragment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.fragment.app.FragmentManager\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.fragment.app.commit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e com.example.app.R\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : AppCompatActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        setContentView(R.\u003cspan style=\"color:#a6e22e\"\u003elayout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eactivity_main\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (savedInstanceState \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            supportFragmentManager.\u003cspan style=\"color:#a6e22e\"\u003ecommit\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                replace(R.\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efragment_container\u003c/span\u003e, FirstFragment())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// FirstFragment.kt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.os.Bundle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.view.LayoutInflater\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.view.View\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.view.ViewGroup\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.widget.Button\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.OnBackPressedCallback\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.fragment.app.Fragment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.fragment.app.commit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e com.example.app.R\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFirstFragment\u003c/span\u003e : Fragment() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreateView\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        inflater: LayoutInflater, container: ViewGroup\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ): View\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val view \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e inflater.\u003cspan style=\"color:#a6e22e\"\u003einflate\u003c/span\u003e(R.\u003cspan style=\"color:#a6e22e\"\u003elayout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efragment_first\u003c/span\u003e, container, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        view.\u003cspan style=\"color:#a6e22e\"\u003efindViewById\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eButton\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(R.\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ebutton_to_second_fragment\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003esetOnClickListener\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            parentFragmentManager.\u003cspan style=\"color:#a6e22e\"\u003ecommit\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                replace(R.\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efragment_container\u003c/span\u003e, SecondFragment())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                addToBackStack(\u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e view\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// SecondFragment.kt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.os.Bundle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.view.LayoutInflater\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.view.View\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e android.view.ViewGroup\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.activity.OnBackPressedCallback\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e androidx.fragment.app.Fragment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e com.example.app.R\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSecondFragment\u003c/span\u003e : Fragment() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreateView\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        inflater: LayoutInflater, container: ViewGroup\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ): View\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e inflater.\u003cspan style=\"color:#a6e22e\"\u003einflate\u003c/span\u003e(R.\u003cspan style=\"color:#a6e22e\"\u003elayout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efragment_second\u003c/span\u003e, container, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonViewCreated\u003c/span\u003e(view: View, savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonViewCreated\u003c/span\u003e(view, savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Handle back press when this fragment is active\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        requireActivity().\u003cspan style=\"color:#a6e22e\"\u003eonBackPressedDispatcher\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eaddCallback\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            viewLifecycleOwner,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            object : OnBackPressedCallback(\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                override fun \u003cspan style=\"color:#a6e22e\"\u003ehandleOnBackPressed\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#75715e\"\u003e// Custom behavior on back press\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    parentFragmentManager.\u003cspan style=\"color:#a6e22e\"\u003epopBackStack\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"37-how-do-you-communicate-between-fragments\"\u003e37. How do you communicate between fragments?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eUsing a Shared ViewModel: The most modern and recommended approach, especially within a single activity, is to use a shared ViewModel scoped to the Activity. Both fragments observe data within the same ViewModel, allowing seamless data sharing. This approach works well with the Android Architecture Components and ensures data consistency even through configuration changes.\u003c/li\u003e\n\u003cli\u003eDirect Interface Callback: Define an interface in the fragment and let the activity implement it. Fragment A can then call methods on this interface, which the activity handles by passing data to Fragment B. This approach is less commonly used now with ViewModel but still effective when fragments communicate indirectly through their host activity.\u003c/li\u003e\n\u003cli\u003eFragment Result API: Introduced in AndroidX, the Fragment Result API is a direct way to communicate between two fragments, often for one-time data exchanges. Fragment A sets a result with a unique key, and Fragment B registers to observe this result using that key. It‚Äôs simple and scoped to the fragment lifecycle, making it a good choice for temporary data passing, like sending a user selection or form data.\u003c/li\u003e\n\u003cli\u003ePassing Data through Arguments: for one-way communication (e.g., sending data from Fragment A to Fragment B when Fragment B is created), you can pass data through Bundle arguments using Fragment.setArguments(). This method is straightforward and primarily used for sending data at the time of fragment creation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"38-what-is-the-difference-between-oncreateview-and-onviewcreated-in-fragments\"\u003e38. What is the difference between onCreateView and onViewCreated in Fragments?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eonCreateView\u003c/code\u003e: This method is called when the fragment is creating its view hierarchy, and its primary purpose is to inflate the layout for the fragment. You usually override onCreateView to return the root view for your fragment by inflating a layout file.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonViewCreated\u003c/code\u003e: This method is called after onCreateView and is meant for additional view setup. It‚Äôs triggered after the fragment‚Äôs view has been created and fully inflated, making it the ideal place to initialize UI components, set up listeners, or perform operations that interact with the view.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"39-how-would-you-update-the-ui-of-an-activity-from-a-background-service\"\u003e39. How would you update the UI of an activity from a background service?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eUsing BroadcastReceiver: One common method is to use a BroadcastReceiver in the activity to listen for broadcasts sent from the service. When the service needs to update the UI, it sends a broadcast with the relevant data, and the activity‚Äôs receiver handles the UI update. (Sample code)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eclass MyService : Service() {\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n        // Perform background work\n        val result = \u0026#34;Data from Service\u0026#34;\n        \n        // Send broadcast to update UI\n        val broadcastIntent = Intent(\u0026#34;com.example.UPDATE_UI\u0026#34;)\n        broadcastIntent.putExtra(\u0026#34;result_data\u0026#34;, result)\n        sendBroadcast(broadcastIntent)\n        \n        return START_STICKY\n    }\n}\n\nclass MainActivity : AppCompatActivity() {\n    \n    private val updateReceiver = object : BroadcastReceiver() {\n        override fun onReceive(context: Context?, intent: Intent?) {\n            val data = intent?.getStringExtra(\u0026#34;result_data\u0026#34;)\n            // Update the UI with received data\n            textView.text = data\n        }\n    }\n\n    override fun onStart() {\n        super.onStart()\n        // Register receiver to listen for broadcasts from the service\n        val intentFilter = IntentFilter(\u0026#34;com.example.UPDATE_UI\u0026#34;)\n        registerReceiver(updateReceiver, intentFilter)\n    }\n\n    override fun onStop() {\n        super.onStop()\n        // Unregister receiver when activity is stopped\n        unregisterReceiver(updateReceiver)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eYou can use a shared ViewModel with LiveData to observe data changes. This approach is especially effective for a single-activity application where fragments and services share data using ViewModel. (Sample)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSharedViewModel\u003c/span\u003e : ViewModel() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val _data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MutableLiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val data: LiveData\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e _data\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun \u003cspan style=\"color:#a6e22e\"\u003eupdateData\u003c/span\u003e(newData: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _data.\u003cspan style=\"color:#a6e22e\"\u003epostValue\u003c/span\u003e(newData)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyService\u003c/span\u003e : Service() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val viewModel: SharedViewModel by \u003cspan style=\"color:#a6e22e\"\u003eviewModels\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonStartCommand\u003c/span\u003e(intent: Intent\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e, flags: Int, startId: Int): Int {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Perform background work and update ViewModel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Data from Service\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewModel.\u003cspan style=\"color:#a6e22e\"\u003eupdateData\u003c/span\u003e(result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e START_STICKY\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : AppCompatActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val viewModel: SharedViewModel by \u003cspan style=\"color:#a6e22e\"\u003eviewModels\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState: Bundle\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonCreate\u003c/span\u003e(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        setContentView(R.\u003cspan style=\"color:#a6e22e\"\u003elayout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eactivity_main\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Observe data changes in ViewModel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        viewModel.\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eobserve\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e) { data \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// Update UI with new data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            textView.\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eMessenger allows the service to communicate with a client (activity) using message passing. This approach is beneficial if you need two-way communication between the activity and the service. (Sample code)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyService\u003c/span\u003e : Service() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val messenger \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Messenger(IncomingHandler())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    inner \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIncomingHandler\u003c/span\u003e : Handler(Looper.\u003cspan style=\"color:#a6e22e\"\u003egetMainLooper\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        override fun \u003cspan style=\"color:#a6e22e\"\u003ehandleMessage\u003c/span\u003e(msg: Message) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// Handle incoming messages if needed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonBind\u003c/span\u003e(intent: Intent\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e): IBinder\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e messenger.\u003cspan style=\"color:#a6e22e\"\u003ebinder\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Method to send message to the activity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e fun \u003cspan style=\"color:#a6e22e\"\u003esendMessageToActivity\u003c/span\u003e(data: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val message \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Message.\u003cspan style=\"color:#a6e22e\"\u003eobtain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e, 1, 0, 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        message.\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Bundle().\u003cspan style=\"color:#a6e22e\"\u003eapply\u003c/span\u003e { putString(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;data\u0026#34;\u003c/span\u003e, data) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        messenger.\u003cspan style=\"color:#a6e22e\"\u003esend\u003c/span\u003e(message)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMainActivity\u003c/span\u003e : AppCompatActivity() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e serviceMessenger: Messenger\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val replyMessenger \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Messenger(Handler { msg \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e msg.\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egetString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;data\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Update UI\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        textView.\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e val connection \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e object : ServiceConnection {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        override fun \u003cspan style=\"color:#a6e22e\"\u003eonServiceConnected\u003c/span\u003e(name: ComponentName\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e, service: IBinder\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            serviceMessenger \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Messenger(service)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        override fun \u003cspan style=\"color:#a6e22e\"\u003eonServiceDisconnected\u003c/span\u003e(name: ComponentName\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            serviceMessenger \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonStart\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonStart\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Bind to the service\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val intent \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Intent(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e, MyService::\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ejava\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        bindService(intent, connection, Context.\u003cspan style=\"color:#a6e22e\"\u003eBIND_AUTO_CREATE\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    override fun \u003cspan style=\"color:#a6e22e\"\u003eonStop\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonStop\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Unbind from the service\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        unbindService(connection)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eYou can use LocalBroadcastManager for broadcasting data updates. This is similar to BroadcastReceiver, but LocalBroadcastManager confines broadcasts to within the same app, which is more secure and efficient.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"40-what-is-the-purpose-of-the-recyclerviewadapter\"\u003e40. What is the purpose of the RecyclerView.Adapter?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eThe purpose of the RecyclerView.Adapter in Android is to act as a bridge between the data source and the RecyclerView UI component.\u003c/li\u003e\n\u003cli\u003eIt is responsible for creating ViewHolder objects to display each item in the list and binding the data from the data source to these ViewHolders. The adapter ensures that only a limited number of views are created and recycled efficiently as they scroll off-screen, improving performance by reducing memory usage and avoiding the need to create a new view for every item in the list.\u003c/li\u003e\n\u003cli\u003eThe adapter also manages notifying the RecyclerView about data changes, which allows the list to update dynamically. By separating data management from the layout and UI logic, RecyclerView.Adapter promotes a clean, modular approach to implementing dynamic lists.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"41-what-is-constraintlayout-and-why-is-it-useful\"\u003e41. What is ConstraintLayout, and why is it useful?\u003c/h5\u003e\n\u003cp\u003eIt allows you to create large and complex layouts with a flat view hierarchy (no nested view groups). It‚Äôs similar to RelativeLayout in that all views are laid out according to relationships between sibling views and the parent layout, but it‚Äôs more flexible than RelativeLayout and easier to use with Android Studio‚Äôs Layout Editor. Using ConstraintLayout, developers can create responsive UIs that adapt well to different screen sizes, orientations, and resolutions by specifying constraints that make views dynamically adjust.\u003c/p\u003e\n\u003ch5 id=\"42-difference-between-relativelayout-and-linearlayout\"\u003e42. Difference between RelativeLayout and LinearLayout?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eLinear Layout ‚Äî Arranges elements either vertically or horizontally. i.e. in a row or column.\u003c/li\u003e\n\u003cli\u003eRelative Layout ‚Äî Arranges elements relative to parent or other elements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"43-when-might-you-use-a-framelayout\"\u003e43. When might you use a FrameLayout?\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eFrame Layouts are designed to contain a single item, making them an efficient choice when you need to display a single View.\u003c/li\u003e\n\u003cli\u003eIf you add multiple Views to a FrameLayout then it‚Äôll stack them one above the other, so FrameLayouts are also useful if you need overlapping Views, for example if you‚Äôre implementing an overlay or a HUD element.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"thanks-for-reading\"\u003eThanks for reading!\u003c/h5\u003e\n\u003cp\u003eHope you find this useful. This is just a list of questions I personally found useful in interviews. This list is by no means exhaustive. Let me know your thoughts in the responses. Happy coding!\u003c/p\u003e\n","description":"Android Interview Series 2024 ‚Äî Part 1","image":"https://hdwallsbox.com/wallpapers/m/78/3d-android-logo-background-m77313.jpg","permalink":"https://whywhom.github.io/blogs/android-interview-series-2024-part-1-android-basics/","title":"Android basics Interview"},{"content":"","description":"My gallery :earth_asia:","image":null,"permalink":"https://whywhom.github.io/gallery/","title":"Image Gallery"}]